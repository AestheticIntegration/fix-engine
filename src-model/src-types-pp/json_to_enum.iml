(* Aesthetic Integration copyright 2018 *)
open Decoders_yojson.Basic.Decode;;
open Decoders_yojson.Basic.Decode.Infix;;
open Model_app_enums;;
open Model_enum_names;;

let mod_enum_legside_decoder  : model_fix_legside decoder =
    string >>= (fun x -> (match string_to_mod_legside_opt x with
        | None -> (fail "Unknown enum (LegSide) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let mod_enum_dealeridsource_decoder  : model_fix_dealeridsource decoder =
    string >>= (fun x -> (match string_to_mod_dealeridsource_opt x with
        | None -> (fail "Unknown enum (DealerIDSource) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let mod_enum_allocreporttype_decoder  : model_fix_allocreporttype decoder =
    string >>= (fun x -> (match string_to_mod_allocreporttype_opt x with
        | None -> (fail "Unknown enum (AllocReportType) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let mod_enum_trdregpublicationreason_decoder  : model_fix_trdregpublicationreason decoder =
    string >>= (fun x -> (match string_to_mod_trdregpublicationreason_opt x with
        | None -> (fail "Unknown enum (TrdRegPublicationReason) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let mod_enum_mktxautoexrefleveltype_decoder  : model_fix_mktxautoexrefleveltype decoder =
    string >>= (fun x -> (match string_to_mod_mktxautoexrefleveltype_opt x with
        | None -> (fail "Unknown enum (MKTXAutoExRefLevelType) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let mod_enum_partysubidtype_decoder  : model_fix_partysubidtype decoder =
    string >>= (fun x -> (match string_to_mod_partysubidtype_opt x with
        | None -> (fail "Unknown enum (PartySubIDType) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let mod_enum_mktxlisttype_decoder  : model_fix_mktxlisttype decoder =
    string >>= (fun x -> (match string_to_mod_mktxlisttype_opt x with
        | None -> (fail "Unknown enum (MKTXListType) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let mod_enum_exectype_decoder  : model_fix_exectype decoder =
    string >>= (fun x -> (match string_to_mod_exectype_opt x with
        | None -> (fail "Unknown enum (ExecType) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let mod_enum_yieldtype_decoder  : model_fix_yieldtype decoder =
    string >>= (fun x -> (match string_to_mod_yieldtype_opt x with
        | None -> (fail "Unknown enum (YieldType) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let mod_enum_mktxanalysisto_decoder  : model_fix_mktxanalysisto decoder =
    string >>= (fun x -> (match string_to_mod_mktxanalysisto_opt x with
        | None -> (fail "Unknown enum (MKTXAnalysisTo) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let mod_enum_mktxtrdregpublicationreason_decoder  : model_fix_mktxtrdregpublicationreason decoder =
    string >>= (fun x -> (match string_to_mod_mktxtrdregpublicationreason_opt x with
        | None -> (fail "Unknown enum (MKTXTrdRegPublicationReason) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let mod_enum_dkreason_decoder  : model_fix_dkreason decoder =
    string >>= (fun x -> (match string_to_mod_dkreason_opt x with
        | None -> (fail "Unknown enum (DKReason) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let mod_enum_execinst_decoder  : model_fix_execinst decoder =
    string >>= (fun x -> (match string_to_mod_execinst_opt x with
        | None -> (fail "Unknown enum (ExecInst) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let mod_enum_includedealers_decoder  : model_fix_includedealers decoder =
    string >>= (fun x -> (match string_to_mod_includedealers_opt x with
        | None -> (fail "Unknown enum (IncludeDealers) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let mod_enum_mktxtradestyle_decoder  : model_fix_mktxtradestyle decoder =
    string >>= (fun x -> (match string_to_mod_mktxtradestyle_opt x with
        | None -> (fail "Unknown enum (MKTXTradeStyle) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let mod_enum_alloccancreplacereason_decoder  : model_fix_alloccancreplacereason decoder =
    string >>= (fun x -> (match string_to_mod_alloccancreplacereason_opt x with
        | None -> (fail "Unknown enum (AllocCancReplaceReason) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let mod_enum_tradereportingindicator_decoder  : model_fix_tradereportingindicator decoder =
    string >>= (fun x -> (match string_to_mod_tradereportingindicator_opt x with
        | None -> (fail "Unknown enum (TradeReportingIndicator) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let mod_enum_partyrole_decoder  : model_fix_partyrole decoder =
    string >>= (fun x -> (match string_to_mod_partyrole_opt x with
        | None -> (fail "Unknown enum (PartyRole) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let mod_enum_legproduct_decoder  : model_fix_legproduct decoder =
    string >>= (fun x -> (match string_to_mod_legproduct_opt x with
        | None -> (fail "Unknown enum (LegProduct) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let mod_enum_sessionrejectreason_decoder  : model_fix_sessionrejectreason decoder =
    string >>= (fun x -> (match string_to_mod_sessionrejectreason_opt x with
        | None -> (fail "Unknown enum (SessionRejectReason) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let mod_enum_settltype_decoder  : model_fix_settltype decoder =
    string >>= (fun x -> (match string_to_mod_settltype_opt x with
        | None -> (fail "Unknown enum (SettlType) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let mod_enum_lastcapacity_decoder  : model_fix_lastcapacity decoder =
    string >>= (fun x -> (match string_to_mod_lastcapacity_opt x with
        | None -> (fail "Unknown enum (LastCapacity) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let mod_enum_algorithm_decoder  : model_fix_algorithm decoder =
    string >>= (fun x -> (match string_to_mod_algorithm_opt x with
        | None -> (fail "Unknown enum (Algorithm) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let mod_enum_forexreq_decoder  : model_fix_forexreq decoder =
    string >>= (fun x -> (match string_to_mod_forexreq_opt x with
        | None -> (fail "Unknown enum (ForexReq) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let mod_enum_regulatorytradeidtype_decoder  : model_fix_regulatorytradeidtype decoder =
    string >>= (fun x -> (match string_to_mod_regulatorytradeidtype_opt x with
        | None -> (fail "Unknown enum (RegulatoryTradeIDType) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let mod_enum_legswaptype_decoder  : model_fix_legswaptype decoder =
    string >>= (fun x -> (match string_to_mod_legswaptype_opt x with
        | None -> (fail "Unknown enum (LegSwapType) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let mod_enum_ordercapacity_decoder  : model_fix_ordercapacity decoder =
    string >>= (fun x -> (match string_to_mod_ordercapacity_opt x with
        | None -> (fail "Unknown enum (OrderCapacity) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let mod_enum_securityidsource_decoder  : model_fix_securityidsource decoder =
    string >>= (fun x -> (match string_to_mod_securityidsource_opt x with
        | None -> (fail "Unknown enum (SecurityIDSource) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let mod_enum_tradingprotocol_decoder  : model_fix_tradingprotocol decoder =
    string >>= (fun x -> (match string_to_mod_tradingprotocol_opt x with
        | None -> (fail "Unknown enum (TradingProtocol) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let mod_enum_businessrejectreason_decoder  : model_fix_businessrejectreason decoder =
    string >>= (fun x -> (match string_to_mod_businessrejectreason_opt x with
        | None -> (fail "Unknown enum (BusinessRejectReason) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let mod_enum_handlinst_decoder  : model_fix_handlinst decoder =
    string >>= (fun x -> (match string_to_mod_handlinst_opt x with
        | None -> (fail "Unknown enum (HandlInst) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let mod_enum_securityaltidsource_decoder  : model_fix_securityaltidsource decoder =
    string >>= (fun x -> (match string_to_mod_securityaltidsource_opt x with
        | None -> (fail "Unknown enum (SecurityAltIDSource) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let mod_enum_cxlrejresponseto_decoder  : model_fix_cxlrejresponseto decoder =
    string >>= (fun x -> (match string_to_mod_cxlrejresponseto_opt x with
        | None -> (fail "Unknown enum (CxlRejResponseTo) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let mod_enum_partyidsource_decoder  : model_fix_partyidsource decoder =
    string >>= (fun x -> (match string_to_mod_partyidsource_opt x with
        | None -> (fail "Unknown enum (PartyIDSource) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let mod_enum_alloctranstype_decoder  : model_fix_alloctranstype decoder =
    string >>= (fun x -> (match string_to_mod_alloctranstype_opt x with
        | None -> (fail "Unknown enum (AllocTransType) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let mod_enum_legsecurityidsource_decoder  : model_fix_legsecurityidsource decoder =
    string >>= (fun x -> (match string_to_mod_legsecurityidsource_opt x with
        | None -> (fail "Unknown enum (LegSecurityIDSource) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let mod_enum_mktxescbstblty_decoder  : model_fix_mktxescbstblty decoder =
    string >>= (fun x -> (match string_to_mod_mktxescbstblty_opt x with
        | None -> (fail "Unknown enum (MKTXESCBStblty) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let mod_enum_allocstatus_decoder  : model_fix_allocstatus decoder =
    string >>= (fun x -> (match string_to_mod_allocstatus_opt x with
        | None -> (fail "Unknown enum (AllocStatus) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let mod_enum_internalcrossingflag_decoder  : model_fix_internalcrossingflag decoder =
    string >>= (fun x -> (match string_to_mod_internalcrossingflag_opt x with
        | None -> (fail "Unknown enum (InternalCrossingFlag) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let mod_enum_mktxautoexstatus_decoder  : model_fix_mktxautoexstatus decoder =
    string >>= (fun x -> (match string_to_mod_mktxautoexstatus_opt x with
        | None -> (fail "Unknown enum (MKTXAutoExStatus) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let mod_enum_ordstatus_decoder  : model_fix_ordstatus decoder =
    string >>= (fun x -> (match string_to_mod_ordstatus_opt x with
        | None -> (fail "Unknown enum (OrdStatus) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let mod_enum_allocrejcode_decoder  : model_fix_allocrejcode decoder =
    string >>= (fun x -> (match string_to_mod_allocrejcode_opt x with
        | None -> (fail "Unknown enum (AllocRejCode) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let mod_enum_side_decoder  : model_fix_side decoder =
    string >>= (fun x -> (match string_to_mod_side_opt x with
        | None -> (fail "Unknown enum (Side) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let mod_enum_exclude_decoder  : model_fix_exclude decoder =
    string >>= (fun x -> (match string_to_mod_exclude_opt x with
        | None -> (fail "Unknown enum (Exclude) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let mod_enum_allocnoorderstype_decoder  : model_fix_allocnoorderstype decoder =
    string >>= (fun x -> (match string_to_mod_allocnoorderstype_opt x with
        | None -> (fail "Unknown enum (AllocNoOrdersType) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let mod_enum_mktxtradereportingind_decoder  : model_fix_mktxtradereportingind decoder =
    string >>= (fun x -> (match string_to_mod_mktxtradereportingind_opt x with
        | None -> (fail "Unknown enum (MKTXTradeReportingInd) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let mod_enum_cxlrejreason_decoder  : model_fix_cxlrejreason decoder =
    string >>= (fun x -> (match string_to_mod_cxlrejreason_opt x with
        | None -> (fail "Unknown enum (CxlRejReason) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let mod_enum_qtytype_decoder  : model_fix_qtytype decoder =
    string >>= (fun x -> (match string_to_mod_qtytype_opt x with
        | None -> (fail "Unknown enum (QtyType) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let mod_enum_trdregpublicationtype_decoder  : model_fix_trdregpublicationtype decoder =
    string >>= (fun x -> (match string_to_mod_trdregpublicationtype_opt x with
        | None -> (fail "Unknown enum (TrdRegPublicationType) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let mod_enum_pretradewaiver_decoder  : model_fix_pretradewaiver decoder =
    string >>= (fun x -> (match string_to_mod_pretradewaiver_opt x with
        | None -> (fail "Unknown enum (PreTradeWaiver) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let mod_enum_competitivestatus_decoder  : model_fix_competitivestatus decoder =
    string >>= (fun x -> (match string_to_mod_competitivestatus_opt x with
        | None -> (fail "Unknown enum (CompetitiveStatus) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let mod_enum_product_decoder  : model_fix_product decoder =
    string >>= (fun x -> (match string_to_mod_product_opt x with
        | None -> (fail "Unknown enum (Product) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let mod_enum_mktxpricingprocess_decoder  : model_fix_mktxpricingprocess decoder =
    string >>= (fun x -> (match string_to_mod_mktxpricingprocess_opt x with
        | None -> (fail "Unknown enum (MKTXPricingProcess) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let mod_enum_mktxrtspurpose_decoder  : model_fix_mktxrtspurpose decoder =
    string >>= (fun x -> (match string_to_mod_mktxrtspurpose_opt x with
        | None -> (fail "Unknown enum (MKTXRTSPurpose) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let mod_enum_pricetype_decoder  : model_fix_pricetype decoder =
    string >>= (fun x -> (match string_to_mod_pricetype_opt x with
        | None -> (fail "Unknown enum (PriceType) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let mod_enum_alloctype_decoder  : model_fix_alloctype decoder =
    string >>= (fun x -> (match string_to_mod_alloctype_opt x with
        | None -> (fail "Unknown enum (AllocType) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let mod_enum_gapfillflag_decoder  : model_fix_gapfillflag decoder =
    string >>= (fun x -> (match string_to_mod_gapfillflag_opt x with
        | None -> (fail "Unknown enum (GapFillFlag) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let mod_enum_ordrejreason_decoder  : model_fix_ordrejreason decoder =
    string >>= (fun x -> (match string_to_mod_ordrejreason_opt x with
        | None -> (fail "Unknown enum (OrdRejReason) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let mod_enum_mktxautoextype_decoder  : model_fix_mktxautoextype decoder =
    string >>= (fun x -> (match string_to_mod_mktxautoextype_opt x with
        | None -> (fail "Unknown enum (MKTXAutoExType) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let mod_enum_benchmarkcurvename_decoder  : model_fix_benchmarkcurvename decoder =
    string >>= (fun x -> (match string_to_mod_benchmarkcurvename_opt x with
        | None -> (fail "Unknown enum (BenchmarkCurveName) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let mod_enum_benchmarkpricetype_decoder  : model_fix_benchmarkpricetype decoder =
    string >>= (fun x -> (match string_to_mod_benchmarkpricetype_opt x with
        | None -> (fail "Unknown enum (BenchmarkPriceType) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let mod_enum_benchmarksecurityidsource_decoder  : model_fix_benchmarksecurityidsource decoder =
    string >>= (fun x -> (match string_to_mod_benchmarksecurityidsource_opt x with
        | None -> (fail "Unknown enum (BenchmarkSecurityIDSource) encoding.")
        | Some y -> (succeed y)
    )
    )
;;
