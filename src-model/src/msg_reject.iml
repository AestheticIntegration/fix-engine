(* Aesthetic Integration copyright 2018 *)
open Model_messages;;
open State;;

let reject_NewOrderSingle_missingfield (m_state : model_state) (reject_text : string)  =
    m_state
;;

let reject_NewOrderSingle_invalidfield (m_state : model_state) (msg_data : mod_newordersingle_data) (reject_text : string)  =
    m_state
;;

let reject_NewOrderSingle_invalid (m_state : model_state) (msg_data : mod_newordersingle_data) (reject_text : string)  =
    m_state
;;

let reject_OrderCancel_missingfield (m_state : model_state) (reject_text : string)  =
    m_state
;;

let reject_OrderCancel_invalidfield (m_state : model_state) (msg_data : mod_ordercancel_data) (reject_text : string)  =
    m_state
;;

let reject_OrderCancel_invalid (m_state : model_state) (msg_data : mod_ordercancel_data) (reject_text : string)  =
    m_state
;;

let reject_NewOrder_Multi_Leg_missingfield (m_state : model_state) (reject_text : string)  =
    m_state
;;

let reject_NewOrder_Multi_Leg_invalidfield (m_state : model_state) (msg_data : mod_neworder_multi_leg_data) (reject_text : string)  =
    m_state
;;

let reject_NewOrder_Multi_Leg_invalid (m_state : model_state) (msg_data : mod_neworder_multi_leg_data) (reject_text : string)  =
    m_state
;;

let reject_NewOrder_List_missingfield (m_state : model_state) (reject_text : string)  =
    m_state
;;

let reject_NewOrder_List_invalidfield (m_state : model_state) (msg_data : mod_neworder_list_data) (reject_text : string)  =
    m_state
;;

let reject_NewOrder_List_invalid (m_state : model_state) (msg_data : mod_neworder_list_data) (reject_text : string)  =
    m_state
;;

let reject_ListOrderCancel_missingfield (m_state : model_state) (reject_text : string)  =
    m_state
;;

let reject_ListOrderCancel_invalidfield (m_state : model_state) (msg_data : mod_listordercancel_data) (reject_text : string)  =
    m_state
;;

let reject_ListOrderCancel_invalid (m_state : model_state) (msg_data : mod_listordercancel_data) (reject_text : string)  =
    m_state
;;

let reject_BusinessMessageReject_missingfield (m_state : model_state) (reject_text : string)  =
    m_state
;;

let reject_BusinessMessageReject_invalidfield (m_state : model_state) (msg_data : mod_businessmessagereject_data) (reject_text : string)  =
    m_state
;;

let reject_BusinessMessageReject_invalid (m_state : model_state) (msg_data : mod_businessmessagereject_data) (reject_text : string)  =
    m_state
;;

let reject_AllocationReport_missingfield (m_state : model_state) (reject_text : string)  =
    m_state
;;

let reject_AllocationReport_invalidfield (m_state : model_state) (msg_data : mod_allocationreport_data) (reject_text : string)  =
    m_state
;;

let reject_AllocationReport_invalid (m_state : model_state) (msg_data : mod_allocationreport_data) (reject_text : string)  =
    m_state
;;

let reject_AllocationReportACK_missingfield (m_state : model_state) (reject_text : string)  =
    m_state
;;

let reject_AllocationReportACK_invalidfield (m_state : model_state) (msg_data : mod_allocationreportack_data) (reject_text : string)  =
    m_state
;;

let reject_AllocationReportACK_invalid (m_state : model_state) (msg_data : mod_allocationreportack_data) (reject_text : string)  =
    m_state
;;

let reject_AllocationInstruction_missingfield (m_state : model_state) (reject_text : string)  =
    m_state
;;

let reject_AllocationInstruction_invalidfield (m_state : model_state) (msg_data : mod_allocationinstruction_data) (reject_text : string)  =
    m_state
;;

let reject_AllocationInstruction_invalid (m_state : model_state) (msg_data : mod_allocationinstruction_data) (reject_text : string)  =
    m_state
;;

let reject_Heartbeat_missingfield (m_state : model_state) (reject_text : string)  =
    m_state
;;

let reject_Heartbeat_invalidfield (m_state : model_state) (msg_data : mod_heartbeat_data) (reject_text : string)  =
    m_state
;;

let reject_Heartbeat_invalid (m_state : model_state) (msg_data : mod_heartbeat_data) (reject_text : string)  =
    m_state
;;

let reject_TestRequest_missingfield (m_state : model_state) (reject_text : string)  =
    m_state
;;

let reject_TestRequest_invalidfield (m_state : model_state) (msg_data : mod_testrequest_data) (reject_text : string)  =
    m_state
;;

let reject_TestRequest_invalid (m_state : model_state) (msg_data : mod_testrequest_data) (reject_text : string)  =
    m_state
;;

let reject_ResendRequest_missingfield (m_state : model_state) (reject_text : string)  =
    m_state
;;

let reject_ResendRequest_invalidfield (m_state : model_state) (msg_data : mod_resendrequest_data) (reject_text : string)  =
    m_state
;;

let reject_ResendRequest_invalid (m_state : model_state) (msg_data : mod_resendrequest_data) (reject_text : string)  =
    m_state
;;

let reject_SessionLevelReject_missingfield (m_state : model_state) (reject_text : string)  =
    m_state
;;

let reject_SessionLevelReject_invalidfield (m_state : model_state) (msg_data : mod_sessionlevelreject_data) (reject_text : string)  =
    m_state
;;

let reject_SessionLevelReject_invalid (m_state : model_state) (msg_data : mod_sessionlevelreject_data) (reject_text : string)  =
    m_state
;;

let reject_SequenceResetRequest_missingfield (m_state : model_state) (reject_text : string)  =
    m_state
;;

let reject_SequenceResetRequest_invalidfield (m_state : model_state) (msg_data : mod_sequenceresetrequest_data) (reject_text : string)  =
    m_state
;;

let reject_SequenceResetRequest_invalid (m_state : model_state) (msg_data : mod_sequenceresetrequest_data) (reject_text : string)  =
    m_state
;;

let reject_Logout_missingfield (m_state : model_state) (reject_text : string)  =
    m_state
;;

let reject_Logout_invalidfield (m_state : model_state) (msg_data : mod_logout_data) (reject_text : string)  =
    m_state
;;

let reject_Logout_invalid (m_state : model_state) (msg_data : mod_logout_data) (reject_text : string)  =
    m_state
;;

let reject_FIXLogon_missingfield (m_state : model_state) (reject_text : string)  =
    m_state
;;

let reject_FIXLogon_invalidfield (m_state : model_state) (msg_data : mod_fixlogon_data) (reject_text : string)  =
    m_state
;;

let reject_FIXLogon_invalid (m_state : model_state) (msg_data : mod_fixlogon_data) (reject_text : string)  =
    m_state
;;

let reject_DontKnowTrade_missingfield (m_state : model_state) (reject_text : string)  =
    m_state
;;

let reject_DontKnowTrade_invalidfield (m_state : model_state) (msg_data : mod_dontknowtrade_data) (reject_text : string)  =
    m_state
;;

let reject_DontKnowTrade_invalid (m_state : model_state) (msg_data : mod_dontknowtrade_data) (reject_text : string)  =
    m_state
;;

let reject_field_missing (m_state : model_state) (missing_info : field_missing_data)  =
    (match (missing_info.field_missing_data_msg,missing_info.field_missing_data_field) with
        | (_,_) -> m_state
    )
;;
