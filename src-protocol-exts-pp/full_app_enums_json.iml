(* Aesthetic Integration copyright 2019 *)
open Full_app_enums;;
open Yojson;;

let partyidsource_to_string (d)  =
    (match d with
        | FIX_PartyIDSource_BIC_code -> "BIC_code"
        | FIX_PartyIDSource_Generally_accepted_market_participant_identifier__e_g__e_mail_address_ -> "Generally_accepted_market_participant_identifier__e_g__e_mail_address_"
        | FIX_PartyIDSource_Proprietary_code -> "Proprietary_code"
        | FIX_PartyIDSource_MIC -> "MIC"
        | FIX_PartyIDSource_Legal_entity_identifier -> "Legal_entity_identifier"
        | FIX_PartyIDSource_Short_code -> "Short_code"
    )
;;

let partyrole_to_string (d)  =
    (match d with
        | FIX_PartyRole_Executing_Firm -> "Executing_Firm"
        | FIX_PartyRole_ClientID -> "ClientID"
        | FIX_PartyRole_Order_origination_trader__associated_with_order_origination_firm__e_g_g__trader_who_initiates___submits_the_order_ -> "Order_origination_trader__associated_with_order_origination_firm__e_g_g__trader_who_initiates___submits_the_order_"
        | FIX_PartyRole_Executing_Trader -> "Executing_Trader"
        | FIX_PartyRole_Order_origination_firm__e_g__Buy_side_firm_ -> "Order_origination_firm__e_g__Buy_side_firm_"
        | FIX_PartyRole_Execution_venue -> "Execution_venue"
        | FIX_PartyRole_Investment_Decision_Maker__MIFID_II_Clients_ -> "Investment_Decision_Maker__MIFID_II_Clients_"
    )
;;

let algorithm_to_string (d)  =
    (match d with
        | FIX_Algorithm_Algorithm -> "Algorithm"
    )
;;

let partysubidtype_to_string (d)  =
    (match d with
        | FIX_PartySubIDType_CSD_participant_code__DTCC_ -> "CSD_participant_code__DTCC_"
    )
;;

let securityidsource_to_string (d)  =
    (match d with
        | FIX_SecurityIDSource_CUSIP -> "CUSIP"
        | FIX_SecurityIDSource_ISIN -> "ISIN"
        | FIX_SecurityIDSource_Dummy_CUSIP -> "Dummy_CUSIP"
        | FIX_SecurityIDSource_WKN -> "WKN"
    )
;;

let product_to_string (d)  =
    (match d with
        | FIX_Product_Corporate -> "Corporate"
        | FIX_Product_Preferred -> "Preferred"
        | FIX_Product_Government -> "Government"
        | FIX_Product_Municipal -> "Municipal"
        | FIX_Product_Other -> "Other"
    )
;;

let securityaltidsource_to_string (d)  =
    (match d with
        | FIX_SecurityAltIDSource_CUSIP -> "CUSIP"
        | FIX_SecurityAltIDSource_ISIN -> "ISIN"
        | FIX_SecurityAltIDSource_TRAX_ICMA_Number -> "TRAX_ICMA_Number"
        | FIX_SecurityAltIDSource_WKN -> "WKN"
    )
;;

let benchmarkcurvename_to_string (d)  =
    (match d with
        | FIX_BenchmarkCurveName_EDSF -> "EDSF"
        | FIX_BenchmarkCurveName_LIBOR__London_Inter_Bank_Offers_ -> "LIBOR__London_Inter_Bank_Offers_"
        | FIX_BenchmarkCurveName_SWAP -> "SWAP"
    )
;;

let benchmarkpricetype_to_string (d)  =
    (match d with
        | FIX_BenchmarkPriceType_percent_of_par -> "percent_of_par"
    )
;;

let benchmarksecurityidsource_to_string (d)  =
    (match d with
        | FIX_BenchmarkSecurityIDSource_CUSIP -> "CUSIP"
        | FIX_BenchmarkSecurityIDSource_ISIN -> "ISIN"
        | FIX_BenchmarkSecurityIDSource_WKN -> "WKN"
    )
;;

let legsecurityidsource_to_string (d)  =
    (match d with
        | FIX_LegSecurityIDSource_CUSIP -> "CUSIP"
        | FIX_LegSecurityIDSource_ISIN -> "ISIN"
        | FIX_LegSecurityIDSource_MA_Dummy_CUSIP -> "MA_Dummy_CUSIP"
        | FIX_LegSecurityIDSource_WKN -> "WKN"
    )
;;

let legproduct_to_string (d)  =
    (match d with
        | FIX_LegProduct_AGENCY -> "AGENCY"
        | FIX_LegProduct_COMMODITY -> "COMMODITY"
        | FIX_LegProduct_Corporate -> "Corporate"
        | FIX_LegProduct_CURRENCY -> "CURRENCY"
        | FIX_LegProduct_EQUITY -> "EQUITY"
        | FIX_LegProduct_Government -> "Government"
        | FIX_LegProduct_INDEX -> "INDEX"
        | FIX_LegProduct_LOAN -> "LOAN"
        | FIX_LegProduct_MONEYMARKET -> "MONEYMARKET"
        | FIX_LegProduct_MORTGAGE -> "MORTGAGE"
        | FIX_LegProduct_MUNICIPAL -> "MUNICIPAL"
        | FIX_LegProduct_OTHER -> "OTHER"
        | FIX_LegProduct_FINANCING -> "FINANCING"
    )
;;

let legside_to_string (d)  =
    (match d with
        | FIX_LegSide_buy -> "buy"
        | FIX_LegSide_sell -> "sell"
        | FIX_LegSide_Opposite -> "Opposite"
    )
;;

let handlinst_to_string (d)  =
    (match d with
        | FIX_HandlInst_Automated_execution_order -> "Automated_execution_order"
        | FIX_HandlInst_Manual_Order__best_execution -> "Manual_Order__best_execution"
    )
;;

let execinst_to_string (d)  =
    (match d with
        | FIX_ExecInst_WORK -> "WORK"
    )
;;

let settltype_to_string (d)  =
    (match d with
        | FIX_SettlType_Regular -> "Regular"
        | FIX_SettlType_Cash -> "Cash"
        | FIX_SettlType_T_Plus_1__next_day_ -> "T_Plus_1__next_day_"
        | FIX_SettlType_T_Plus_2 -> "T_Plus_2"
        | FIX_SettlType_T_Plus_3 -> "T_Plus_3"
        | FIX_SettlType_T_Plus_4 -> "T_Plus_4"
        | FIX_SettlType_Future -> "Future"
        | FIX_SettlType_When_and_if_issued -> "When_and_if_issued"
        | FIX_SettlType_Sellers_Option -> "Sellers_Option"
        | FIX_SettlType_T_Plus_5 -> "T_Plus_5"
    )
;;

let ordercapacity_to_string (d)  =
    (match d with
        | FIX_OrderCapacity_Any_Other_Trading_Capacity__AOTC_ -> "Any_Other_Trading_Capacity__AOTC_"
        | FIX_OrderCapacity_Own_Account -> "Own_Account"
        | FIX_OrderCapacity_Matched_Principal -> "Matched_Principal"
    )
;;

let qtytype_to_string (d)  =
    (match d with
        | FIX_QtyType_units__shares__par__currency___Always_interpreted_as_par_by_MarketAxess_ -> "units__shares__par__currency___Always_interpreted_as_par_by_MarketAxess_"
        | FIX_QtyType_Contracts -> "Contracts"
    )
;;

let forexreq_to_string (d)  =
    (match d with
        | FIX_ForexReq_No -> "No"
        | FIX_ForexReq_Yes -> "Yes"
    )
;;

let includedealers_to_string (d)  =
    (match d with
        | FIX_IncludeDealers_Include_Only_Send_to_only_the_dealers -> "Include_Only_Send_to_only_the_dealers"
        | FIX_IncludeDealers_Include_at_Least__Send_to_dealers -> "Include_at_Least__Send_to_dealers"
    )
;;

let dealeridsource_to_string (d)  =
    (match d with
        | FIX_DealerIDSource_BIC_code -> "BIC_code"
        | FIX_DealerIDSource_Generally_accepted_market_participant_identifier -> "Generally_accepted_market_participant_identifier"
        | FIX_DealerIDSource_Proprietary_code -> "Proprietary_code"
    )
;;

let exclude_to_string (d)  =
    (match d with
        | FIX_Exclude_No__include_dealer_ -> "No__include_dealer_"
        | FIX_Exclude_Yes__exclude_dealer_ -> "Yes__exclude_dealer_"
    )
;;

let tradingprotocol_to_string (d)  =
    (match d with
        | FIX_TradingProtocol_DM -> "DM"
        | FIX_TradingProtocol_EU_Price -> "EU_Price"
        | FIX_TradingProtocol_LMPrice -> "LMPrice"
        | FIX_TradingProtocol_Price -> "Price"
        | FIX_TradingProtocol_Spread -> "Spread"
        | FIX_TradingProtocol_USDPrice -> "USDPrice"
        | FIX_TradingProtocol_Yield -> "Yield"
        | FIX_TradingProtocol_PFDS_Price -> "PFDS_Price"
    )
;;

let mktxpricingprocess_to_string (d)  =
    (match d with
        | FIX_MKTXPricingProcess_Manual -> "Manual"
        | FIX_MKTXPricingProcess_Phone_Spot -> "Phone_Spot"
        | FIX_MKTXPricingProcess_Auto -> "Auto"
        | FIX_MKTXPricingProcess_OneStep -> "OneStep"
        | FIX_MKTXPricingProcess_Standard -> "Standard"
        | FIX_MKTXPricingProcess_Delayed_Spot -> "Delayed_Spot"
    )
;;

let mktxrtspurpose_to_string (d)  =
    (match d with
        | FIX_MKTXRTSPurpose_FundCrossing -> "FundCrossing"
    )
;;

let pricetype_to_string (d)  =
    (match d with
        | FIX_PriceType_Percentage -> "Percentage"
        | FIX_PriceType_Spread -> "Spread"
        | FIX_PriceType_Yield -> "Yield"
        | FIX_PriceType_NEGATIVE_YIELD -> "NEGATIVE_YIELD"
        | FIX_PriceType_DECIMAL_UNIT_PRICE -> "DECIMAL_UNIT_PRICE"
    )
;;

let legswaptype_to_string (d)  =
    (match d with
        | FIX_LegSwapType_Par_for_Par -> "Par_for_Par"
        | FIX_LegSwapType_Modified_Duration -> "Modified_Duration"
    )
;;

let mktxlisttype_to_string (d)  =
    (match d with
        | FIX_MKTXListType_Portfolio -> "Portfolio"
    )
;;

let ordstatus_to_string (d)  =
    (match d with
        | FIX_OrdStatus_New_ -> "New_"
        | FIX_OrdStatus_Partially_filled -> "Partially_filled"
        | FIX_OrdStatus_Filled_ -> "Filled_"
        | FIX_OrdStatus_Cancelled -> "Cancelled"
        | FIX_OrdStatus_Rejected -> "Rejected"
        | FIX_OrdStatus_Pending_New -> "Pending_New"
        | FIX_OrdStatus_Accepted_for_bidding -> "Accepted_for_bidding"
    )
;;

let cxlrejresponseto_to_string (d)  =
    (match d with
        | FIX_CxlRejResponseTo_Order_Cancel_Request_ -> "Order_Cancel_Request_"
    )
;;

let cxlrejreason_to_string (d)  =
    (match d with
        | FIX_CxlRejReason_All_cases_where_it_is_too_late_to_cancel -> "All_cases_where_it_is_too_late_to_cancel"
        | FIX_CxlRejReason_Unknown_Order -> "Unknown_Order"
    )
;;

let businessrejectreason_to_string (d)  =
    (match d with
        | FIX_BusinessRejectReason_Other -> "Other"
        | FIX_BusinessRejectReason_Unknown -> "Unknown"
        | FIX_BusinessRejectReason_Unknown_Security -> "Unknown_Security"
        | FIX_BusinessRejectReason_Unsupported_Message -> "Unsupported_Message"
        | FIX_BusinessRejectReason_Application_Not_Available -> "Application_Not_Available"
        | FIX_BusinessRejectReason_Conditionally_required_field_missing -> "Conditionally_required_field_missing"
    )
;;

let alloctranstype_to_string (d)  =
    (match d with
        | FIX_AllocTransType_New -> "New"
        | FIX_AllocTransType_Replace -> "Replace"
        | FIX_AllocTransType_Cancel -> "Cancel"
        | FIX_AllocTransType_Preliminary -> "Preliminary"
        | FIX_AllocTransType_Calculated -> "Calculated"
    )
;;

let alloccancreplacereason_to_string (d)  =
    (match d with
        | FIX_AllocCancReplaceReason_Other -> "Other"
        | FIX_AllocCancReplaceReason_Original_details_incomplete___incorrect -> "Original_details_incomplete___incorrect"
    )
;;

let allocreporttype_to_string (d)  =
    (match d with
        | FIX_AllocReportType_Sellside_calculated_using_preliminary -> "Sellside_calculated_using_preliminary"
        | FIX_AllocReportType_Sellside_calculated_without_preliminary -> "Sellside_calculated_without_preliminary"
    )
;;

let allocstatus_to_string (d)  =
    (match d with
        | FIX_AllocStatus_Accepted -> "Accepted"
        | FIX_AllocStatus_received__not_yet_processed_ -> "received__not_yet_processed_"
        | FIX_AllocStatus_block_level_reject -> "block_level_reject"
    )
;;

let allocnoorderstype_to_string (d)  =
    (match d with
        | FIX_AllocNoOrdersType_Not_specified -> "Not_specified"
        | FIX_AllocNoOrdersType_Explicit_list_provided -> "Explicit_list_provided"
    )
;;

let yieldtype_to_string (d)  =
    (match d with
        | FIX_YieldType_CALL -> "CALL"
        | FIX_YieldType_MATURITY -> "MATURITY"
        | FIX_YieldType_PUT -> "PUT"
    )
;;

let allocrejcode_to_string (d)  =
    (match d with
        | FIX_AllocRejCode_Unknown_account_s_ -> "Unknown_account_s_"
        | FIX_AllocRejCode_Incorrect_quantity -> "Incorrect_quantity"
        | FIX_AllocRejCode_Unknown_executing_broker__dealer_ -> "Unknown_executing_broker__dealer_"
        | FIX_AllocRejCode_unknown_OrderID -> "unknown_OrderID"
        | FIX_AllocRejCode_Unknown_ListID -> "Unknown_ListID"
        | FIX_AllocRejCode_Other -> "Other"
        | FIX_AllocRejCode_Incorrect_allocated_quantity -> "Incorrect_allocated_quantity"
        | FIX_AllocRejCode_calculation_difference -> "calculation_difference"
        | FIX_AllocRejCode_unknown_or_stale_ExecID -> "unknown_or_stale_ExecID"
        | FIX_AllocRejCode_mismatched_data_value -> "mismatched_data_value"
        | FIX_AllocRejCode_Unknown_ClOrdID -> "Unknown_ClOrdID"
    )
;;

let alloctype_to_string (d)  =
    (match d with
        | FIX_AllocType_Buyside_preliminary -> "Buyside_preliminary"
    )
;;

let sessionrejectreason_to_string (d)  =
    (match d with
        | FIX_SessionRejectReason_Invalid_Tag_number -> "Invalid_Tag_number"
        | FIX_SessionRejectReason_Required_Tag_missing -> "Required_Tag_missing"
        | FIX_SessionRejectReason_Tag_not_defined_for_this_message_type -> "Tag_not_defined_for_this_message_type"
        | FIX_SessionRejectReason_Undefined_Tag -> "Undefined_Tag"
        | FIX_SessionRejectReason_Tag_specified_without_a_value -> "Tag_specified_without_a_value"
        | FIX_SessionRejectReason_Value_is_incorrect__out_of_range__for_this_Tag -> "Value_is_incorrect__out_of_range__for_this_Tag"
        | FIX_SessionRejectReason_Incorrect_data_format_for_value -> "Incorrect_data_format_for_value"
        | FIX_SessionRejectReason_Decryption_problem -> "Decryption_problem"
        | FIX_SessionRejectReason_Signature_problem -> "Signature_problem"
        | FIX_SessionRejectReason_CompID_problem -> "CompID_problem"
        | FIX_SessionRejectReason_SendingTime_accuracy_problem -> "SendingTime_accuracy_problem"
        | FIX_SessionRejectReason_Invalid_MsgType -> "Invalid_MsgType"
        | FIX_SessionRejectReason_XML_Validation_error -> "XML_Validation_error"
        | FIX_SessionRejectReason_Tag_appears_more_than_once -> "Tag_appears_more_than_once"
        | FIX_SessionRejectReason_Tag_specified_out_of_required_order -> "Tag_specified_out_of_required_order"
        | FIX_SessionRejectReason_Repeating_group_fields_out_of_order -> "Repeating_group_fields_out_of_order"
        | FIX_SessionRejectReason_Incorrect_NumInGroup_count_for_repeating_group -> "Incorrect_NumInGroup_count_for_repeating_group"
        | FIX_SessionRejectReason_Non_data_value_includes_field_delimiter__SOH_character_ -> "Non_data_value_includes_field_delimiter__SOH_character_"
        | FIX_SessionRejectReason_Other -> "Other"
    )
;;

let gapfillflag_to_string (d)  =
    (match d with
        | FIX_GapFillFlag_Sequence_Reset -> "Sequence_Reset"
        | FIX_GapFillFlag_Gap_Fill_Messages -> "Gap_Fill_Messages"
    )
;;

let mktxtrdregpublicationreason_to_string (d)  =
    (match d with
        | FIX_MKTXTrdRegPublicationReason_LRGS -> "LRGS"
        | FIX_MKTXTrdRegPublicationReason_ILQD -> "ILQD"
        | FIX_MKTXTrdRegPublicationReason_SIZE -> "SIZE"
    )
;;

let trdregpublicationtype_to_string (d)  =
    (match d with
        | FIX_TrdRegPublicationType_Pretrade_Transparency_Waiver -> "Pretrade_Transparency_Waiver"
        | FIX_TrdRegPublicationType_Exempt_From_Publication -> "Exempt_From_Publication"
    )
;;

let trdregpublicationreason_to_string (d)  =
    (match d with
        | FIX_TrdRegPublicationReason_NLIQ -> "NLIQ"
        | FIX_TrdRegPublicationReason_OLIQ -> "OLIQ"
        | FIX_TrdRegPublicationReason_PRIC -> "PRIC"
        | FIX_TrdRegPublicationReason_RFPT -> "RFPT"
        | FIX_TrdRegPublicationReason_ILQD -> "ILQD"
        | FIX_TrdRegPublicationReason_SIZE -> "SIZE"
        | FIX_TrdRegPublicationReason_LRGS -> "LRGS"
        | FIX_TrdRegPublicationReason_ILQD_2 -> "ILQD_2"
        | FIX_TrdRegPublicationReason_SIZE_2 -> "SIZE_2"
    )
;;

let mktxescbstblty_to_string (d)  =
    (match d with
        | FIX_MKTXESCBStblty_Investment_Operations -> "Investment_Operations"
        | FIX_MKTXESCBStblty_Stability_Operations -> "Stability_Operations"
    )
;;

let pretradewaiver_to_string (d)  =
    (match d with
        | FIX_PreTradeWaiver_LRGS -> "LRGS"
        | FIX_PreTradeWaiver_ILQD -> "ILQD"
        | FIX_PreTradeWaiver_SIZE -> "SIZE"
    )
;;

let mktxtradereportingind_to_string (d)  =
    (match d with
        | FIX_MKTXTradeReportingInd_Trade_not_yet_reported -> "Trade_not_yet_reported"
        | FIX_MKTXTradeReportingInd_Trade_reported_on_book -> "Trade_reported_on_book"
        | FIX_MKTXTradeReportingInd_Trade_reported_as_systematic_internaliser -> "Trade_reported_as_systematic_internaliser"
        | FIX_MKTXTradeReportingInd_Trade_reported_as_nonsystematic_internaliser -> "Trade_reported_as_nonsystematic_internaliser"
        | FIX_MKTXTradeReportingInd_Trade_reported_under_sub_delegation_arrangement -> "Trade_reported_under_sub_delegation_arrangement"
    )
;;

let tradereportingindicator_to_string (d)  =
    (match d with
        | FIX_TradeReportingIndicator_Trade_has_not_been_reported -> "Trade_has_not_been_reported"
        | FIX_TradeReportingIndicator_Trade_has_been_reported_by_a_trading_venue_as_an_On_book_trade -> "Trade_has_been_reported_by_a_trading_venue_as_an_On_book_trade"
        | FIX_TradeReportingIndicator_Trade_has_been_reported_as_a_systematic_internaliser_seller_trade -> "Trade_has_been_reported_as_a_systematic_internaliser_seller_trade"
        | FIX_TradeReportingIndicator_Trade_has_been_reported_as_a_systematic_internaliser_buyer_trade -> "Trade_has_been_reported_as_a_systematic_internaliser_buyer_trade"
        | FIX_TradeReportingIndicator_Trade_has_been_reported_as_a_nonsystematic_internaliser_seller_trade -> "Trade_has_been_reported_as_a_nonsystematic_internaliser_seller_trade"
    )
;;

let internalcrossingflag_to_string (d)  =
    (match d with
        | FIX_InternalCrossingFlag_FundCrossing -> "FundCrossing"
    )
;;

let regulatorytradeidtype_to_string (d)  =
    (match d with
        | FIX_RegulatoryTradeIDType_Trading_venue_transaction_identifier -> "Trading_venue_transaction_identifier"
    )
;;

let exectype_to_string (d)  =
    (match d with
        | FIX_ExecType_New -> "New"
        | FIX_ExecType_Cancelled -> "Cancelled"
        | FIX_ExecType_Rejected -> "Rejected"
        | FIX_ExecType_Trade__partial_fill_or_fill_ -> "Trade__partial_fill_or_fill_"
        | FIX_ExecType_Trade_Correct -> "Trade_Correct"
        | FIX_ExecType_Trade_Cancel -> "Trade_Cancel"
    )
;;

let ordrejreason_to_string (d)  =
    (match d with
        | FIX_OrdRejReason_Unknown_symbol -> "Unknown_symbol"
        | FIX_OrdRejReason_Duplicate_order -> "Duplicate_order"
        | FIX_OrdRejReason_Unsupported_order_characteristic -> "Unsupported_order_characteristic"
        | FIX_OrdRejReason_Incorrect_quantity -> "Incorrect_quantity"
        | FIX_OrdRejReason_Other -> "Other"
    )
;;

let competitivestatus_to_string (d)  =
    (match d with
        | FIX_CompetitiveStatus_Client_Passed -> "Client_Passed"
        | FIX_CompetitiveStatus_second_best -> "second_best"
        | FIX_CompetitiveStatus_Did_not_trade -> "Did_not_trade"
        | FIX_CompetitiveStatus_Traded___Amended -> "Traded___Amended"
        | FIX_CompetitiveStatus_Done_Awaiting_Book_Confirmation -> "Done_Awaiting_Book_Confirmation"
        | FIX_CompetitiveStatus_Done_Awaiting_Spot_Confirmation -> "Done_Awaiting_Spot_Confirmation"
        | FIX_CompetitiveStatus_Dealer_did_not_respond_to_enquiry_before_client_traded -> "Dealer_did_not_respond_to_enquiry_before_client_traded"
        | FIX_CompetitiveStatus_price_expired -> "price_expired"
        | FIX_CompetitiveStatus_third_best__or_worse -> "third_best__or_worse"
        | FIX_CompetitiveStatus_Dealer_passed -> "Dealer_passed"
        | FIX_CompetitiveStatus_For_Covered_or_Best -> "For_Covered_or_Best"
        | FIX_CompetitiveStatus_Tied_for_Cover -> "Tied_for_Cover"
        | FIX_CompetitiveStatus_No_response_from_dealer -> "No_response_from_dealer"
        | FIX_CompetitiveStatus_Timed_Out__R_ -> "Timed_Out__R_"
        | FIX_CompetitiveStatus_Traded -> "Traded"
    )
;;

let mktxanalysisto_to_string (d)  =
    (match d with
        | FIX_MKTXAnalysisTo_Avg -> "Avg"
        | FIX_MKTXAnalysisTo_BondTicker -> "BondTicker"
        | FIX_MKTXAnalysisTo_CompositeClose -> "CompositeClose"
        | FIX_MKTXAnalysisTo_CompositeMid -> "CompositeMid"
        | FIX_MKTXAnalysisTo_Cover -> "Cover"
        | FIX_MKTXAnalysisTo_Internal_Target -> "Internal_Target"
    )
;;

let lastcapacity_to_string (d)  =
    (match d with
        | FIX_LastCapacity_Agent -> "Agent"
        | FIX_LastCapacity_Cross_as_Agent -> "Cross_as_Agent"
        | FIX_LastCapacity_Cross_as_Principal -> "Cross_as_Principal"
        | FIX_LastCapacity_Principal -> "Principal"
        | FIX_LastCapacity_Matched_Principal -> "Matched_Principal"
    )
;;

let mktxtradestyle_to_string (d)  =
    (match d with
        | FIX_MKTXTradeStyle_Portfolio -> "Portfolio"
    )
;;

let mktxautoextype_to_string (d)  =
    (match d with
        | FIX_MKTXAutoExType_If_the_inquiry_is_submitted_for_auto_ex_via_auto_submit_ -> "If_the_inquiry_is_submitted_for_auto_ex_via_auto_submit_"
        | FIX_MKTXAutoExType_If_the_inquiry_is_submitted_for_auto_ex_from_manual_workstation -> "If_the_inquiry_is_submitted_for_auto_ex_from_manual_workstation"
    )
;;

let mktxautoexstatus_to_string (d)  =
    (match d with
        | FIX_MKTXAutoExStatus_If_the_inquiry_was_auto_executed_ -> "If_the_inquiry_was_auto_executed_"
        | FIX_MKTXAutoExStatus_If_the_inquiry_did_not_execute_either_manually_or_through_auto_ex_process_ -> "If_the_inquiry_did_not_execute_either_manually_or_through_auto_ex_process_"
        | FIX_MKTXAutoExStatus_If_the_inquiry_fail_to_auto_execute_but_was_later_executed_manually_ -> "If_the_inquiry_fail_to_auto_execute_but_was_later_executed_manually_"
    )
;;

let mktxautoexrefleveltype_to_string (d)  =
    (match d with
        | FIX_MKTXAutoExRefLevelType_Level_was_provided_on_the_RTS_message_or_manually_entered_in_the_Limit_column_on_the_Workstation_ -> "Level_was_provided_on_the_RTS_message_or_manually_entered_in_the_Limit_column_on_the_Workstation_"
        | FIX_MKTXAutoExRefLevelType_Composite_Plus_value_is_being_used_as_Execution_reference_ -> "Composite_Plus_value_is_being_used_as_Execution_reference_"
        | FIX_MKTXAutoExRefLevelType_Level_was_manually_entered_in_the_Execution_Reference_column_on_the_Workstation_ -> "Level_was_manually_entered_in_the_Execution_Reference_column_on_the_Workstation_"
    )
;;

let dkreason_to_string (d)  =
    (match d with
        | FIX_DKReason_unknown_symbol__unknown_security_ -> "unknown_symbol__unknown_security_"
        | FIX_DKReason_wrong_side -> "wrong_side"
        | FIX_DKReason_quantity_exceeds_order -> "quantity_exceeds_order"
        | FIX_DKReason_no_matching_order -> "no_matching_order"
        | FIX_DKReason_Price_exceeds_limit -> "Price_exceeds_limit"
        | FIX_DKReason_calculation_difference -> "calculation_difference"
        | FIX_DKReason_other -> "other"
    )
;;

let side_to_string (d)  =
    (match d with
        | FIX_Side_Buy -> "Buy"
        | FIX_Side_Sell -> "Sell"
        | FIX_Side_As_Defined__for_multi_legs_ -> "As_Defined__for_multi_legs_"
        | FIX_Side_Sell_Undisclosed -> "Sell_Undisclosed"
    )
;;

let week_to_string (d)  =
    (match d with
        | FIX_week_noweek -> "noweek"
        | FIX_week_w1 -> "w1"
        | FIX_week_w2 -> "w2"
        | FIX_week_w3 -> "w3"
        | FIX_week_w4 -> "w4"
        | FIX_week_w5 -> "w5"
    )
;;

let partyidsource_to_json (d)  : json =
    `String (partyidsource_to_string d)
;;

let partyrole_to_json (d)  : json =
    `String (partyrole_to_string d)
;;

let algorithm_to_json (d)  : json =
    `String (algorithm_to_string d)
;;

let partysubidtype_to_json (d)  : json =
    `String (partysubidtype_to_string d)
;;

let securityidsource_to_json (d)  : json =
    `String (securityidsource_to_string d)
;;

let product_to_json (d)  : json =
    `String (product_to_string d)
;;

let securityaltidsource_to_json (d)  : json =
    `String (securityaltidsource_to_string d)
;;

let benchmarkcurvename_to_json (d)  : json =
    `String (benchmarkcurvename_to_string d)
;;

let benchmarkpricetype_to_json (d)  : json =
    `String (benchmarkpricetype_to_string d)
;;

let benchmarksecurityidsource_to_json (d)  : json =
    `String (benchmarksecurityidsource_to_string d)
;;

let legsecurityidsource_to_json (d)  : json =
    `String (legsecurityidsource_to_string d)
;;

let legproduct_to_json (d)  : json =
    `String (legproduct_to_string d)
;;

let legside_to_json (d)  : json =
    `String (legside_to_string d)
;;

let handlinst_to_json (d)  : json =
    `String (handlinst_to_string d)
;;

let execinst_to_json (d)  : json =
    `String (execinst_to_string d)
;;

let settltype_to_json (d)  : json =
    `String (settltype_to_string d)
;;

let ordercapacity_to_json (d)  : json =
    `String (ordercapacity_to_string d)
;;

let qtytype_to_json (d)  : json =
    `String (qtytype_to_string d)
;;

let forexreq_to_json (d)  : json =
    `String (forexreq_to_string d)
;;

let includedealers_to_json (d)  : json =
    `String (includedealers_to_string d)
;;

let dealeridsource_to_json (d)  : json =
    `String (dealeridsource_to_string d)
;;

let exclude_to_json (d)  : json =
    `String (exclude_to_string d)
;;

let tradingprotocol_to_json (d)  : json =
    `String (tradingprotocol_to_string d)
;;

let mktxpricingprocess_to_json (d)  : json =
    `String (mktxpricingprocess_to_string d)
;;

let mktxrtspurpose_to_json (d)  : json =
    `String (mktxrtspurpose_to_string d)
;;

let pricetype_to_json (d)  : json =
    `String (pricetype_to_string d)
;;

let legswaptype_to_json (d)  : json =
    `String (legswaptype_to_string d)
;;

let mktxlisttype_to_json (d)  : json =
    `String (mktxlisttype_to_string d)
;;

let ordstatus_to_json (d)  : json =
    `String (ordstatus_to_string d)
;;

let cxlrejresponseto_to_json (d)  : json =
    `String (cxlrejresponseto_to_string d)
;;

let cxlrejreason_to_json (d)  : json =
    `String (cxlrejreason_to_string d)
;;

let businessrejectreason_to_json (d)  : json =
    `String (businessrejectreason_to_string d)
;;

let alloctranstype_to_json (d)  : json =
    `String (alloctranstype_to_string d)
;;

let alloccancreplacereason_to_json (d)  : json =
    `String (alloccancreplacereason_to_string d)
;;

let allocreporttype_to_json (d)  : json =
    `String (allocreporttype_to_string d)
;;

let allocstatus_to_json (d)  : json =
    `String (allocstatus_to_string d)
;;

let allocnoorderstype_to_json (d)  : json =
    `String (allocnoorderstype_to_string d)
;;

let yieldtype_to_json (d)  : json =
    `String (yieldtype_to_string d)
;;

let allocrejcode_to_json (d)  : json =
    `String (allocrejcode_to_string d)
;;

let alloctype_to_json (d)  : json =
    `String (alloctype_to_string d)
;;

let sessionrejectreason_to_json (d)  : json =
    `String (sessionrejectreason_to_string d)
;;

let gapfillflag_to_json (d)  : json =
    `String (gapfillflag_to_string d)
;;

let mktxtrdregpublicationreason_to_json (d)  : json =
    `String (mktxtrdregpublicationreason_to_string d)
;;

let trdregpublicationtype_to_json (d)  : json =
    `String (trdregpublicationtype_to_string d)
;;

let trdregpublicationreason_to_json (d)  : json =
    `String (trdregpublicationreason_to_string d)
;;

let mktxescbstblty_to_json (d)  : json =
    `String (mktxescbstblty_to_string d)
;;

let pretradewaiver_to_json (d)  : json =
    `String (pretradewaiver_to_string d)
;;

let mktxtradereportingind_to_json (d)  : json =
    `String (mktxtradereportingind_to_string d)
;;

let tradereportingindicator_to_json (d)  : json =
    `String (tradereportingindicator_to_string d)
;;

let internalcrossingflag_to_json (d)  : json =
    `String (internalcrossingflag_to_string d)
;;

let regulatorytradeidtype_to_json (d)  : json =
    `String (regulatorytradeidtype_to_string d)
;;

let exectype_to_json (d)  : json =
    `String (exectype_to_string d)
;;

let ordrejreason_to_json (d)  : json =
    `String (ordrejreason_to_string d)
;;

let competitivestatus_to_json (d)  : json =
    `String (competitivestatus_to_string d)
;;

let mktxanalysisto_to_json (d)  : json =
    `String (mktxanalysisto_to_string d)
;;

let lastcapacity_to_json (d)  : json =
    `String (lastcapacity_to_string d)
;;

let mktxtradestyle_to_json (d)  : json =
    `String (mktxtradestyle_to_string d)
;;

let mktxautoextype_to_json (d)  : json =
    `String (mktxautoextype_to_string d)
;;

let mktxautoexstatus_to_json (d)  : json =
    `String (mktxautoexstatus_to_string d)
;;

let mktxautoexrefleveltype_to_json (d)  : json =
    `String (mktxautoexrefleveltype_to_string d)
;;

let dkreason_to_json (d)  : json =
    `String (dkreason_to_string d)
;;

let side_to_json (d)  : json =
    `String (side_to_string d)
;;

let week_to_json (d)  : json =
    `String (week_to_string d)
;;

let partyidsource_opt_to_json (d)  : json =
    (match d with
        | None -> (`Null)
        | Some d -> (partyidsource_to_json d)
    )
;;

let partyrole_opt_to_json (d)  : json =
    (match d with
        | None -> (`Null)
        | Some d -> (partyrole_to_json d)
    )
;;

let algorithm_opt_to_json (d)  : json =
    (match d with
        | None -> (`Null)
        | Some d -> (algorithm_to_json d)
    )
;;

let partysubidtype_opt_to_json (d)  : json =
    (match d with
        | None -> (`Null)
        | Some d -> (partysubidtype_to_json d)
    )
;;

let securityidsource_opt_to_json (d)  : json =
    (match d with
        | None -> (`Null)
        | Some d -> (securityidsource_to_json d)
    )
;;

let product_opt_to_json (d)  : json =
    (match d with
        | None -> (`Null)
        | Some d -> (product_to_json d)
    )
;;

let securityaltidsource_opt_to_json (d)  : json =
    (match d with
        | None -> (`Null)
        | Some d -> (securityaltidsource_to_json d)
    )
;;

let benchmarkcurvename_opt_to_json (d)  : json =
    (match d with
        | None -> (`Null)
        | Some d -> (benchmarkcurvename_to_json d)
    )
;;

let benchmarkpricetype_opt_to_json (d)  : json =
    (match d with
        | None -> (`Null)
        | Some d -> (benchmarkpricetype_to_json d)
    )
;;

let benchmarksecurityidsource_opt_to_json (d)  : json =
    (match d with
        | None -> (`Null)
        | Some d -> (benchmarksecurityidsource_to_json d)
    )
;;

let legsecurityidsource_opt_to_json (d)  : json =
    (match d with
        | None -> (`Null)
        | Some d -> (legsecurityidsource_to_json d)
    )
;;

let legproduct_opt_to_json (d)  : json =
    (match d with
        | None -> (`Null)
        | Some d -> (legproduct_to_json d)
    )
;;

let legside_opt_to_json (d)  : json =
    (match d with
        | None -> (`Null)
        | Some d -> (legside_to_json d)
    )
;;

let handlinst_opt_to_json (d)  : json =
    (match d with
        | None -> (`Null)
        | Some d -> (handlinst_to_json d)
    )
;;

let execinst_opt_to_json (d)  : json =
    (match d with
        | None -> (`Null)
        | Some d -> (execinst_to_json d)
    )
;;

let settltype_opt_to_json (d)  : json =
    (match d with
        | None -> (`Null)
        | Some d -> (settltype_to_json d)
    )
;;

let ordercapacity_opt_to_json (d)  : json =
    (match d with
        | None -> (`Null)
        | Some d -> (ordercapacity_to_json d)
    )
;;

let qtytype_opt_to_json (d)  : json =
    (match d with
        | None -> (`Null)
        | Some d -> (qtytype_to_json d)
    )
;;

let forexreq_opt_to_json (d)  : json =
    (match d with
        | None -> (`Null)
        | Some d -> (forexreq_to_json d)
    )
;;

let includedealers_opt_to_json (d)  : json =
    (match d with
        | None -> (`Null)
        | Some d -> (includedealers_to_json d)
    )
;;

let dealeridsource_opt_to_json (d)  : json =
    (match d with
        | None -> (`Null)
        | Some d -> (dealeridsource_to_json d)
    )
;;

let exclude_opt_to_json (d)  : json =
    (match d with
        | None -> (`Null)
        | Some d -> (exclude_to_json d)
    )
;;

let tradingprotocol_opt_to_json (d)  : json =
    (match d with
        | None -> (`Null)
        | Some d -> (tradingprotocol_to_json d)
    )
;;

let mktxpricingprocess_opt_to_json (d)  : json =
    (match d with
        | None -> (`Null)
        | Some d -> (mktxpricingprocess_to_json d)
    )
;;

let mktxrtspurpose_opt_to_json (d)  : json =
    (match d with
        | None -> (`Null)
        | Some d -> (mktxrtspurpose_to_json d)
    )
;;

let pricetype_opt_to_json (d)  : json =
    (match d with
        | None -> (`Null)
        | Some d -> (pricetype_to_json d)
    )
;;

let legswaptype_opt_to_json (d)  : json =
    (match d with
        | None -> (`Null)
        | Some d -> (legswaptype_to_json d)
    )
;;

let mktxlisttype_opt_to_json (d)  : json =
    (match d with
        | None -> (`Null)
        | Some d -> (mktxlisttype_to_json d)
    )
;;

let ordstatus_opt_to_json (d)  : json =
    (match d with
        | None -> (`Null)
        | Some d -> (ordstatus_to_json d)
    )
;;

let cxlrejresponseto_opt_to_json (d)  : json =
    (match d with
        | None -> (`Null)
        | Some d -> (cxlrejresponseto_to_json d)
    )
;;

let cxlrejreason_opt_to_json (d)  : json =
    (match d with
        | None -> (`Null)
        | Some d -> (cxlrejreason_to_json d)
    )
;;

let businessrejectreason_opt_to_json (d)  : json =
    (match d with
        | None -> (`Null)
        | Some d -> (businessrejectreason_to_json d)
    )
;;

let alloctranstype_opt_to_json (d)  : json =
    (match d with
        | None -> (`Null)
        | Some d -> (alloctranstype_to_json d)
    )
;;

let alloccancreplacereason_opt_to_json (d)  : json =
    (match d with
        | None -> (`Null)
        | Some d -> (alloccancreplacereason_to_json d)
    )
;;

let allocreporttype_opt_to_json (d)  : json =
    (match d with
        | None -> (`Null)
        | Some d -> (allocreporttype_to_json d)
    )
;;

let allocstatus_opt_to_json (d)  : json =
    (match d with
        | None -> (`Null)
        | Some d -> (allocstatus_to_json d)
    )
;;

let allocnoorderstype_opt_to_json (d)  : json =
    (match d with
        | None -> (`Null)
        | Some d -> (allocnoorderstype_to_json d)
    )
;;

let yieldtype_opt_to_json (d)  : json =
    (match d with
        | None -> (`Null)
        | Some d -> (yieldtype_to_json d)
    )
;;

let allocrejcode_opt_to_json (d)  : json =
    (match d with
        | None -> (`Null)
        | Some d -> (allocrejcode_to_json d)
    )
;;

let alloctype_opt_to_json (d)  : json =
    (match d with
        | None -> (`Null)
        | Some d -> (alloctype_to_json d)
    )
;;

let sessionrejectreason_opt_to_json (d)  : json =
    (match d with
        | None -> (`Null)
        | Some d -> (sessionrejectreason_to_json d)
    )
;;

let gapfillflag_opt_to_json (d)  : json =
    (match d with
        | None -> (`Null)
        | Some d -> (gapfillflag_to_json d)
    )
;;

let mktxtrdregpublicationreason_opt_to_json (d)  : json =
    (match d with
        | None -> (`Null)
        | Some d -> (mktxtrdregpublicationreason_to_json d)
    )
;;

let trdregpublicationtype_opt_to_json (d)  : json =
    (match d with
        | None -> (`Null)
        | Some d -> (trdregpublicationtype_to_json d)
    )
;;

let trdregpublicationreason_opt_to_json (d)  : json =
    (match d with
        | None -> (`Null)
        | Some d -> (trdregpublicationreason_to_json d)
    )
;;

let mktxescbstblty_opt_to_json (d)  : json =
    (match d with
        | None -> (`Null)
        | Some d -> (mktxescbstblty_to_json d)
    )
;;

let pretradewaiver_opt_to_json (d)  : json =
    (match d with
        | None -> (`Null)
        | Some d -> (pretradewaiver_to_json d)
    )
;;

let mktxtradereportingind_opt_to_json (d)  : json =
    (match d with
        | None -> (`Null)
        | Some d -> (mktxtradereportingind_to_json d)
    )
;;

let tradereportingindicator_opt_to_json (d)  : json =
    (match d with
        | None -> (`Null)
        | Some d -> (tradereportingindicator_to_json d)
    )
;;

let internalcrossingflag_opt_to_json (d)  : json =
    (match d with
        | None -> (`Null)
        | Some d -> (internalcrossingflag_to_json d)
    )
;;

let regulatorytradeidtype_opt_to_json (d)  : json =
    (match d with
        | None -> (`Null)
        | Some d -> (regulatorytradeidtype_to_json d)
    )
;;

let exectype_opt_to_json (d)  : json =
    (match d with
        | None -> (`Null)
        | Some d -> (exectype_to_json d)
    )
;;

let ordrejreason_opt_to_json (d)  : json =
    (match d with
        | None -> (`Null)
        | Some d -> (ordrejreason_to_json d)
    )
;;

let competitivestatus_opt_to_json (d)  : json =
    (match d with
        | None -> (`Null)
        | Some d -> (competitivestatus_to_json d)
    )
;;

let mktxanalysisto_opt_to_json (d)  : json =
    (match d with
        | None -> (`Null)
        | Some d -> (mktxanalysisto_to_json d)
    )
;;

let lastcapacity_opt_to_json (d)  : json =
    (match d with
        | None -> (`Null)
        | Some d -> (lastcapacity_to_json d)
    )
;;

let mktxtradestyle_opt_to_json (d)  : json =
    (match d with
        | None -> (`Null)
        | Some d -> (mktxtradestyle_to_json d)
    )
;;

let mktxautoextype_opt_to_json (d)  : json =
    (match d with
        | None -> (`Null)
        | Some d -> (mktxautoextype_to_json d)
    )
;;

let mktxautoexstatus_opt_to_json (d)  : json =
    (match d with
        | None -> (`Null)
        | Some d -> (mktxautoexstatus_to_json d)
    )
;;

let mktxautoexrefleveltype_opt_to_json (d)  : json =
    (match d with
        | None -> (`Null)
        | Some d -> (mktxautoexrefleveltype_to_json d)
    )
;;

let dkreason_opt_to_json (d)  : json =
    (match d with
        | None -> (`Null)
        | Some d -> (dkreason_to_json d)
    )
;;

let side_opt_to_json (d)  : json =
    (match d with
        | None -> (`Null)
        | Some d -> (side_to_json d)
    )
;;

let week_opt_to_json (d)  : json =
    (match d with
        | None -> (`Null)
        | Some d -> (week_to_json d)
    )
;;
