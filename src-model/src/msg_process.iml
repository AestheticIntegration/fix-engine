(* Imandra Inc. copyright 2021 *)
[@@@import "../src-types/model_messages.iml"]
open Model_messages;;
[@@@import "msg_check_fields.iml"]
open Msg_check_fields;;
[@@@import "msg_check_types.iml"]
open Msg_check_types;;
[@@@import "msg_check_validate.iml"]
open Msg_check_validate;;
[@@@import "msg_receive.iml"]
open Msg_receive;;
[@@@import "msg_reject.iml"]
open Msg_reject;;
[@@@import "../src-types/state.iml"]
open State;;


let inner_convert_NewOrderSingle (m_state : model_state) (msg_data : mod_newordersingle_defopt_data)  : mod_newordersingle_data =
    let c_mod_f_NewOrderSingle_Price = msg_data.mod_def_opt_f_NewOrderSingle_Price
    in
    {
        mod_f_NewOrderSingle_Price = c_mod_f_NewOrderSingle_Price
    }
    [@@macro]
;;

let convert_inner (m_state : model_state) (msg : model_msg_opt_def)  : model_msg =
    (match msg with
        | FIX_Msg_Def_Opt_NewOrderSingle msg_data -> (FIX_Msg_NewOrderSingle (inner_convert_NewOrderSingle m_state msg_data))
    )
    [@@macro]
;;

let process_NewOrderSingle (m_state : model_state) (msg_data : mod_newordersingle_data)  =
    let field_check = check_fields_NewOrderSingle msg_data m_state
    in
    (if field_check.field_invalid_defrej then
        { (reject_NewOrderSingle_invalidfield m_state msg_data field_check.field_reject_info_defrej) with
            event_info = {
                state_event_counter = m_state.event_counter;
                state_event_reject_text = Some field_check.field_reject_info_defrej.mod_builtin_rejectInfo_text
            } :: m_state.event_info
        }
    else
        let custom_reject = check_validate_NewOrderSingle msg_data m_state
        in
        (if custom_reject.validate_invalid_defrej then
            { (reject_NewOrderSingle_invalid m_state msg_data custom_reject.validate_reject_info_defrej) with
                event_info = {
                    state_event_counter = m_state.event_counter;
                    state_event_reject_text = Some custom_reject.validate_reject_info_defrej.mod_builtin_rejectInfo_text
                } :: m_state.event_info
            }
        else
            (receive_message_NewOrderSingle m_state msg_data))
        )
;;

let process_msg (m_state : model_state) (msg : model_top_level_msg)  =
    (match msg with
        | FIX_TL_Req_Field_Missing d -> (reject_field_missing m_state d)
        | FIX_TL_Req_Field_Invalid d -> (reject_field_enum_invalid m_state d)
        | FIX_TL_Normal d -> ((match d with
            | FIX_Msg_Def_Opt_NewOrderSingle m_data -> let m_data = inner_convert_NewOrderSingle m_state m_data
            in
            process_NewOrderSingle m_state m_data
            | _ -> m_state
        )
        )
        | FIX_TL_PossibleResend _ -> m_state
        | FIX_TL_None -> m_state
    )
;;

let msg_NewOrderSingle_valid (msg_data : mod_newordersingle_data) (m_state : model_state)  =
    let fields_result = check_fields_NewOrderSingle msg_data m_state
    in
    let validate_result = check_validate_NewOrderSingle msg_data m_state
    in
    (&&) (not fields_result.field_invalid_defrej) (not validate_result.validate_invalid_defrej)
    [@@macro]
;;

let is_message_valid (msg : model_msg) (m_state : model_state)  =
    (match msg with
        | FIX_Msg_NewOrderSingle d -> (msg_NewOrderSingle_valid d m_state)
        | _ -> true
    )
;;

