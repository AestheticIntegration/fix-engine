(* Imandra Inc. copyright 2021 *)
[@@@program]
[@@@import "../src-core-pp/base_types_json.iml"]
open Base_types_json;;
[@@@import "../src-core-pp/datetime_json.iml"]
open Datetime_json;;
[@@@require "decoders-yojson"]
open Decoders_yojson.Basic.Decode;;
[@@@require "decoders-yojson"]
open Decoders_yojson.Basic.Decode.Infix;;
[@@@import "full_app_enums_decoder.iml"]
open Full_app_enums_decoder;;
[@@@import "../src-protocol-exts/full_app_records.iml"]
open Full_app_records;;


let full_rg_inner_TrdgSesGrp_decoder  : fix_rg_inner_trdgsesgrp decoder =
    (maybe (field "TradingSessionSubID" string_decoder)) >>= (fun f_TrdgSesGrp_TradingSessionSubID -> (maybe (field "TradingSessionID" string_decoder)) >>= (fun f_TrdgSesGrp_TradingSessionID -> (maybe (field "NoTradingSessions" int_decoder)) >>= (fun f_TrdgSesGrp_NoTradingSessions -> succeed {
        f_TrdgSesGrp_NoTradingSessions = f_TrdgSesGrp_NoTradingSessions;
        f_TrdgSesGrp_TradingSessionID = f_TrdgSesGrp_TradingSessionID;
        f_TrdgSesGrp_TradingSessionSubID = f_TrdgSesGrp_TradingSessionSubID
    }
    )
    )
    )
;;

let full_rg_trdgsesgrp_decoder  : fix_rg_trdgsesgrp decoder =
    list full_rg_inner_TrdgSesGrp_decoder
;;

let full_rg_inner_EvntGrp_decoder  : fix_rg_inner_evntgrp decoder =
    (maybe (field "EventText" string_decoder)) >>= (fun f_EvntGrp_EventText -> (maybe (field "EventPx" float_6_decoder)) >>= (fun f_EvntGrp_EventPx -> (maybe (field "EventDate" localmktdate_decoder)) >>= (fun f_EvntGrp_EventDate -> (maybe (field "EventType" full_enum_eventtype_decoder)) >>= (fun f_EvntGrp_EventType -> (maybe (field "NoEvents" int_decoder)) >>= (fun f_EvntGrp_NoEvents -> succeed {
        f_EvntGrp_NoEvents = f_EvntGrp_NoEvents;
        f_EvntGrp_EventType = f_EvntGrp_EventType;
        f_EvntGrp_EventDate = f_EvntGrp_EventDate;
        f_EvntGrp_EventPx = f_EvntGrp_EventPx;
        f_EvntGrp_EventText = f_EvntGrp_EventText
    }
    )
    )
    )
    )
    )
;;

let full_rg_evntgrp_decoder  : fix_rg_evntgrp decoder =
    list full_rg_inner_EvntGrp_decoder
;;

let full_record_orderqtydata_decoder  : fix_orderqtydata decoder =
    (maybe (field "RoundingModulus" float_decoder)) >>= (fun f_OrderQtyData_RoundingModulus -> (maybe (field "RoundingDirection" full_enum_roundingdirection_decoder)) >>= (fun f_OrderQtyData_RoundingDirection -> (maybe (field "OrderPercent" float_6_decoder)) >>= (fun f_OrderQtyData_OrderPercent -> (maybe (field "CashOrderQty" float_6_decoder)) >>= (fun f_OrderQtyData_CashOrderQty -> (maybe (field "OrderQty" float_6_decoder)) >>= (fun f_OrderQtyData_OrderQty -> succeed {
        f_OrderQtyData_OrderQty = f_OrderQtyData_OrderQty;
        f_OrderQtyData_CashOrderQty = f_OrderQtyData_CashOrderQty;
        f_OrderQtyData_OrderPercent = f_OrderQtyData_OrderPercent;
        f_OrderQtyData_RoundingDirection = f_OrderQtyData_RoundingDirection;
        f_OrderQtyData_RoundingModulus = f_OrderQtyData_RoundingModulus
    }
    )
    )
    )
    )
    )
;;

let full_rg_inner_UndSecAltIDGrp_decoder  : fix_rg_inner_undsecaltidgrp decoder =
    (maybe (field "UnderlyingSecurityAltIDSource" full_enum_securityidsource_decoder)) >>= (fun f_UndSecAltIDGrp_UnderlyingSecurityAltIDSource -> (maybe (field "UnderlyingSecurityAltID" string_decoder)) >>= (fun f_UndSecAltIDGrp_UnderlyingSecurityAltID -> (maybe (field "NoUnderlyingSecurityAltID" int_decoder)) >>= (fun f_UndSecAltIDGrp_NoUnderlyingSecurityAltID -> succeed {
        f_UndSecAltIDGrp_NoUnderlyingSecurityAltID = f_UndSecAltIDGrp_NoUnderlyingSecurityAltID;
        f_UndSecAltIDGrp_UnderlyingSecurityAltID = f_UndSecAltIDGrp_UnderlyingSecurityAltID;
        f_UndSecAltIDGrp_UnderlyingSecurityAltIDSource = f_UndSecAltIDGrp_UnderlyingSecurityAltIDSource
    }
    )
    )
    )
;;

let full_rg_undsecaltidgrp_decoder  : fix_rg_undsecaltidgrp decoder =
    list full_rg_inner_UndSecAltIDGrp_decoder
;;

let full_rg_inner_UnderlyingStipulations_decoder  : fix_rg_inner_underlyingstipulations decoder =
    (maybe (field "UnderlyingStipValue" string_decoder)) >>= (fun f_UnderlyingStipulations_UnderlyingStipValue -> (maybe (field "UnderlyingStipType" string_decoder)) >>= (fun f_UnderlyingStipulations_UnderlyingStipType -> (maybe (field "NoUnderlyingStips" int_decoder)) >>= (fun f_UnderlyingStipulations_NoUnderlyingStips -> succeed {
        f_UnderlyingStipulations_NoUnderlyingStips = f_UnderlyingStipulations_NoUnderlyingStips;
        f_UnderlyingStipulations_UnderlyingStipType = f_UnderlyingStipulations_UnderlyingStipType;
        f_UnderlyingStipulations_UnderlyingStipValue = f_UnderlyingStipulations_UnderlyingStipValue
    }
    )
    )
    )
;;

let full_rg_underlyingstipulations_decoder  : fix_rg_underlyingstipulations decoder =
    list full_rg_inner_UnderlyingStipulations_decoder
;;

let full_rg_inner_NstdPtysSubGrp_decoder  : fix_rg_inner_nstdptyssubgrp decoder =
    (maybe (field "NestedPartySubIDType" int_decoder)) >>= (fun f_NstdPtysSubGrp_NestedPartySubIDType -> (maybe (field "NestedPartySubID" string_decoder)) >>= (fun f_NstdPtysSubGrp_NestedPartySubID -> (maybe (field "NoNestedPartySubIDs" int_decoder)) >>= (fun f_NstdPtysSubGrp_NoNestedPartySubIDs -> succeed {
        f_NstdPtysSubGrp_NoNestedPartySubIDs = f_NstdPtysSubGrp_NoNestedPartySubIDs;
        f_NstdPtysSubGrp_NestedPartySubID = f_NstdPtysSubGrp_NestedPartySubID;
        f_NstdPtysSubGrp_NestedPartySubIDType = f_NstdPtysSubGrp_NestedPartySubIDType
    }
    )
    )
    )
;;

let full_rg_nstdptyssubgrp_decoder  : fix_rg_nstdptyssubgrp decoder =
    list full_rg_inner_NstdPtysSubGrp_decoder
;;

let full_rg_inner_TrdCollGrp_decoder  : fix_rg_inner_trdcollgrp decoder =
    (maybe (field "SecondaryTradeReportID" string_decoder)) >>= (fun f_TrdCollGrp_SecondaryTradeReportID -> (maybe (field "TradeReportID" string_decoder)) >>= (fun f_TrdCollGrp_TradeReportID -> (maybe (field "NoTrades" int_decoder)) >>= (fun f_TrdCollGrp_NoTrades -> succeed {
        f_TrdCollGrp_NoTrades = f_TrdCollGrp_NoTrades;
        f_TrdCollGrp_TradeReportID = f_TrdCollGrp_TradeReportID;
        f_TrdCollGrp_SecondaryTradeReportID = f_TrdCollGrp_SecondaryTradeReportID
    }
    )
    )
    )
;;

let full_rg_trdcollgrp_decoder  : fix_rg_trdcollgrp decoder =
    list full_rg_inner_TrdCollGrp_decoder
;;

let full_record_discretioninstructions_decoder  : fix_discretioninstructions decoder =
    (maybe (field "DiscretionScope" full_enum_discretionscope_decoder)) >>= (fun f_DiscretionInstructions_DiscretionScope -> (maybe (field "DiscretionRoundDirection" full_enum_discretionrounddirection_decoder)) >>= (fun f_DiscretionInstructions_DiscretionRoundDirection -> (maybe (field "DiscretionLimitType" full_enum_discretionlimittype_decoder)) >>= (fun f_DiscretionInstructions_DiscretionLimitType -> (maybe (field "DiscretionOffsetType" full_enum_discretionoffsettype_decoder)) >>= (fun f_DiscretionInstructions_DiscretionOffsetType -> (maybe (field "DiscretionMoveType" full_enum_discretionmovetype_decoder)) >>= (fun f_DiscretionInstructions_DiscretionMoveType -> (maybe (field "DiscretionOffsetValue" float_decoder)) >>= (fun f_DiscretionInstructions_DiscretionOffsetValue -> (maybe (field "DiscretionInst" full_enum_discretioninst_decoder)) >>= (fun f_DiscretionInstructions_DiscretionInst -> succeed {
        f_DiscretionInstructions_DiscretionInst = f_DiscretionInstructions_DiscretionInst;
        f_DiscretionInstructions_DiscretionOffsetValue = f_DiscretionInstructions_DiscretionOffsetValue;
        f_DiscretionInstructions_DiscretionMoveType = f_DiscretionInstructions_DiscretionMoveType;
        f_DiscretionInstructions_DiscretionOffsetType = f_DiscretionInstructions_DiscretionOffsetType;
        f_DiscretionInstructions_DiscretionLimitType = f_DiscretionInstructions_DiscretionLimitType;
        f_DiscretionInstructions_DiscretionRoundDirection = f_DiscretionInstructions_DiscretionRoundDirection;
        f_DiscretionInstructions_DiscretionScope = f_DiscretionInstructions_DiscretionScope
    }
    )
    )
    )
    )
    )
    )
    )
;;

let full_rg_inner_RoutingGrp_decoder  : fix_rg_inner_routinggrp decoder =
    (maybe (field "RoutingID" string_decoder)) >>= (fun f_RoutingGrp_RoutingID -> (maybe (field "RoutingType" full_enum_routingtype_decoder)) >>= (fun f_RoutingGrp_RoutingType -> (maybe (field "NoRoutingIDs" int_decoder)) >>= (fun f_RoutingGrp_NoRoutingIDs -> succeed {
        f_RoutingGrp_NoRoutingIDs = f_RoutingGrp_NoRoutingIDs;
        f_RoutingGrp_RoutingType = f_RoutingGrp_RoutingType;
        f_RoutingGrp_RoutingID = f_RoutingGrp_RoutingID
    }
    )
    )
    )
;;

let full_rg_routinggrp_decoder  : fix_rg_routinggrp decoder =
    list full_rg_inner_RoutingGrp_decoder
;;

let full_rg_inner_LegStipulations_decoder  : fix_rg_inner_legstipulations decoder =
    (maybe (field "LegStipulationValue" string_decoder)) >>= (fun f_LegStipulations_LegStipulationValue -> (maybe (field "LegStipulationType" string_decoder)) >>= (fun f_LegStipulations_LegStipulationType -> (maybe (field "NoLegStipulations" int_decoder)) >>= (fun f_LegStipulations_NoLegStipulations -> succeed {
        f_LegStipulations_NoLegStipulations = f_LegStipulations_NoLegStipulations;
        f_LegStipulations_LegStipulationType = f_LegStipulations_LegStipulationType;
        f_LegStipulations_LegStipulationValue = f_LegStipulations_LegStipulationValue
    }
    )
    )
    )
;;

let full_rg_legstipulations_decoder  : fix_rg_legstipulations decoder =
    list full_rg_inner_LegStipulations_decoder
;;

let full_record_spreadorbenchmarkcurvedata_decoder  : fix_spreadorbenchmarkcurvedata decoder =
    (maybe (field "BenchmarkSecurityIDSource" full_enum_securityidsource_decoder)) >>= (fun f_SpreadOrBenchmarkCurveData_BenchmarkSecurityIDSource -> (maybe (field "BenchmarkSecurityID" string_decoder)) >>= (fun f_SpreadOrBenchmarkCurveData_BenchmarkSecurityID -> (maybe (field "BenchmarkPriceType" int_decoder)) >>= (fun f_SpreadOrBenchmarkCurveData_BenchmarkPriceType -> (maybe (field "BenchmarkPrice" float_6_decoder)) >>= (fun f_SpreadOrBenchmarkCurveData_BenchmarkPrice -> (maybe (field "BenchmarkCurvePoint" string_decoder)) >>= (fun f_SpreadOrBenchmarkCurveData_BenchmarkCurvePoint -> (maybe (field "BenchmarkCurveName" string_decoder)) >>= (fun f_SpreadOrBenchmarkCurveData_BenchmarkCurveName -> (maybe (field "BenchmarkCurveCurrency" full_enum_currency_decoder)) >>= (fun f_SpreadOrBenchmarkCurveData_BenchmarkCurveCurrency -> (maybe (field "Spread" float_6_decoder)) >>= (fun f_SpreadOrBenchmarkCurveData_Spread -> succeed {
        f_SpreadOrBenchmarkCurveData_Spread = f_SpreadOrBenchmarkCurveData_Spread;
        f_SpreadOrBenchmarkCurveData_BenchmarkCurveCurrency = f_SpreadOrBenchmarkCurveData_BenchmarkCurveCurrency;
        f_SpreadOrBenchmarkCurveData_BenchmarkCurveName = f_SpreadOrBenchmarkCurveData_BenchmarkCurveName;
        f_SpreadOrBenchmarkCurveData_BenchmarkCurvePoint = f_SpreadOrBenchmarkCurveData_BenchmarkCurvePoint;
        f_SpreadOrBenchmarkCurveData_BenchmarkPrice = f_SpreadOrBenchmarkCurveData_BenchmarkPrice;
        f_SpreadOrBenchmarkCurveData_BenchmarkPriceType = f_SpreadOrBenchmarkCurveData_BenchmarkPriceType;
        f_SpreadOrBenchmarkCurveData_BenchmarkSecurityID = f_SpreadOrBenchmarkCurveData_BenchmarkSecurityID;
        f_SpreadOrBenchmarkCurveData_BenchmarkSecurityIDSource = f_SpreadOrBenchmarkCurveData_BenchmarkSecurityIDSource
    }
    )
    )
    )
    )
    )
    )
    )
    )
;;

let full_rg_inner_PositionAmountData_decoder  : fix_rg_inner_positionamountdata decoder =
    (maybe (field "PosAmt" float_6_decoder)) >>= (fun f_PositionAmountData_PosAmt -> (maybe (field "PosAmtType" full_enum_posamttype_decoder)) >>= (fun f_PositionAmountData_PosAmtType -> (maybe (field "NoPosAmt" int_decoder)) >>= (fun f_PositionAmountData_NoPosAmt -> succeed {
        f_PositionAmountData_NoPosAmt = f_PositionAmountData_NoPosAmt;
        f_PositionAmountData_PosAmtType = f_PositionAmountData_PosAmtType;
        f_PositionAmountData_PosAmt = f_PositionAmountData_PosAmt
    }
    )
    )
    )
;;

let full_rg_positionamountdata_decoder  : fix_rg_positionamountdata decoder =
    list full_rg_inner_PositionAmountData_decoder
;;

let full_rg_inner_CollInqQualGrp_decoder  : fix_rg_inner_collinqqualgrp decoder =
    (maybe (field "CollInquiryQualifier" full_enum_collinquiryqualifier_decoder)) >>= (fun f_CollInqQualGrp_CollInquiryQualifier -> (maybe (field "NoCollInquiryQualifier" int_decoder)) >>= (fun f_CollInqQualGrp_NoCollInquiryQualifier -> succeed {
        f_CollInqQualGrp_NoCollInquiryQualifier = f_CollInqQualGrp_NoCollInquiryQualifier;
        f_CollInqQualGrp_CollInquiryQualifier = f_CollInqQualGrp_CollInquiryQualifier
    }
    )
    )
;;

let full_rg_collinqqualgrp_decoder  : fix_rg_collinqqualgrp decoder =
    list full_rg_inner_CollInqQualGrp_decoder
;;

let full_rg_inner_BidDescReqGrp_decoder  : fix_rg_inner_biddescreqgrp decoder =
    (maybe (field "ValueOfFutures" float_6_decoder)) >>= (fun f_BidDescReqGrp_ValueOfFutures -> (maybe (field "OutsideIndexPct" float_6_decoder)) >>= (fun f_BidDescReqGrp_OutsideIndexPct -> (maybe (field "FairValue" float_6_decoder)) >>= (fun f_BidDescReqGrp_FairValue -> (maybe (field "EFPTrackingError" float_6_decoder)) >>= (fun f_BidDescReqGrp_EFPTrackingError -> (maybe (field "LiquidityPctHigh" float_6_decoder)) >>= (fun f_BidDescReqGrp_LiquidityPctHigh -> (maybe (field "LiquidityPctLow" float_6_decoder)) >>= (fun f_BidDescReqGrp_LiquidityPctLow -> (maybe (field "LiquidityNumSecurities" int_decoder)) >>= (fun f_BidDescReqGrp_LiquidityNumSecurities -> (maybe (field "LiquidityValue" float_6_decoder)) >>= (fun f_BidDescReqGrp_LiquidityValue -> (maybe (field "SideValueInd" full_enum_sidevalueind_decoder)) >>= (fun f_BidDescReqGrp_SideValueInd -> (maybe (field "BidDescriptor" string_decoder)) >>= (fun f_BidDescReqGrp_BidDescriptor -> (maybe (field "BidDescriptorType" full_enum_biddescriptortype_decoder)) >>= (fun f_BidDescReqGrp_BidDescriptorType -> (maybe (field "NoBidDescriptors" int_decoder)) >>= (fun f_BidDescReqGrp_NoBidDescriptors -> succeed {
        f_BidDescReqGrp_NoBidDescriptors = f_BidDescReqGrp_NoBidDescriptors;
        f_BidDescReqGrp_BidDescriptorType = f_BidDescReqGrp_BidDescriptorType;
        f_BidDescReqGrp_BidDescriptor = f_BidDescReqGrp_BidDescriptor;
        f_BidDescReqGrp_SideValueInd = f_BidDescReqGrp_SideValueInd;
        f_BidDescReqGrp_LiquidityValue = f_BidDescReqGrp_LiquidityValue;
        f_BidDescReqGrp_LiquidityNumSecurities = f_BidDescReqGrp_LiquidityNumSecurities;
        f_BidDescReqGrp_LiquidityPctLow = f_BidDescReqGrp_LiquidityPctLow;
        f_BidDescReqGrp_LiquidityPctHigh = f_BidDescReqGrp_LiquidityPctHigh;
        f_BidDescReqGrp_EFPTrackingError = f_BidDescReqGrp_EFPTrackingError;
        f_BidDescReqGrp_FairValue = f_BidDescReqGrp_FairValue;
        f_BidDescReqGrp_OutsideIndexPct = f_BidDescReqGrp_OutsideIndexPct;
        f_BidDescReqGrp_ValueOfFutures = f_BidDescReqGrp_ValueOfFutures
    }
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
;;

let full_rg_biddescreqgrp_decoder  : fix_rg_biddescreqgrp decoder =
    list full_rg_inner_BidDescReqGrp_decoder
;;

let full_rg_inner_NstdPtys3SubGrp_decoder  : fix_rg_inner_nstdptys3subgrp decoder =
    (maybe (field "Nested3PartySubIDType" int_decoder)) >>= (fun f_NstdPtys3SubGrp_Nested3PartySubIDType -> (maybe (field "Nested3PartySubID" string_decoder)) >>= (fun f_NstdPtys3SubGrp_Nested3PartySubID -> (maybe (field "NoNested3PartySubIDs" int_decoder)) >>= (fun f_NstdPtys3SubGrp_NoNested3PartySubIDs -> succeed {
        f_NstdPtys3SubGrp_NoNested3PartySubIDs = f_NstdPtys3SubGrp_NoNested3PartySubIDs;
        f_NstdPtys3SubGrp_Nested3PartySubID = f_NstdPtys3SubGrp_Nested3PartySubID;
        f_NstdPtys3SubGrp_Nested3PartySubIDType = f_NstdPtys3SubGrp_Nested3PartySubIDType
    }
    )
    )
    )
;;

let full_rg_nstdptys3subgrp_decoder  : fix_rg_nstdptys3subgrp decoder =
    list full_rg_inner_NstdPtys3SubGrp_decoder
;;

let full_rg_inner_LogonMsgTypes_decoder  : fix_rg_inner_logonmsgtypes decoder =
    (maybe (field "MsgDirection" full_enum_msgdirection_decoder)) >>= (fun f_LogonMsgTypes_MsgDirection -> (maybe (field "RefMsgType" string_decoder)) >>= (fun f_LogonMsgTypes_RefMsgType -> (maybe (field "NoMsgTypes" int_decoder)) >>= (fun f_LogonMsgTypes_NoMsgTypes -> succeed {
        f_LogonMsgTypes_NoMsgTypes = f_LogonMsgTypes_NoMsgTypes;
        f_LogonMsgTypes_RefMsgType = f_LogonMsgTypes_RefMsgType;
        f_LogonMsgTypes_MsgDirection = f_LogonMsgTypes_MsgDirection
    }
    )
    )
    )
;;

let full_rg_logonmsgtypes_decoder  : fix_rg_logonmsgtypes decoder =
    list full_rg_inner_LogonMsgTypes_decoder
;;

let full_rg_inner_CompIDReqGrp_decoder  : fix_rg_inner_compidreqgrp decoder =
    (maybe (field "DeskID" string_decoder)) >>= (fun f_CompIDReqGrp_DeskID -> (maybe (field "LocationID" string_decoder)) >>= (fun f_CompIDReqGrp_LocationID -> (maybe (field "RefSubID" string_decoder)) >>= (fun f_CompIDReqGrp_RefSubID -> (maybe (field "RefCompID" string_decoder)) >>= (fun f_CompIDReqGrp_RefCompID -> (maybe (field "NoCompIDs" int_decoder)) >>= (fun f_CompIDReqGrp_NoCompIDs -> succeed {
        f_CompIDReqGrp_NoCompIDs = f_CompIDReqGrp_NoCompIDs;
        f_CompIDReqGrp_RefCompID = f_CompIDReqGrp_RefCompID;
        f_CompIDReqGrp_RefSubID = f_CompIDReqGrp_RefSubID;
        f_CompIDReqGrp_LocationID = f_CompIDReqGrp_LocationID;
        f_CompIDReqGrp_DeskID = f_CompIDReqGrp_DeskID
    }
    )
    )
    )
    )
    )
;;

let full_rg_compidreqgrp_decoder  : fix_rg_compidreqgrp decoder =
    list full_rg_inner_CompIDReqGrp_decoder
;;

let full_record_commissiondata_decoder  : fix_commissiondata decoder =
    (maybe (field "FundRenewWaiv" full_enum_fundrenewwaiv_decoder)) >>= (fun f_CommissionData_FundRenewWaiv -> (maybe (field "CommCurrency" full_enum_currency_decoder)) >>= (fun f_CommissionData_CommCurrency -> (maybe (field "CommType" full_enum_commtype_decoder)) >>= (fun f_CommissionData_CommType -> (maybe (field "Commission" float_6_decoder)) >>= (fun f_CommissionData_Commission -> succeed {
        f_CommissionData_Commission = f_CommissionData_Commission;
        f_CommissionData_CommType = f_CommissionData_CommType;
        f_CommissionData_CommCurrency = f_CommissionData_CommCurrency;
        f_CommissionData_FundRenewWaiv = f_CommissionData_FundRenewWaiv
    }
    )
    )
    )
    )
;;

let full_rg_inner_SecTypesGrp_decoder  : fix_rg_inner_sectypesgrp decoder =
    (maybe (field "CFICode" string_decoder)) >>= (fun f_SecTypesGrp_CFICode -> (maybe (field "Product" full_enum_product_decoder)) >>= (fun f_SecTypesGrp_Product -> (maybe (field "SecuritySubType" string_decoder)) >>= (fun f_SecTypesGrp_SecuritySubType -> (maybe (field "SecurityType" full_enum_securitytype_decoder)) >>= (fun f_SecTypesGrp_SecurityType -> (maybe (field "NoSecurityTypes" int_decoder)) >>= (fun f_SecTypesGrp_NoSecurityTypes -> succeed {
        f_SecTypesGrp_NoSecurityTypes = f_SecTypesGrp_NoSecurityTypes;
        f_SecTypesGrp_SecurityType = f_SecTypesGrp_SecurityType;
        f_SecTypesGrp_SecuritySubType = f_SecTypesGrp_SecuritySubType;
        f_SecTypesGrp_Product = f_SecTypesGrp_Product;
        f_SecTypesGrp_CFICode = f_SecTypesGrp_CFICode
    }
    )
    )
    )
    )
    )
;;

let full_rg_sectypesgrp_decoder  : fix_rg_sectypesgrp decoder =
    list full_rg_inner_SecTypesGrp_decoder
;;

let full_rg_inner_ExecCollGrp_decoder  : fix_rg_inner_execcollgrp decoder =
    (maybe (field "ExecID" string_decoder)) >>= (fun f_ExecCollGrp_ExecID -> (maybe (field "NoExecs" int_decoder)) >>= (fun f_ExecCollGrp_NoExecs -> succeed {
        f_ExecCollGrp_NoExecs = f_ExecCollGrp_NoExecs;
        f_ExecCollGrp_ExecID = f_ExecCollGrp_ExecID
    }
    )
    )
;;

let full_rg_execcollgrp_decoder  : fix_rg_execcollgrp decoder =
    list full_rg_inner_ExecCollGrp_decoder
;;

let full_record_yielddata_decoder  : fix_yielddata decoder =
    (maybe (field "YieldRedemptionPriceType" int_decoder)) >>= (fun f_YieldData_YieldRedemptionPriceType -> (maybe (field "YieldRedemptionPrice" float_6_decoder)) >>= (fun f_YieldData_YieldRedemptionPrice -> (maybe (field "YieldRedemptionDate" localmktdate_decoder)) >>= (fun f_YieldData_YieldRedemptionDate -> (maybe (field "YieldCalcDate" localmktdate_decoder)) >>= (fun f_YieldData_YieldCalcDate -> (maybe (field "Yield" float_6_decoder)) >>= (fun f_YieldData_Yield -> (maybe (field "YieldType" full_enum_yieldtype_decoder)) >>= (fun f_YieldData_YieldType -> succeed {
        f_YieldData_YieldType = f_YieldData_YieldType;
        f_YieldData_Yield = f_YieldData_Yield;
        f_YieldData_YieldCalcDate = f_YieldData_YieldCalcDate;
        f_YieldData_YieldRedemptionDate = f_YieldData_YieldRedemptionDate;
        f_YieldData_YieldRedemptionPrice = f_YieldData_YieldRedemptionPrice;
        f_YieldData_YieldRedemptionPriceType = f_YieldData_YieldRedemptionPriceType
    }
    )
    )
    )
    )
    )
    )
;;

let full_rg_inner_RgstDistInstGrp_decoder  : fix_rg_inner_rgstdistinstgrp decoder =
    (maybe (field "CashDistribAgentAcctName" string_decoder)) >>= (fun f_RgstDistInstGrp_CashDistribAgentAcctName -> (maybe (field "CashDistribPayRef" string_decoder)) >>= (fun f_RgstDistInstGrp_CashDistribPayRef -> (maybe (field "CashDistribAgentAcctNumber" string_decoder)) >>= (fun f_RgstDistInstGrp_CashDistribAgentAcctNumber -> (maybe (field "CashDistribAgentCode" string_decoder)) >>= (fun f_RgstDistInstGrp_CashDistribAgentCode -> (maybe (field "CashDistribAgentName" string_decoder)) >>= (fun f_RgstDistInstGrp_CashDistribAgentName -> (maybe (field "CashDistribCurr" full_enum_currency_decoder)) >>= (fun f_RgstDistInstGrp_CashDistribCurr -> (maybe (field "DistribPercentage" float_6_decoder)) >>= (fun f_RgstDistInstGrp_DistribPercentage -> (maybe (field "DistribPaymentMethod" full_enum_distribpaymentmethod_decoder)) >>= (fun f_RgstDistInstGrp_DistribPaymentMethod -> (maybe (field "NoDistribInsts" int_decoder)) >>= (fun f_RgstDistInstGrp_NoDistribInsts -> succeed {
        f_RgstDistInstGrp_NoDistribInsts = f_RgstDistInstGrp_NoDistribInsts;
        f_RgstDistInstGrp_DistribPaymentMethod = f_RgstDistInstGrp_DistribPaymentMethod;
        f_RgstDistInstGrp_DistribPercentage = f_RgstDistInstGrp_DistribPercentage;
        f_RgstDistInstGrp_CashDistribCurr = f_RgstDistInstGrp_CashDistribCurr;
        f_RgstDistInstGrp_CashDistribAgentName = f_RgstDistInstGrp_CashDistribAgentName;
        f_RgstDistInstGrp_CashDistribAgentCode = f_RgstDistInstGrp_CashDistribAgentCode;
        f_RgstDistInstGrp_CashDistribAgentAcctNumber = f_RgstDistInstGrp_CashDistribAgentAcctNumber;
        f_RgstDistInstGrp_CashDistribPayRef = f_RgstDistInstGrp_CashDistribPayRef;
        f_RgstDistInstGrp_CashDistribAgentAcctName = f_RgstDistInstGrp_CashDistribAgentAcctName
    }
    )
    )
    )
    )
    )
    )
    )
    )
    )
;;

let full_rg_rgstdistinstgrp_decoder  : fix_rg_rgstdistinstgrp decoder =
    list full_rg_inner_RgstDistInstGrp_decoder
;;

let full_rg_inner_MDRjctGrp_decoder  : fix_rg_inner_mdrjctgrp decoder =
    (maybe (field "AltMDSourceID" string_decoder)) >>= (fun f_MDRjctGrp_AltMDSourceID -> (maybe (field "NoAltMDSource" int_decoder)) >>= (fun f_MDRjctGrp_NoAltMDSource -> succeed {
        f_MDRjctGrp_NoAltMDSource = f_MDRjctGrp_NoAltMDSource;
        f_MDRjctGrp_AltMDSourceID = f_MDRjctGrp_AltMDSourceID
    }
    )
    )
;;

let full_rg_mdrjctgrp_decoder  : fix_rg_mdrjctgrp decoder =
    list full_rg_inner_MDRjctGrp_decoder
;;

let full_rg_inner_ExecsGrp_decoder  : fix_rg_inner_execsgrp decoder =
    (maybe (field "ExecID" string_decoder)) >>= (fun f_ExecsGrp_ExecID -> (maybe (field "NoExecs" int_decoder)) >>= (fun f_ExecsGrp_NoExecs -> succeed {
        f_ExecsGrp_NoExecs = f_ExecsGrp_NoExecs;
        f_ExecsGrp_ExecID = f_ExecsGrp_ExecID
    }
    )
    )
;;

let full_rg_execsgrp_decoder  : fix_rg_execsgrp decoder =
    list full_rg_inner_ExecsGrp_decoder
;;

let full_rg_inner_ExecAllocGrp_decoder  : fix_rg_inner_execallocgrp decoder =
    (maybe (field "LastCapacity" full_enum_lastcapacity_decoder)) >>= (fun f_ExecAllocGrp_LastCapacity -> (maybe (field "LastParPx" float_6_decoder)) >>= (fun f_ExecAllocGrp_LastParPx -> (maybe (field "LastPx" float_6_decoder)) >>= (fun f_ExecAllocGrp_LastPx -> (maybe (field "SecondaryExecID" string_decoder)) >>= (fun f_ExecAllocGrp_SecondaryExecID -> (maybe (field "ExecID" string_decoder)) >>= (fun f_ExecAllocGrp_ExecID -> (maybe (field "LastQty" float_6_decoder)) >>= (fun f_ExecAllocGrp_LastQty -> (maybe (field "NoExecs" int_decoder)) >>= (fun f_ExecAllocGrp_NoExecs -> succeed {
        f_ExecAllocGrp_NoExecs = f_ExecAllocGrp_NoExecs;
        f_ExecAllocGrp_LastQty = f_ExecAllocGrp_LastQty;
        f_ExecAllocGrp_ExecID = f_ExecAllocGrp_ExecID;
        f_ExecAllocGrp_SecondaryExecID = f_ExecAllocGrp_SecondaryExecID;
        f_ExecAllocGrp_LastPx = f_ExecAllocGrp_LastPx;
        f_ExecAllocGrp_LastParPx = f_ExecAllocGrp_LastParPx;
        f_ExecAllocGrp_LastCapacity = f_ExecAllocGrp_LastCapacity
    }
    )
    )
    )
    )
    )
    )
    )
;;

let full_rg_execallocgrp_decoder  : fix_rg_execallocgrp decoder =
    list full_rg_inner_ExecAllocGrp_decoder
;;

let full_rg_inner_TrdRegTimestamps_decoder  : fix_rg_inner_trdregtimestamps decoder =
    (maybe (field "TrdRegTimestampOrigin" string_decoder)) >>= (fun f_TrdRegTimestamps_TrdRegTimestampOrigin -> (maybe (field "TrdRegTimestampType" full_enum_trdregtimestamptype_decoder)) >>= (fun f_TrdRegTimestamps_TrdRegTimestampType -> (maybe (field "TrdRegTimestamp" utctimestamp_milli_decoder)) >>= (fun f_TrdRegTimestamps_TrdRegTimestamp -> (maybe (field "NoTrdRegTimestamps" int_decoder)) >>= (fun f_TrdRegTimestamps_NoTrdRegTimestamps -> succeed {
        f_TrdRegTimestamps_NoTrdRegTimestamps = f_TrdRegTimestamps_NoTrdRegTimestamps;
        f_TrdRegTimestamps_TrdRegTimestamp = f_TrdRegTimestamps_TrdRegTimestamp;
        f_TrdRegTimestamps_TrdRegTimestampType = f_TrdRegTimestamps_TrdRegTimestampType;
        f_TrdRegTimestamps_TrdRegTimestampOrigin = f_TrdRegTimestamps_TrdRegTimestampOrigin
    }
    )
    )
    )
    )
;;

let full_rg_trdregtimestamps_decoder  : fix_rg_trdregtimestamps decoder =
    list full_rg_inner_TrdRegTimestamps_decoder
;;

let full_rg_inner_LinesOfTextGrp_decoder  : fix_rg_inner_linesoftextgrp decoder =
    (maybe (field "EncodedText" string_decoder)) >>= (fun f_LinesOfTextGrp_EncodedText -> (maybe (field "EncodedTextLen" int_decoder)) >>= (fun f_LinesOfTextGrp_EncodedTextLen -> (maybe (field "Text" string_decoder)) >>= (fun f_LinesOfTextGrp_Text -> (maybe (field "NoLinesOfText" int_decoder)) >>= (fun f_LinesOfTextGrp_NoLinesOfText -> succeed {
        f_LinesOfTextGrp_NoLinesOfText = f_LinesOfTextGrp_NoLinesOfText;
        f_LinesOfTextGrp_Text = f_LinesOfTextGrp_Text;
        f_LinesOfTextGrp_EncodedTextLen = f_LinesOfTextGrp_EncodedTextLen;
        f_LinesOfTextGrp_EncodedText = f_LinesOfTextGrp_EncodedText
    }
    )
    )
    )
    )
;;

let full_rg_linesoftextgrp_decoder  : fix_rg_linesoftextgrp decoder =
    list full_rg_inner_LinesOfTextGrp_decoder
;;

let full_rg_inner_MDFullGrp_decoder  : fix_rg_inner_mdfullgrp decoder =
    (maybe (field "EncodedText" string_decoder)) >>= (fun f_MDFullGrp_EncodedText -> (maybe (field "EncodedTextLen" int_decoder)) >>= (fun f_MDFullGrp_EncodedTextLen -> (maybe (field "Text" string_decoder)) >>= (fun f_MDFullGrp_Text -> (maybe (field "PriceDelta" float_decoder)) >>= (fun f_MDFullGrp_PriceDelta -> (maybe (field "Scope" full_enum_scope_decoder)) >>= (fun f_MDFullGrp_Scope -> (maybe (field "MDEntryPositionNo" int_decoder)) >>= (fun f_MDFullGrp_MDEntryPositionNo -> (maybe (field "NumberOfOrders" int_decoder)) >>= (fun f_MDFullGrp_NumberOfOrders -> (maybe (field "MDEntrySeller" string_decoder)) >>= (fun f_MDFullGrp_MDEntrySeller -> (maybe (field "MDEntryBuyer" string_decoder)) >>= (fun f_MDFullGrp_MDEntryBuyer -> (maybe (field "QuoteEntryID" string_decoder)) >>= (fun f_MDFullGrp_QuoteEntryID -> (maybe (field "OrderID" string_decoder)) >>= (fun f_MDFullGrp_OrderID -> (maybe (field "SellerDays" int_decoder)) >>= (fun f_MDFullGrp_SellerDays -> (maybe (field "ExecInst" full_enum_execinst_decoder)) >>= (fun f_MDFullGrp_ExecInst -> (maybe (field "MinQty" float_6_decoder)) >>= (fun f_MDFullGrp_MinQty -> (maybe (field "ExpireTime" utctimestamp_milli_decoder)) >>= (fun f_MDFullGrp_ExpireTime -> (maybe (field "ExpireDate" localmktdate_decoder)) >>= (fun f_MDFullGrp_ExpireDate -> (maybe (field "TimeInForce" full_enum_timeinforce_decoder)) >>= (fun f_MDFullGrp_TimeInForce -> (maybe (field "OpenCloseSettlFlag" full_enum_openclosesettlflag_decoder)) >>= (fun f_MDFullGrp_OpenCloseSettlFlag -> (maybe (field "DeskID" string_decoder)) >>= (fun f_MDFullGrp_DeskID -> (maybe (field "LocationID" string_decoder)) >>= (fun f_MDFullGrp_LocationID -> (maybe (field "MDEntryOriginator" string_decoder)) >>= (fun f_MDFullGrp_MDEntryOriginator -> (maybe (field "TradeCondition" full_enum_tradecondition_decoder)) >>= (fun f_MDFullGrp_TradeCondition -> (maybe (field "QuoteCondition" full_enum_quotecondition_decoder)) >>= (fun f_MDFullGrp_QuoteCondition -> (maybe (field "TradingSessionSubID" string_decoder)) >>= (fun f_MDFullGrp_TradingSessionSubID -> (maybe (field "TradingSessionID" string_decoder)) >>= (fun f_MDFullGrp_TradingSessionID -> (maybe (field "MDMkt" full_enum_exchange_decoder)) >>= (fun f_MDFullGrp_MDMkt -> (maybe (field "TickDirection" full_enum_tickdirection_decoder)) >>= (fun f_MDFullGrp_TickDirection -> (maybe (field "MDEntryTime" utctimeonly_milli_decoder)) >>= (fun f_MDFullGrp_MDEntryTime -> (maybe (field "MDEntryDate" utcdateonly_decoder)) >>= (fun f_MDFullGrp_MDEntryDate -> (maybe (field "MDEntrySize" float_6_decoder)) >>= (fun f_MDFullGrp_MDEntrySize -> (maybe (field "Currency" full_enum_currency_decoder)) >>= (fun f_MDFullGrp_Currency -> (maybe (field "MDEntryPx" float_6_decoder)) >>= (fun f_MDFullGrp_MDEntryPx -> (maybe (field "MDEntryType" full_enum_mdentrytype_decoder)) >>= (fun f_MDFullGrp_MDEntryType -> (maybe (field "NoMDEntries" int_decoder)) >>= (fun f_MDFullGrp_NoMDEntries -> succeed {
        f_MDFullGrp_NoMDEntries = f_MDFullGrp_NoMDEntries;
        f_MDFullGrp_MDEntryType = f_MDFullGrp_MDEntryType;
        f_MDFullGrp_MDEntryPx = f_MDFullGrp_MDEntryPx;
        f_MDFullGrp_Currency = f_MDFullGrp_Currency;
        f_MDFullGrp_MDEntrySize = f_MDFullGrp_MDEntrySize;
        f_MDFullGrp_MDEntryDate = f_MDFullGrp_MDEntryDate;
        f_MDFullGrp_MDEntryTime = f_MDFullGrp_MDEntryTime;
        f_MDFullGrp_TickDirection = f_MDFullGrp_TickDirection;
        f_MDFullGrp_MDMkt = f_MDFullGrp_MDMkt;
        f_MDFullGrp_TradingSessionID = f_MDFullGrp_TradingSessionID;
        f_MDFullGrp_TradingSessionSubID = f_MDFullGrp_TradingSessionSubID;
        f_MDFullGrp_QuoteCondition = f_MDFullGrp_QuoteCondition;
        f_MDFullGrp_TradeCondition = f_MDFullGrp_TradeCondition;
        f_MDFullGrp_MDEntryOriginator = f_MDFullGrp_MDEntryOriginator;
        f_MDFullGrp_LocationID = f_MDFullGrp_LocationID;
        f_MDFullGrp_DeskID = f_MDFullGrp_DeskID;
        f_MDFullGrp_OpenCloseSettlFlag = f_MDFullGrp_OpenCloseSettlFlag;
        f_MDFullGrp_TimeInForce = f_MDFullGrp_TimeInForce;
        f_MDFullGrp_ExpireDate = f_MDFullGrp_ExpireDate;
        f_MDFullGrp_ExpireTime = f_MDFullGrp_ExpireTime;
        f_MDFullGrp_MinQty = f_MDFullGrp_MinQty;
        f_MDFullGrp_ExecInst = f_MDFullGrp_ExecInst;
        f_MDFullGrp_SellerDays = f_MDFullGrp_SellerDays;
        f_MDFullGrp_OrderID = f_MDFullGrp_OrderID;
        f_MDFullGrp_QuoteEntryID = f_MDFullGrp_QuoteEntryID;
        f_MDFullGrp_MDEntryBuyer = f_MDFullGrp_MDEntryBuyer;
        f_MDFullGrp_MDEntrySeller = f_MDFullGrp_MDEntrySeller;
        f_MDFullGrp_NumberOfOrders = f_MDFullGrp_NumberOfOrders;
        f_MDFullGrp_MDEntryPositionNo = f_MDFullGrp_MDEntryPositionNo;
        f_MDFullGrp_Scope = f_MDFullGrp_Scope;
        f_MDFullGrp_PriceDelta = f_MDFullGrp_PriceDelta;
        f_MDFullGrp_Text = f_MDFullGrp_Text;
        f_MDFullGrp_EncodedTextLen = f_MDFullGrp_EncodedTextLen;
        f_MDFullGrp_EncodedText = f_MDFullGrp_EncodedText
    }
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
;;

let full_rg_mdfullgrp_decoder  : fix_rg_mdfullgrp decoder =
    list full_rg_inner_MDFullGrp_decoder
;;

let full_record_financingdetails_decoder  : fix_financingdetails decoder =
    (maybe (field "MarginRatio" float_6_decoder)) >>= (fun f_FinancingDetails_MarginRatio -> (maybe (field "DeliveryType" full_enum_deliverytype_decoder)) >>= (fun f_FinancingDetails_DeliveryType -> (maybe (field "EndDate" localmktdate_decoder)) >>= (fun f_FinancingDetails_EndDate -> (maybe (field "StartDate" localmktdate_decoder)) >>= (fun f_FinancingDetails_StartDate -> (maybe (field "TerminationType" full_enum_terminationtype_decoder)) >>= (fun f_FinancingDetails_TerminationType -> (maybe (field "AgreementCurrency" full_enum_currency_decoder)) >>= (fun f_FinancingDetails_AgreementCurrency -> (maybe (field "AgreementDate" localmktdate_decoder)) >>= (fun f_FinancingDetails_AgreementDate -> (maybe (field "AgreementID" string_decoder)) >>= (fun f_FinancingDetails_AgreementID -> (maybe (field "AgreementDesc" string_decoder)) >>= (fun f_FinancingDetails_AgreementDesc -> succeed {
        f_FinancingDetails_AgreementDesc = f_FinancingDetails_AgreementDesc;
        f_FinancingDetails_AgreementID = f_FinancingDetails_AgreementID;
        f_FinancingDetails_AgreementDate = f_FinancingDetails_AgreementDate;
        f_FinancingDetails_AgreementCurrency = f_FinancingDetails_AgreementCurrency;
        f_FinancingDetails_TerminationType = f_FinancingDetails_TerminationType;
        f_FinancingDetails_StartDate = f_FinancingDetails_StartDate;
        f_FinancingDetails_EndDate = f_FinancingDetails_EndDate;
        f_FinancingDetails_DeliveryType = f_FinancingDetails_DeliveryType;
        f_FinancingDetails_MarginRatio = f_FinancingDetails_MarginRatio
    }
    )
    )
    )
    )
    )
    )
    )
    )
    )
;;

let full_record_interval_decoder  : fix_interval decoder =
    (maybe (field "duration" duration_decoder)) >>= (fun f_interval_duration -> (maybe (field "start_time" utctimestamp_milli_decoder)) >>= (fun f_interval_start_time -> succeed {
        f_interval_start_time = f_interval_start_time;
        f_interval_duration = f_interval_duration
    }
    )
    )
;;

let full_rg_inner_BidCompReqGrp_decoder  : fix_rg_inner_bidcompreqgrp decoder =
    (maybe (field "AcctIDSource" full_enum_acctidsource_decoder)) >>= (fun f_BidCompReqGrp_AcctIDSource -> (maybe (field "Account" string_decoder)) >>= (fun f_BidCompReqGrp_Account -> (maybe (field "SettlDate" localmktdate_decoder)) >>= (fun f_BidCompReqGrp_SettlDate -> (maybe (field "SettlType" full_enum_settltype_decoder)) >>= (fun f_BidCompReqGrp_SettlType -> (maybe (field "NetGrossInd" full_enum_netgrossind_decoder)) >>= (fun f_BidCompReqGrp_NetGrossInd -> (maybe (field "TradingSessionSubID" string_decoder)) >>= (fun f_BidCompReqGrp_TradingSessionSubID -> (maybe (field "TradingSessionID" string_decoder)) >>= (fun f_BidCompReqGrp_TradingSessionID -> (maybe (field "Side" full_enum_side_decoder)) >>= (fun f_BidCompReqGrp_Side -> (maybe (field "ListID" string_decoder)) >>= (fun f_BidCompReqGrp_ListID -> (maybe (field "NoBidComponents" int_decoder)) >>= (fun f_BidCompReqGrp_NoBidComponents -> succeed {
        f_BidCompReqGrp_NoBidComponents = f_BidCompReqGrp_NoBidComponents;
        f_BidCompReqGrp_ListID = f_BidCompReqGrp_ListID;
        f_BidCompReqGrp_Side = f_BidCompReqGrp_Side;
        f_BidCompReqGrp_TradingSessionID = f_BidCompReqGrp_TradingSessionID;
        f_BidCompReqGrp_TradingSessionSubID = f_BidCompReqGrp_TradingSessionSubID;
        f_BidCompReqGrp_NetGrossInd = f_BidCompReqGrp_NetGrossInd;
        f_BidCompReqGrp_SettlType = f_BidCompReqGrp_SettlType;
        f_BidCompReqGrp_SettlDate = f_BidCompReqGrp_SettlDate;
        f_BidCompReqGrp_Account = f_BidCompReqGrp_Account;
        f_BidCompReqGrp_AcctIDSource = f_BidCompReqGrp_AcctIDSource
    }
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
;;

let full_rg_bidcompreqgrp_decoder  : fix_rg_bidcompreqgrp decoder =
    list full_rg_inner_BidCompReqGrp_decoder
;;

let full_rg_inner_CompIDStatGrp_decoder  : fix_rg_inner_compidstatgrp decoder =
    (maybe (field "StatusText" string_decoder)) >>= (fun f_CompIDStatGrp_StatusText -> (maybe (field "StatusValue" full_enum_statusvalue_decoder)) >>= (fun f_CompIDStatGrp_StatusValue -> (maybe (field "DeskID" string_decoder)) >>= (fun f_CompIDStatGrp_DeskID -> (maybe (field "LocationID" string_decoder)) >>= (fun f_CompIDStatGrp_LocationID -> (maybe (field "RefSubID" string_decoder)) >>= (fun f_CompIDStatGrp_RefSubID -> (maybe (field "RefCompID" string_decoder)) >>= (fun f_CompIDStatGrp_RefCompID -> (maybe (field "NoCompIDs" int_decoder)) >>= (fun f_CompIDStatGrp_NoCompIDs -> succeed {
        f_CompIDStatGrp_NoCompIDs = f_CompIDStatGrp_NoCompIDs;
        f_CompIDStatGrp_RefCompID = f_CompIDStatGrp_RefCompID;
        f_CompIDStatGrp_RefSubID = f_CompIDStatGrp_RefSubID;
        f_CompIDStatGrp_LocationID = f_CompIDStatGrp_LocationID;
        f_CompIDStatGrp_DeskID = f_CompIDStatGrp_DeskID;
        f_CompIDStatGrp_StatusValue = f_CompIDStatGrp_StatusValue;
        f_CompIDStatGrp_StatusText = f_CompIDStatGrp_StatusText
    }
    )
    )
    )
    )
    )
    )
    )
;;

let full_rg_compidstatgrp_decoder  : fix_rg_compidstatgrp decoder =
    list full_rg_inner_CompIDStatGrp_decoder
;;

let full_rg_inner_AllocAckGrp_decoder  : fix_rg_inner_allocackgrp decoder =
    (maybe (field "EncodedAllocText" string_decoder)) >>= (fun f_AllocAckGrp_EncodedAllocText -> (maybe (field "EncodedAllocTextLen" int_decoder)) >>= (fun f_AllocAckGrp_EncodedAllocTextLen -> (maybe (field "AllocText" string_decoder)) >>= (fun f_AllocAckGrp_AllocText -> (maybe (field "IndividualAllocRejCode" int_decoder)) >>= (fun f_AllocAckGrp_IndividualAllocRejCode -> (maybe (field "IndividualAllocID" string_decoder)) >>= (fun f_AllocAckGrp_IndividualAllocID -> (maybe (field "AllocPrice" float_6_decoder)) >>= (fun f_AllocAckGrp_AllocPrice -> (maybe (field "AllocAcctIDSource" int_decoder)) >>= (fun f_AllocAckGrp_AllocAcctIDSource -> (maybe (field "AllocAccount" string_decoder)) >>= (fun f_AllocAckGrp_AllocAccount -> (maybe (field "NoAllocs" int_decoder)) >>= (fun f_AllocAckGrp_NoAllocs -> succeed {
        f_AllocAckGrp_NoAllocs = f_AllocAckGrp_NoAllocs;
        f_AllocAckGrp_AllocAccount = f_AllocAckGrp_AllocAccount;
        f_AllocAckGrp_AllocAcctIDSource = f_AllocAckGrp_AllocAcctIDSource;
        f_AllocAckGrp_AllocPrice = f_AllocAckGrp_AllocPrice;
        f_AllocAckGrp_IndividualAllocID = f_AllocAckGrp_IndividualAllocID;
        f_AllocAckGrp_IndividualAllocRejCode = f_AllocAckGrp_IndividualAllocRejCode;
        f_AllocAckGrp_AllocText = f_AllocAckGrp_AllocText;
        f_AllocAckGrp_EncodedAllocTextLen = f_AllocAckGrp_EncodedAllocTextLen;
        f_AllocAckGrp_EncodedAllocText = f_AllocAckGrp_EncodedAllocText
    }
    )
    )
    )
    )
    )
    )
    )
    )
    )
;;

let full_rg_allocackgrp_decoder  : fix_rg_allocackgrp decoder =
    list full_rg_inner_AllocAckGrp_decoder
;;

let full_rg_inner_ClrInstGrp_decoder  : fix_rg_inner_clrinstgrp decoder =
    (maybe (field "ClearingInstruction" full_enum_clearinginstruction_decoder)) >>= (fun f_ClrInstGrp_ClearingInstruction -> (maybe (field "NoClearingInstructions" int_decoder)) >>= (fun f_ClrInstGrp_NoClearingInstructions -> succeed {
        f_ClrInstGrp_NoClearingInstructions = f_ClrInstGrp_NoClearingInstructions;
        f_ClrInstGrp_ClearingInstruction = f_ClrInstGrp_ClearingInstruction
    }
    )
    )
;;

let full_rg_clrinstgrp_decoder  : fix_rg_clrinstgrp decoder =
    list full_rg_inner_ClrInstGrp_decoder
;;

let full_rg_inner_SettlPtysSubGrp_decoder  : fix_rg_inner_settlptyssubgrp decoder =
    (maybe (field "SettlPartySubIDType" int_decoder)) >>= (fun f_SettlPtysSubGrp_SettlPartySubIDType -> (maybe (field "SettlPartySubID" string_decoder)) >>= (fun f_SettlPtysSubGrp_SettlPartySubID -> (maybe (field "NoSettlPartySubIDs" int_decoder)) >>= (fun f_SettlPtysSubGrp_NoSettlPartySubIDs -> succeed {
        f_SettlPtysSubGrp_NoSettlPartySubIDs = f_SettlPtysSubGrp_NoSettlPartySubIDs;
        f_SettlPtysSubGrp_SettlPartySubID = f_SettlPtysSubGrp_SettlPartySubID;
        f_SettlPtysSubGrp_SettlPartySubIDType = f_SettlPtysSubGrp_SettlPartySubIDType
    }
    )
    )
    )
;;

let full_rg_settlptyssubgrp_decoder  : fix_rg_settlptyssubgrp decoder =
    list full_rg_inner_SettlPtysSubGrp_decoder
;;

let full_rg_inner_Stipulations_decoder  : fix_rg_inner_stipulations decoder =
    (maybe (field "StipulationValue" string_decoder)) >>= (fun f_Stipulations_StipulationValue -> (maybe (field "StipulationType" full_enum_stipulationtype_decoder)) >>= (fun f_Stipulations_StipulationType -> (maybe (field "NoStipulations" int_decoder)) >>= (fun f_Stipulations_NoStipulations -> succeed {
        f_Stipulations_NoStipulations = f_Stipulations_NoStipulations;
        f_Stipulations_StipulationType = f_Stipulations_StipulationType;
        f_Stipulations_StipulationValue = f_Stipulations_StipulationValue
    }
    )
    )
    )
;;

let full_rg_stipulations_decoder  : fix_rg_stipulations decoder =
    list full_rg_inner_Stipulations_decoder
;;

let full_rg_inner_OrdListStatGrp_decoder  : fix_rg_inner_ordliststatgrp decoder =
    (maybe (field "EncodedText" string_decoder)) >>= (fun f_OrdListStatGrp_EncodedText -> (maybe (field "EncodedTextLen" int_decoder)) >>= (fun f_OrdListStatGrp_EncodedTextLen -> (maybe (field "Text" string_decoder)) >>= (fun f_OrdListStatGrp_Text -> (maybe (field "OrdRejReason" full_enum_ordrejreason_decoder)) >>= (fun f_OrdListStatGrp_OrdRejReason -> (maybe (field "AvgPx" float_6_decoder)) >>= (fun f_OrdListStatGrp_AvgPx -> (maybe (field "CxlQty" float_6_decoder)) >>= (fun f_OrdListStatGrp_CxlQty -> (maybe (field "LeavesQty" float_6_decoder)) >>= (fun f_OrdListStatGrp_LeavesQty -> (maybe (field "WorkingIndicator" full_enum_workingindicator_decoder)) >>= (fun f_OrdListStatGrp_WorkingIndicator -> (maybe (field "OrdStatus" full_enum_ordstatus_decoder)) >>= (fun f_OrdListStatGrp_OrdStatus -> (maybe (field "CumQty" float_6_decoder)) >>= (fun f_OrdListStatGrp_CumQty -> (maybe (field "SecondaryClOrdID" string_decoder)) >>= (fun f_OrdListStatGrp_SecondaryClOrdID -> (maybe (field "ClOrdID" string_decoder)) >>= (fun f_OrdListStatGrp_ClOrdID -> (maybe (field "NoOrders" int_decoder)) >>= (fun f_OrdListStatGrp_NoOrders -> succeed {
        f_OrdListStatGrp_NoOrders = f_OrdListStatGrp_NoOrders;
        f_OrdListStatGrp_ClOrdID = f_OrdListStatGrp_ClOrdID;
        f_OrdListStatGrp_SecondaryClOrdID = f_OrdListStatGrp_SecondaryClOrdID;
        f_OrdListStatGrp_CumQty = f_OrdListStatGrp_CumQty;
        f_OrdListStatGrp_OrdStatus = f_OrdListStatGrp_OrdStatus;
        f_OrdListStatGrp_WorkingIndicator = f_OrdListStatGrp_WorkingIndicator;
        f_OrdListStatGrp_LeavesQty = f_OrdListStatGrp_LeavesQty;
        f_OrdListStatGrp_CxlQty = f_OrdListStatGrp_CxlQty;
        f_OrdListStatGrp_AvgPx = f_OrdListStatGrp_AvgPx;
        f_OrdListStatGrp_OrdRejReason = f_OrdListStatGrp_OrdRejReason;
        f_OrdListStatGrp_Text = f_OrdListStatGrp_Text;
        f_OrdListStatGrp_EncodedTextLen = f_OrdListStatGrp_EncodedTextLen;
        f_OrdListStatGrp_EncodedText = f_OrdListStatGrp_EncodedText
    }
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
;;

let full_rg_ordliststatgrp_decoder  : fix_rg_ordliststatgrp decoder =
    list full_rg_inner_OrdListStatGrp_decoder
;;

let full_rg_inner_NstdPtys2SubGrp_decoder  : fix_rg_inner_nstdptys2subgrp decoder =
    (maybe (field "Nested2PartySubIDType" int_decoder)) >>= (fun f_NstdPtys2SubGrp_Nested2PartySubIDType -> (maybe (field "Nested2PartySubID" string_decoder)) >>= (fun f_NstdPtys2SubGrp_Nested2PartySubID -> (maybe (field "NoNested2PartySubIDs" int_decoder)) >>= (fun f_NstdPtys2SubGrp_NoNested2PartySubIDs -> succeed {
        f_NstdPtys2SubGrp_NoNested2PartySubIDs = f_NstdPtys2SubGrp_NoNested2PartySubIDs;
        f_NstdPtys2SubGrp_Nested2PartySubID = f_NstdPtys2SubGrp_Nested2PartySubID;
        f_NstdPtys2SubGrp_Nested2PartySubIDType = f_NstdPtys2SubGrp_Nested2PartySubIDType
    }
    )
    )
    )
;;

let full_rg_nstdptys2subgrp_decoder  : fix_rg_nstdptys2subgrp decoder =
    list full_rg_inner_NstdPtys2SubGrp_decoder
;;

let full_record_peginstructions_decoder  : fix_peginstructions decoder =
    (maybe (field "PegScope" full_enum_pegscope_decoder)) >>= (fun f_PegInstructions_PegScope -> (maybe (field "PegRoundDirection" full_enum_pegrounddirection_decoder)) >>= (fun f_PegInstructions_PegRoundDirection -> (maybe (field "PegLimitType" full_enum_peglimittype_decoder)) >>= (fun f_PegInstructions_PegLimitType -> (maybe (field "PegOffsetType" full_enum_pegoffsettype_decoder)) >>= (fun f_PegInstructions_PegOffsetType -> (maybe (field "PegMoveType" full_enum_pegmovetype_decoder)) >>= (fun f_PegInstructions_PegMoveType -> (maybe (field "PegOffsetValue" float_decoder)) >>= (fun f_PegInstructions_PegOffsetValue -> succeed {
        f_PegInstructions_PegOffsetValue = f_PegInstructions_PegOffsetValue;
        f_PegInstructions_PegMoveType = f_PegInstructions_PegMoveType;
        f_PegInstructions_PegOffsetType = f_PegInstructions_PegOffsetType;
        f_PegInstructions_PegLimitType = f_PegInstructions_PegLimitType;
        f_PegInstructions_PegRoundDirection = f_PegInstructions_PegRoundDirection;
        f_PegInstructions_PegScope = f_PegInstructions_PegScope
    }
    )
    )
    )
    )
    )
    )
;;

let full_rg_inner_MiscFeesGrp_decoder  : fix_rg_inner_miscfeesgrp decoder =
    (maybe (field "MiscFeeBasis" full_enum_miscfeebasis_decoder)) >>= (fun f_MiscFeesGrp_MiscFeeBasis -> (maybe (field "MiscFeeType" full_enum_miscfeetype_decoder)) >>= (fun f_MiscFeesGrp_MiscFeeType -> (maybe (field "MiscFeeCurr" full_enum_currency_decoder)) >>= (fun f_MiscFeesGrp_MiscFeeCurr -> (maybe (field "MiscFeeAmt" float_6_decoder)) >>= (fun f_MiscFeesGrp_MiscFeeAmt -> (maybe (field "NoMiscFees" int_decoder)) >>= (fun f_MiscFeesGrp_NoMiscFees -> succeed {
        f_MiscFeesGrp_NoMiscFees = f_MiscFeesGrp_NoMiscFees;
        f_MiscFeesGrp_MiscFeeAmt = f_MiscFeesGrp_MiscFeeAmt;
        f_MiscFeesGrp_MiscFeeCurr = f_MiscFeesGrp_MiscFeeCurr;
        f_MiscFeesGrp_MiscFeeType = f_MiscFeesGrp_MiscFeeType;
        f_MiscFeesGrp_MiscFeeBasis = f_MiscFeesGrp_MiscFeeBasis
    }
    )
    )
    )
    )
    )
;;

let full_rg_miscfeesgrp_decoder  : fix_rg_miscfeesgrp decoder =
    list full_rg_inner_MiscFeesGrp_decoder
;;

let full_rg_inner_TrdCapDtGrp_decoder  : fix_rg_inner_trdcapdtgrp decoder =
    (maybe (field "TransactTime" utctimestamp_milli_decoder)) >>= (fun f_TrdCapDtGrp_TransactTime -> (maybe (field "TradeDate" localmktdate_decoder)) >>= (fun f_TrdCapDtGrp_TradeDate -> (maybe (field "NoDates" int_decoder)) >>= (fun f_TrdCapDtGrp_NoDates -> succeed {
        f_TrdCapDtGrp_NoDates = f_TrdCapDtGrp_NoDates;
        f_TrdCapDtGrp_TradeDate = f_TrdCapDtGrp_TradeDate;
        f_TrdCapDtGrp_TransactTime = f_TrdCapDtGrp_TransactTime
    }
    )
    )
    )
;;

let full_rg_trdcapdtgrp_decoder  : fix_rg_trdcapdtgrp decoder =
    list full_rg_inner_TrdCapDtGrp_decoder
;;

let full_rg_inner_CpctyConfGrp_decoder  : fix_rg_inner_cpctyconfgrp decoder =
    (maybe (field "OrderCapacityQty" float_6_decoder)) >>= (fun f_CpctyConfGrp_OrderCapacityQty -> (maybe (field "OrderRestrictions" full_enum_orderrestrictions_decoder)) >>= (fun f_CpctyConfGrp_OrderRestrictions -> (maybe (field "OrderCapacity" full_enum_ordercapacity_decoder)) >>= (fun f_CpctyConfGrp_OrderCapacity -> (maybe (field "NoCapacities" int_decoder)) >>= (fun f_CpctyConfGrp_NoCapacities -> succeed {
        f_CpctyConfGrp_NoCapacities = f_CpctyConfGrp_NoCapacities;
        f_CpctyConfGrp_OrderCapacity = f_CpctyConfGrp_OrderCapacity;
        f_CpctyConfGrp_OrderRestrictions = f_CpctyConfGrp_OrderRestrictions;
        f_CpctyConfGrp_OrderCapacityQty = f_CpctyConfGrp_OrderCapacityQty
    }
    )
    )
    )
    )
;;

let full_rg_cpctyconfgrp_decoder  : fix_rg_cpctyconfgrp decoder =
    list full_rg_inner_CpctyConfGrp_decoder
;;

let full_rg_inner_AttrbGrp_decoder  : fix_rg_inner_attrbgrp decoder =
    (maybe (field "InstrAttribValue" string_decoder)) >>= (fun f_AttrbGrp_InstrAttribValue -> (maybe (field "InstrAttribType" full_enum_instrattribtype_decoder)) >>= (fun f_AttrbGrp_InstrAttribType -> (maybe (field "NoInstrAttrib" int_decoder)) >>= (fun f_AttrbGrp_NoInstrAttrib -> succeed {
        f_AttrbGrp_NoInstrAttrib = f_AttrbGrp_NoInstrAttrib;
        f_AttrbGrp_InstrAttribType = f_AttrbGrp_InstrAttribType;
        f_AttrbGrp_InstrAttribValue = f_AttrbGrp_InstrAttribValue
    }
    )
    )
    )
;;

let full_rg_attrbgrp_decoder  : fix_rg_attrbgrp decoder =
    list full_rg_inner_AttrbGrp_decoder
;;

let full_rg_inner_PtysSubGrp_decoder  : fix_rg_inner_ptyssubgrp decoder =
    (maybe (field "PartySubIDType" full_enum_partysubidtype_decoder)) >>= (fun f_PtysSubGrp_PartySubIDType -> (maybe (field "PartySubID" string_decoder)) >>= (fun f_PtysSubGrp_PartySubID -> (maybe (field "NoPartySubIDs" int_decoder)) >>= (fun f_PtysSubGrp_NoPartySubIDs -> succeed {
        f_PtysSubGrp_NoPartySubIDs = f_PtysSubGrp_NoPartySubIDs;
        f_PtysSubGrp_PartySubID = f_PtysSubGrp_PartySubID;
        f_PtysSubGrp_PartySubIDType = f_PtysSubGrp_PartySubIDType
    }
    )
    )
    )
;;

let full_rg_ptyssubgrp_decoder  : fix_rg_ptyssubgrp decoder =
    list full_rg_inner_PtysSubGrp_decoder
;;

let full_rg_inner_ContAmtGrp_decoder  : fix_rg_inner_contamtgrp decoder =
    (maybe (field "ContAmtCurr" full_enum_currency_decoder)) >>= (fun f_ContAmtGrp_ContAmtCurr -> (maybe (field "ContAmtValue" float_decoder)) >>= (fun f_ContAmtGrp_ContAmtValue -> (maybe (field "ContAmtType" full_enum_contamttype_decoder)) >>= (fun f_ContAmtGrp_ContAmtType -> (maybe (field "NoContAmts" int_decoder)) >>= (fun f_ContAmtGrp_NoContAmts -> succeed {
        f_ContAmtGrp_NoContAmts = f_ContAmtGrp_NoContAmts;
        f_ContAmtGrp_ContAmtType = f_ContAmtGrp_ContAmtType;
        f_ContAmtGrp_ContAmtValue = f_ContAmtGrp_ContAmtValue;
        f_ContAmtGrp_ContAmtCurr = f_ContAmtGrp_ContAmtCurr
    }
    )
    )
    )
    )
;;

let full_rg_contamtgrp_decoder  : fix_rg_contamtgrp decoder =
    list full_rg_inner_ContAmtGrp_decoder
;;

let full_rg_inner_MDReqGrp_decoder  : fix_rg_inner_mdreqgrp decoder =
    (maybe (field "MDEntryType" full_enum_mdentrytype_decoder)) >>= (fun f_MDReqGrp_MDEntryType -> (maybe (field "NoMDEntryTypes" int_decoder)) >>= (fun f_MDReqGrp_NoMDEntryTypes -> succeed {
        f_MDReqGrp_NoMDEntryTypes = f_MDReqGrp_NoMDEntryTypes;
        f_MDReqGrp_MDEntryType = f_MDReqGrp_MDEntryType
    }
    )
    )
;;

let full_rg_mdreqgrp_decoder  : fix_rg_mdreqgrp decoder =
    list full_rg_inner_MDReqGrp_decoder
;;

let full_rg_inner_SecAltIDGrp_decoder  : fix_rg_inner_secaltidgrp decoder =
    (maybe (field "SecurityAltIDSource" full_enum_securityidsource_decoder)) >>= (fun f_SecAltIDGrp_SecurityAltIDSource -> (maybe (field "SecurityAltID" string_decoder)) >>= (fun f_SecAltIDGrp_SecurityAltID -> (maybe (field "NoSecurityAltID" int_decoder)) >>= (fun f_SecAltIDGrp_NoSecurityAltID -> succeed {
        f_SecAltIDGrp_NoSecurityAltID = f_SecAltIDGrp_NoSecurityAltID;
        f_SecAltIDGrp_SecurityAltID = f_SecAltIDGrp_SecurityAltID;
        f_SecAltIDGrp_SecurityAltIDSource = f_SecAltIDGrp_SecurityAltIDSource
    }
    )
    )
    )
;;

let full_rg_secaltidgrp_decoder  : fix_rg_secaltidgrp decoder =
    list full_rg_inner_SecAltIDGrp_decoder
;;

let full_rg_inner_AffectedOrdGrp_decoder  : fix_rg_inner_affectedordgrp decoder =
    (maybe (field "AffectedSecondaryOrderID" string_decoder)) >>= (fun f_AffectedOrdGrp_AffectedSecondaryOrderID -> (maybe (field "AffectedOrderID" string_decoder)) >>= (fun f_AffectedOrdGrp_AffectedOrderID -> (maybe (field "OrigClOrdID" string_decoder)) >>= (fun f_AffectedOrdGrp_OrigClOrdID -> (maybe (field "NoAffectedOrders" int_decoder)) >>= (fun f_AffectedOrdGrp_NoAffectedOrders -> succeed {
        f_AffectedOrdGrp_NoAffectedOrders = f_AffectedOrdGrp_NoAffectedOrders;
        f_AffectedOrdGrp_OrigClOrdID = f_AffectedOrdGrp_OrigClOrdID;
        f_AffectedOrdGrp_AffectedOrderID = f_AffectedOrdGrp_AffectedOrderID;
        f_AffectedOrdGrp_AffectedSecondaryOrderID = f_AffectedOrdGrp_AffectedSecondaryOrderID
    }
    )
    )
    )
    )
;;

let full_rg_affectedordgrp_decoder  : fix_rg_affectedordgrp decoder =
    list full_rg_inner_AffectedOrdGrp_decoder
;;

let full_rg_inner_LegSecAltIDGrp_decoder  : fix_rg_inner_legsecaltidgrp decoder =
    (maybe (field "LegSecurityAltIDSource" full_enum_securityidsource_decoder)) >>= (fun f_LegSecAltIDGrp_LegSecurityAltIDSource -> (maybe (field "LegSecurityAltID" string_decoder)) >>= (fun f_LegSecAltIDGrp_LegSecurityAltID -> (maybe (field "NoLegSecurityAltID" int_decoder)) >>= (fun f_LegSecAltIDGrp_NoLegSecurityAltID -> succeed {
        f_LegSecAltIDGrp_NoLegSecurityAltID = f_LegSecAltIDGrp_NoLegSecurityAltID;
        f_LegSecAltIDGrp_LegSecurityAltID = f_LegSecAltIDGrp_LegSecurityAltID;
        f_LegSecAltIDGrp_LegSecurityAltIDSource = f_LegSecAltIDGrp_LegSecurityAltIDSource
    }
    )
    )
    )
;;

let full_rg_legsecaltidgrp_decoder  : fix_rg_legsecaltidgrp decoder =
    list full_rg_inner_LegSecAltIDGrp_decoder
;;

let full_rg_inner_IOIQualGrp_decoder  : fix_rg_inner_ioiqualgrp decoder =
    (maybe (field "IOIQualifier" full_enum_ioiqualifier_decoder)) >>= (fun f_IOIQualGrp_IOIQualifier -> (maybe (field "NoIOIQualifiers" int_decoder)) >>= (fun f_IOIQualGrp_NoIOIQualifiers -> succeed {
        f_IOIQualGrp_NoIOIQualifiers = f_IOIQualGrp_NoIOIQualifiers;
        f_IOIQualGrp_IOIQualifier = f_IOIQualGrp_IOIQualifier
    }
    )
    )
;;

let full_rg_ioiqualgrp_decoder  : fix_rg_ioiqualgrp decoder =
    list full_rg_inner_IOIQualGrp_decoder
;;

let full_record_legbenchmarkcurvedata_decoder  : fix_legbenchmarkcurvedata decoder =
    (maybe (field "LegBenchmarkPriceType" int_decoder)) >>= (fun f_LegBenchmarkCurveData_LegBenchmarkPriceType -> (maybe (field "LegBenchmarkPrice" float_6_decoder)) >>= (fun f_LegBenchmarkCurveData_LegBenchmarkPrice -> (maybe (field "LegBenchmarkCurvePoint" string_decoder)) >>= (fun f_LegBenchmarkCurveData_LegBenchmarkCurvePoint -> (maybe (field "LegBenchmarkCurveName" string_decoder)) >>= (fun f_LegBenchmarkCurveData_LegBenchmarkCurveName -> (maybe (field "LegBenchmarkCurveCurrency" full_enum_currency_decoder)) >>= (fun f_LegBenchmarkCurveData_LegBenchmarkCurveCurrency -> succeed {
        f_LegBenchmarkCurveData_LegBenchmarkCurveCurrency = f_LegBenchmarkCurveData_LegBenchmarkCurveCurrency;
        f_LegBenchmarkCurveData_LegBenchmarkCurveName = f_LegBenchmarkCurveData_LegBenchmarkCurveName;
        f_LegBenchmarkCurveData_LegBenchmarkCurvePoint = f_LegBenchmarkCurveData_LegBenchmarkCurvePoint;
        f_LegBenchmarkCurveData_LegBenchmarkPrice = f_LegBenchmarkCurveData_LegBenchmarkPrice;
        f_LegBenchmarkCurveData_LegBenchmarkPriceType = f_LegBenchmarkCurveData_LegBenchmarkPriceType
    }
    )
    )
    )
    )
    )
;;

let full_rg_inner_QuotQualGrp_decoder  : fix_rg_inner_quotqualgrp decoder =
    (maybe (field "QuoteQualifier" char_decoder)) >>= (fun f_QuotQualGrp_QuoteQualifier -> (maybe (field "NoQuoteQualifiers" int_decoder)) >>= (fun f_QuotQualGrp_NoQuoteQualifiers -> succeed {
        f_QuotQualGrp_NoQuoteQualifiers = f_QuotQualGrp_NoQuoteQualifiers;
        f_QuotQualGrp_QuoteQualifier = f_QuotQualGrp_QuoteQualifier
    }
    )
    )
;;

let full_rg_quotqualgrp_decoder  : fix_rg_quotqualgrp decoder =
    list full_rg_inner_QuotQualGrp_decoder
;;

let full_rg_inner_ContraGrp_decoder  : fix_rg_inner_contragrp decoder =
    (maybe (field "ContraLegRefID" string_decoder)) >>= (fun f_ContraGrp_ContraLegRefID -> (maybe (field "ContraTradeTime" utctimestamp_milli_decoder)) >>= (fun f_ContraGrp_ContraTradeTime -> (maybe (field "ContraTradeQty" float_6_decoder)) >>= (fun f_ContraGrp_ContraTradeQty -> (maybe (field "ContraTrader" string_decoder)) >>= (fun f_ContraGrp_ContraTrader -> (maybe (field "ContraBroker" string_decoder)) >>= (fun f_ContraGrp_ContraBroker -> (maybe (field "NoContraBrokers" int_decoder)) >>= (fun f_ContraGrp_NoContraBrokers -> succeed {
        f_ContraGrp_NoContraBrokers = f_ContraGrp_NoContraBrokers;
        f_ContraGrp_ContraBroker = f_ContraGrp_ContraBroker;
        f_ContraGrp_ContraTrader = f_ContraGrp_ContraTrader;
        f_ContraGrp_ContraTradeQty = f_ContraGrp_ContraTradeQty;
        f_ContraGrp_ContraTradeTime = f_ContraGrp_ContraTradeTime;
        f_ContraGrp_ContraLegRefID = f_ContraGrp_ContraLegRefID
    }
    )
    )
    )
    )
    )
    )
;;

let full_rg_contragrp_decoder  : fix_rg_contragrp decoder =
    list full_rg_inner_ContraGrp_decoder
;;

let full_record_instrumentleg_decoder  : fix_instrumentleg decoder =
    (maybe (field "LegInterestAccrualDate" localmktdate_decoder)) >>= (fun f_InstrumentLeg_LegInterestAccrualDate -> (maybe (field "LegContractSettlMonth" monthyear_decoder)) >>= (fun f_InstrumentLeg_LegContractSettlMonth -> (maybe (field "LegDatedDate" localmktdate_decoder)) >>= (fun f_InstrumentLeg_LegDatedDate -> (maybe (field "LegPool" string_decoder)) >>= (fun f_InstrumentLeg_LegPool -> (maybe (field "LegCurrency" full_enum_currency_decoder)) >>= (fun f_InstrumentLeg_LegCurrency -> (maybe (field "LegSide" char_decoder)) >>= (fun f_InstrumentLeg_LegSide -> (maybe (field "LegRatioQty" float_decoder)) >>= (fun f_InstrumentLeg_LegRatioQty -> (maybe (field "EncodedLegSecurityDesc" string_decoder)) >>= (fun f_InstrumentLeg_EncodedLegSecurityDesc -> (maybe (field "EncodedLegSecurityDescLen" int_decoder)) >>= (fun f_InstrumentLeg_EncodedLegSecurityDescLen -> (maybe (field "LegSecurityDesc" string_decoder)) >>= (fun f_InstrumentLeg_LegSecurityDesc -> (maybe (field "EncodedLegIssuer" string_decoder)) >>= (fun f_InstrumentLeg_EncodedLegIssuer -> (maybe (field "EncodedLegIssuerLen" int_decoder)) >>= (fun f_InstrumentLeg_EncodedLegIssuerLen -> (maybe (field "LegIssuer" string_decoder)) >>= (fun f_InstrumentLeg_LegIssuer -> (maybe (field "LegSecurityExchange" full_enum_exchange_decoder)) >>= (fun f_InstrumentLeg_LegSecurityExchange -> (maybe (field "LegCouponRate" float_6_decoder)) >>= (fun f_InstrumentLeg_LegCouponRate -> (maybe (field "LegContractMultiplier" float_decoder)) >>= (fun f_InstrumentLeg_LegContractMultiplier -> (maybe (field "LegOptAttribute" char_decoder)) >>= (fun f_InstrumentLeg_LegOptAttribute -> (maybe (field "LegStrikeCurrency" full_enum_currency_decoder)) >>= (fun f_InstrumentLeg_LegStrikeCurrency -> (maybe (field "LegStrikePrice" float_6_decoder)) >>= (fun f_InstrumentLeg_LegStrikePrice -> (maybe (field "LegRedemptionDate" localmktdate_decoder)) >>= (fun f_InstrumentLeg_LegRedemptionDate -> (maybe (field "LegLocaleOfIssue" string_decoder)) >>= (fun f_InstrumentLeg_LegLocaleOfIssue -> (maybe (field "LegStateOrProvinceOfIssue" string_decoder)) >>= (fun f_InstrumentLeg_LegStateOrProvinceOfIssue -> (maybe (field "LegCountryOfIssue" full_enum_country_decoder)) >>= (fun f_InstrumentLeg_LegCountryOfIssue -> (maybe (field "LegInstrRegistry" string_decoder)) >>= (fun f_InstrumentLeg_LegInstrRegistry -> (maybe (field "LegCreditRating" string_decoder)) >>= (fun f_InstrumentLeg_LegCreditRating -> (maybe (field "LegFactor" float_decoder)) >>= (fun f_InstrumentLeg_LegFactor -> (maybe (field "LegRepurchaseRate" float_6_decoder)) >>= (fun f_InstrumentLeg_LegRepurchaseRate -> (maybe (field "LegRepurchaseTerm" int_decoder)) >>= (fun f_InstrumentLeg_LegRepurchaseTerm -> (maybe (field "LegRepoCollateralSecurityType" string_decoder)) >>= (fun f_InstrumentLeg_LegRepoCollateralSecurityType -> (maybe (field "LegIssueDate" localmktdate_decoder)) >>= (fun f_InstrumentLeg_LegIssueDate -> (maybe (field "LegCouponPaymentDate" localmktdate_decoder)) >>= (fun f_InstrumentLeg_LegCouponPaymentDate -> (maybe (field "LegMaturityDate" localmktdate_decoder)) >>= (fun f_InstrumentLeg_LegMaturityDate -> (maybe (field "LegMaturityMonthYear" monthyear_decoder)) >>= (fun f_InstrumentLeg_LegMaturityMonthYear -> (maybe (field "LegSecuritySubType" string_decoder)) >>= (fun f_InstrumentLeg_LegSecuritySubType -> (maybe (field "LegSecurityType" string_decoder)) >>= (fun f_InstrumentLeg_LegSecurityType -> (maybe (field "LegCFICode" string_decoder)) >>= (fun f_InstrumentLeg_LegCFICode -> (maybe (field "LegProduct" int_decoder)) >>= (fun f_InstrumentLeg_LegProduct -> (field "LegSecAltIDGrp" full_rg_legsecaltidgrp_decoder) >>= (fun f_InstrumentLeg_LegSecAltIDGrp -> (maybe (field "LegSecurityIDSource" full_enum_securityidsource_decoder)) >>= (fun f_InstrumentLeg_LegSecurityIDSource -> (maybe (field "LegSecurityID" string_decoder)) >>= (fun f_InstrumentLeg_LegSecurityID -> (maybe (field "LegSymbolSfx" string_decoder)) >>= (fun f_InstrumentLeg_LegSymbolSfx -> (maybe (field "LegSymbol" string_decoder)) >>= (fun f_InstrumentLeg_LegSymbol -> succeed {
        f_InstrumentLeg_LegSymbol = f_InstrumentLeg_LegSymbol;
        f_InstrumentLeg_LegSymbolSfx = f_InstrumentLeg_LegSymbolSfx;
        f_InstrumentLeg_LegSecurityID = f_InstrumentLeg_LegSecurityID;
        f_InstrumentLeg_LegSecurityIDSource = f_InstrumentLeg_LegSecurityIDSource;
        f_InstrumentLeg_LegSecAltIDGrp = f_InstrumentLeg_LegSecAltIDGrp;
        f_InstrumentLeg_LegProduct = f_InstrumentLeg_LegProduct;
        f_InstrumentLeg_LegCFICode = f_InstrumentLeg_LegCFICode;
        f_InstrumentLeg_LegSecurityType = f_InstrumentLeg_LegSecurityType;
        f_InstrumentLeg_LegSecuritySubType = f_InstrumentLeg_LegSecuritySubType;
        f_InstrumentLeg_LegMaturityMonthYear = f_InstrumentLeg_LegMaturityMonthYear;
        f_InstrumentLeg_LegMaturityDate = f_InstrumentLeg_LegMaturityDate;
        f_InstrumentLeg_LegCouponPaymentDate = f_InstrumentLeg_LegCouponPaymentDate;
        f_InstrumentLeg_LegIssueDate = f_InstrumentLeg_LegIssueDate;
        f_InstrumentLeg_LegRepoCollateralSecurityType = f_InstrumentLeg_LegRepoCollateralSecurityType;
        f_InstrumentLeg_LegRepurchaseTerm = f_InstrumentLeg_LegRepurchaseTerm;
        f_InstrumentLeg_LegRepurchaseRate = f_InstrumentLeg_LegRepurchaseRate;
        f_InstrumentLeg_LegFactor = f_InstrumentLeg_LegFactor;
        f_InstrumentLeg_LegCreditRating = f_InstrumentLeg_LegCreditRating;
        f_InstrumentLeg_LegInstrRegistry = f_InstrumentLeg_LegInstrRegistry;
        f_InstrumentLeg_LegCountryOfIssue = f_InstrumentLeg_LegCountryOfIssue;
        f_InstrumentLeg_LegStateOrProvinceOfIssue = f_InstrumentLeg_LegStateOrProvinceOfIssue;
        f_InstrumentLeg_LegLocaleOfIssue = f_InstrumentLeg_LegLocaleOfIssue;
        f_InstrumentLeg_LegRedemptionDate = f_InstrumentLeg_LegRedemptionDate;
        f_InstrumentLeg_LegStrikePrice = f_InstrumentLeg_LegStrikePrice;
        f_InstrumentLeg_LegStrikeCurrency = f_InstrumentLeg_LegStrikeCurrency;
        f_InstrumentLeg_LegOptAttribute = f_InstrumentLeg_LegOptAttribute;
        f_InstrumentLeg_LegContractMultiplier = f_InstrumentLeg_LegContractMultiplier;
        f_InstrumentLeg_LegCouponRate = f_InstrumentLeg_LegCouponRate;
        f_InstrumentLeg_LegSecurityExchange = f_InstrumentLeg_LegSecurityExchange;
        f_InstrumentLeg_LegIssuer = f_InstrumentLeg_LegIssuer;
        f_InstrumentLeg_EncodedLegIssuerLen = f_InstrumentLeg_EncodedLegIssuerLen;
        f_InstrumentLeg_EncodedLegIssuer = f_InstrumentLeg_EncodedLegIssuer;
        f_InstrumentLeg_LegSecurityDesc = f_InstrumentLeg_LegSecurityDesc;
        f_InstrumentLeg_EncodedLegSecurityDescLen = f_InstrumentLeg_EncodedLegSecurityDescLen;
        f_InstrumentLeg_EncodedLegSecurityDesc = f_InstrumentLeg_EncodedLegSecurityDesc;
        f_InstrumentLeg_LegRatioQty = f_InstrumentLeg_LegRatioQty;
        f_InstrumentLeg_LegSide = f_InstrumentLeg_LegSide;
        f_InstrumentLeg_LegCurrency = f_InstrumentLeg_LegCurrency;
        f_InstrumentLeg_LegPool = f_InstrumentLeg_LegPool;
        f_InstrumentLeg_LegDatedDate = f_InstrumentLeg_LegDatedDate;
        f_InstrumentLeg_LegContractSettlMonth = f_InstrumentLeg_LegContractSettlMonth;
        f_InstrumentLeg_LegInterestAccrualDate = f_InstrumentLeg_LegInterestAccrualDate
    }
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
;;

let full_rg_inner_Parties_decoder  : fix_rg_inner_parties decoder =
    (field "PtysSubGrp" full_rg_ptyssubgrp_decoder) >>= (fun f_Parties_PtysSubGrp -> (maybe (field "PartyRole" full_enum_partyrole_decoder)) >>= (fun f_Parties_PartyRole -> (maybe (field "PartyIDSource" full_enum_partyidsource_decoder)) >>= (fun f_Parties_PartyIDSource -> (maybe (field "PartyID" string_decoder)) >>= (fun f_Parties_PartyID -> (maybe (field "NoPartyIDs" int_decoder)) >>= (fun f_Parties_NoPartyIDs -> succeed {
        f_Parties_NoPartyIDs = f_Parties_NoPartyIDs;
        f_Parties_PartyID = f_Parties_PartyID;
        f_Parties_PartyIDSource = f_Parties_PartyIDSource;
        f_Parties_PartyRole = f_Parties_PartyRole;
        f_Parties_PtysSubGrp = f_Parties_PtysSubGrp
    }
    )
    )
    )
    )
    )
;;

let full_rg_parties_decoder  : fix_rg_parties decoder =
    list full_rg_inner_Parties_decoder
;;

let full_record_instrumentextension_decoder  : fix_instrumentextension decoder =
    (field "AttrbGrp" full_rg_attrbgrp_decoder) >>= (fun f_InstrumentExtension_AttrbGrp -> (maybe (field "PctAtRisk" float_6_decoder)) >>= (fun f_InstrumentExtension_PctAtRisk -> (maybe (field "DeliveryForm" full_enum_deliveryform_decoder)) >>= (fun f_InstrumentExtension_DeliveryForm -> succeed {
        f_InstrumentExtension_DeliveryForm = f_InstrumentExtension_DeliveryForm;
        f_InstrumentExtension_PctAtRisk = f_InstrumentExtension_PctAtRisk;
        f_InstrumentExtension_AttrbGrp = f_InstrumentExtension_AttrbGrp
    }
    )
    )
    )
;;

let full_rg_inner_NestedParties2_decoder  : fix_rg_inner_nestedparties2 decoder =
    (field "NstdPtys2SubGrp" full_rg_nstdptys2subgrp_decoder) >>= (fun f_NestedParties2_NstdPtys2SubGrp -> (maybe (field "Nested2PartyRole" int_decoder)) >>= (fun f_NestedParties2_Nested2PartyRole -> (maybe (field "Nested2PartyIDSource" char_decoder)) >>= (fun f_NestedParties2_Nested2PartyIDSource -> (maybe (field "Nested2PartyID" string_decoder)) >>= (fun f_NestedParties2_Nested2PartyID -> (maybe (field "NoNested2PartyIDs" int_decoder)) >>= (fun f_NestedParties2_NoNested2PartyIDs -> succeed {
        f_NestedParties2_NoNested2PartyIDs = f_NestedParties2_NoNested2PartyIDs;
        f_NestedParties2_Nested2PartyID = f_NestedParties2_Nested2PartyID;
        f_NestedParties2_Nested2PartyIDSource = f_NestedParties2_Nested2PartyIDSource;
        f_NestedParties2_Nested2PartyRole = f_NestedParties2_Nested2PartyRole;
        f_NestedParties2_NstdPtys2SubGrp = f_NestedParties2_NstdPtys2SubGrp
    }
    )
    )
    )
    )
    )
;;

let full_rg_nestedparties2_decoder  : fix_rg_nestedparties2 decoder =
    list full_rg_inner_NestedParties2_decoder
;;

let full_rg_inner_SettlParties_decoder  : fix_rg_inner_settlparties decoder =
    (field "SettlPtysSubGrp" full_rg_settlptyssubgrp_decoder) >>= (fun f_SettlParties_SettlPtysSubGrp -> (maybe (field "SettlPartyRole" int_decoder)) >>= (fun f_SettlParties_SettlPartyRole -> (maybe (field "SettlPartyIDSource" char_decoder)) >>= (fun f_SettlParties_SettlPartyIDSource -> (maybe (field "SettlPartyID" string_decoder)) >>= (fun f_SettlParties_SettlPartyID -> (maybe (field "NoSettlPartyIDs" int_decoder)) >>= (fun f_SettlParties_NoSettlPartyIDs -> succeed {
        f_SettlParties_NoSettlPartyIDs = f_SettlParties_NoSettlPartyIDs;
        f_SettlParties_SettlPartyID = f_SettlParties_SettlPartyID;
        f_SettlParties_SettlPartyIDSource = f_SettlParties_SettlPartyIDSource;
        f_SettlParties_SettlPartyRole = f_SettlParties_SettlPartyRole;
        f_SettlParties_SettlPtysSubGrp = f_SettlParties_SettlPtysSubGrp
    }
    )
    )
    )
    )
    )
;;

let full_rg_settlparties_decoder  : fix_rg_settlparties decoder =
    list full_rg_inner_SettlParties_decoder
;;

let full_rg_inner_BidCompRspGrp_decoder  : fix_rg_inner_bidcomprspgrp decoder =
    (maybe (field "EncodedText" string_decoder)) >>= (fun f_BidCompRspGrp_EncodedText -> (maybe (field "EncodedTextLen" int_decoder)) >>= (fun f_BidCompRspGrp_EncodedTextLen -> (maybe (field "Text" string_decoder)) >>= (fun f_BidCompRspGrp_Text -> (maybe (field "TradingSessionSubID" string_decoder)) >>= (fun f_BidCompRspGrp_TradingSessionSubID -> (maybe (field "TradingSessionID" string_decoder)) >>= (fun f_BidCompRspGrp_TradingSessionID -> (maybe (field "SettlDate" localmktdate_decoder)) >>= (fun f_BidCompRspGrp_SettlDate -> (maybe (field "SettlType" full_enum_settltype_decoder)) >>= (fun f_BidCompRspGrp_SettlType -> (maybe (field "NetGrossInd" full_enum_netgrossind_decoder)) >>= (fun f_BidCompRspGrp_NetGrossInd -> (maybe (field "FairValue" float_6_decoder)) >>= (fun f_BidCompRspGrp_FairValue -> (maybe (field "PriceType" full_enum_pricetype_decoder)) >>= (fun f_BidCompRspGrp_PriceType -> (maybe (field "Price" float_6_decoder)) >>= (fun f_BidCompRspGrp_Price -> (maybe (field "Side" full_enum_side_decoder)) >>= (fun f_BidCompRspGrp_Side -> (maybe (field "Country" full_enum_country_decoder)) >>= (fun f_BidCompRspGrp_Country -> (maybe (field "ListID" string_decoder)) >>= (fun f_BidCompRspGrp_ListID -> (field "CommissionData" full_record_commissiondata_decoder) >>= (fun f_BidCompRspGrp_CommissionData -> (maybe (field "NoBidComponents" int_decoder)) >>= (fun f_BidCompRspGrp_NoBidComponents -> succeed {
        f_BidCompRspGrp_NoBidComponents = f_BidCompRspGrp_NoBidComponents;
        f_BidCompRspGrp_CommissionData = f_BidCompRspGrp_CommissionData;
        f_BidCompRspGrp_ListID = f_BidCompRspGrp_ListID;
        f_BidCompRspGrp_Country = f_BidCompRspGrp_Country;
        f_BidCompRspGrp_Side = f_BidCompRspGrp_Side;
        f_BidCompRspGrp_Price = f_BidCompRspGrp_Price;
        f_BidCompRspGrp_PriceType = f_BidCompRspGrp_PriceType;
        f_BidCompRspGrp_FairValue = f_BidCompRspGrp_FairValue;
        f_BidCompRspGrp_NetGrossInd = f_BidCompRspGrp_NetGrossInd;
        f_BidCompRspGrp_SettlType = f_BidCompRspGrp_SettlType;
        f_BidCompRspGrp_SettlDate = f_BidCompRspGrp_SettlDate;
        f_BidCompRspGrp_TradingSessionID = f_BidCompRspGrp_TradingSessionID;
        f_BidCompRspGrp_TradingSessionSubID = f_BidCompRspGrp_TradingSessionSubID;
        f_BidCompRspGrp_Text = f_BidCompRspGrp_Text;
        f_BidCompRspGrp_EncodedTextLen = f_BidCompRspGrp_EncodedTextLen;
        f_BidCompRspGrp_EncodedText = f_BidCompRspGrp_EncodedText
    }
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
;;

let full_rg_bidcomprspgrp_decoder  : fix_rg_bidcomprspgrp decoder =
    list full_rg_inner_BidCompRspGrp_decoder
;;

let full_rg_inner_NestedParties3_decoder  : fix_rg_inner_nestedparties3 decoder =
    (field "NstdPtys3SubGrp" full_rg_nstdptys3subgrp_decoder) >>= (fun f_NestedParties3_NstdPtys3SubGrp -> (maybe (field "Nested3PartyRole" int_decoder)) >>= (fun f_NestedParties3_Nested3PartyRole -> (maybe (field "Nested3PartyIDSource" char_decoder)) >>= (fun f_NestedParties3_Nested3PartyIDSource -> (maybe (field "Nested3PartyID" string_decoder)) >>= (fun f_NestedParties3_Nested3PartyID -> (maybe (field "NoNested3PartyIDs" int_decoder)) >>= (fun f_NestedParties3_NoNested3PartyIDs -> succeed {
        f_NestedParties3_NoNested3PartyIDs = f_NestedParties3_NoNested3PartyIDs;
        f_NestedParties3_Nested3PartyID = f_NestedParties3_Nested3PartyID;
        f_NestedParties3_Nested3PartyIDSource = f_NestedParties3_Nested3PartyIDSource;
        f_NestedParties3_Nested3PartyRole = f_NestedParties3_Nested3PartyRole;
        f_NestedParties3_NstdPtys3SubGrp = f_NestedParties3_NstdPtys3SubGrp
    }
    )
    )
    )
    )
    )
;;

let full_rg_nestedparties3_decoder  : fix_rg_nestedparties3 decoder =
    list full_rg_inner_NestedParties3_decoder
;;

let full_rg_inner_NestedParties_decoder  : fix_rg_inner_nestedparties decoder =
    (field "NstdPtysSubGrp" full_rg_nstdptyssubgrp_decoder) >>= (fun f_NestedParties_NstdPtysSubGrp -> (maybe (field "NestedPartyRole" int_decoder)) >>= (fun f_NestedParties_NestedPartyRole -> (maybe (field "NestedPartyIDSource" char_decoder)) >>= (fun f_NestedParties_NestedPartyIDSource -> (maybe (field "NestedPartyID" string_decoder)) >>= (fun f_NestedParties_NestedPartyID -> (maybe (field "NoNestedPartyIDs" int_decoder)) >>= (fun f_NestedParties_NoNestedPartyIDs -> succeed {
        f_NestedParties_NoNestedPartyIDs = f_NestedParties_NoNestedPartyIDs;
        f_NestedParties_NestedPartyID = f_NestedParties_NestedPartyID;
        f_NestedParties_NestedPartyIDSource = f_NestedParties_NestedPartyIDSource;
        f_NestedParties_NestedPartyRole = f_NestedParties_NestedPartyRole;
        f_NestedParties_NstdPtysSubGrp = f_NestedParties_NstdPtysSubGrp
    }
    )
    )
    )
    )
    )
;;

let full_rg_nestedparties_decoder  : fix_rg_nestedparties decoder =
    list full_rg_inner_NestedParties_decoder
;;

let full_record_underlyinginstrument_decoder  : fix_underlyinginstrument decoder =
    (field "UnderlyingStipulations" full_rg_underlyingstipulations_decoder) >>= (fun f_UnderlyingInstrument_UnderlyingStipulations -> (maybe (field "UnderlyingEndValue" float_6_decoder)) >>= (fun f_UnderlyingInstrument_UnderlyingEndValue -> (maybe (field "UnderlyingCurrentValue" float_6_decoder)) >>= (fun f_UnderlyingInstrument_UnderlyingCurrentValue -> (maybe (field "UnderlyingStartValue" float_6_decoder)) >>= (fun f_UnderlyingInstrument_UnderlyingStartValue -> (maybe (field "UnderlyingEndPrice" float_6_decoder)) >>= (fun f_UnderlyingInstrument_UnderlyingEndPrice -> (maybe (field "UnderlyingDirtyPrice" float_6_decoder)) >>= (fun f_UnderlyingInstrument_UnderlyingDirtyPrice -> (maybe (field "UnderlyingPx" float_6_decoder)) >>= (fun f_UnderlyingInstrument_UnderlyingPx -> (maybe (field "UnderlyingQty" float_6_decoder)) >>= (fun f_UnderlyingInstrument_UnderlyingQty -> (maybe (field "UnderlyingCurrency" full_enum_currency_decoder)) >>= (fun f_UnderlyingInstrument_UnderlyingCurrency -> (maybe (field "UnderlyingCPRegType" string_decoder)) >>= (fun f_UnderlyingInstrument_UnderlyingCPRegType -> (maybe (field "UnderlyingCPProgram" string_decoder)) >>= (fun f_UnderlyingInstrument_UnderlyingCPProgram -> (maybe (field "EncodedUnderlyingSecurityDesc" string_decoder)) >>= (fun f_UnderlyingInstrument_EncodedUnderlyingSecurityDesc -> (maybe (field "EncodedUnderlyingSecurityDescLen" int_decoder)) >>= (fun f_UnderlyingInstrument_EncodedUnderlyingSecurityDescLen -> (maybe (field "UnderlyingSecurityDesc" string_decoder)) >>= (fun f_UnderlyingInstrument_UnderlyingSecurityDesc -> (maybe (field "EncodedUnderlyingIssuer" string_decoder)) >>= (fun f_UnderlyingInstrument_EncodedUnderlyingIssuer -> (maybe (field "EncodedUnderlyingIssuerLen" int_decoder)) >>= (fun f_UnderlyingInstrument_EncodedUnderlyingIssuerLen -> (maybe (field "UnderlyingIssuer" string_decoder)) >>= (fun f_UnderlyingInstrument_UnderlyingIssuer -> (maybe (field "UnderlyingSecurityExchange" full_enum_exchange_decoder)) >>= (fun f_UnderlyingInstrument_UnderlyingSecurityExchange -> (maybe (field "UnderlyingCouponRate" float_6_decoder)) >>= (fun f_UnderlyingInstrument_UnderlyingCouponRate -> (maybe (field "UnderlyingContractMultiplier" float_decoder)) >>= (fun f_UnderlyingInstrument_UnderlyingContractMultiplier -> (maybe (field "UnderlyingOptAttribute" char_decoder)) >>= (fun f_UnderlyingInstrument_UnderlyingOptAttribute -> (maybe (field "UnderlyingStrikeCurrency" full_enum_currency_decoder)) >>= (fun f_UnderlyingInstrument_UnderlyingStrikeCurrency -> (maybe (field "UnderlyingStrikePrice" float_6_decoder)) >>= (fun f_UnderlyingInstrument_UnderlyingStrikePrice -> (maybe (field "UnderlyingRedemptionDate" localmktdate_decoder)) >>= (fun f_UnderlyingInstrument_UnderlyingRedemptionDate -> (maybe (field "UnderlyingLocaleOfIssue" string_decoder)) >>= (fun f_UnderlyingInstrument_UnderlyingLocaleOfIssue -> (maybe (field "UnderlyingStateOrProvinceOfIssue" string_decoder)) >>= (fun f_UnderlyingInstrument_UnderlyingStateOrProvinceOfIssue -> (maybe (field "UnderlyingCountryOfIssue" full_enum_country_decoder)) >>= (fun f_UnderlyingInstrument_UnderlyingCountryOfIssue -> (maybe (field "UnderlyingInstrRegistry" string_decoder)) >>= (fun f_UnderlyingInstrument_UnderlyingInstrRegistry -> (maybe (field "UnderlyingCreditRating" string_decoder)) >>= (fun f_UnderlyingInstrument_UnderlyingCreditRating -> (maybe (field "UnderlyingFactor" float_decoder)) >>= (fun f_UnderlyingInstrument_UnderlyingFactor -> (maybe (field "UnderlyingRepurchaseRate" float_6_decoder)) >>= (fun f_UnderlyingInstrument_UnderlyingRepurchaseRate -> (maybe (field "UnderlyingRepurchaseTerm" int_decoder)) >>= (fun f_UnderlyingInstrument_UnderlyingRepurchaseTerm -> (maybe (field "UnderlyingRepoCollateralSecurityType" string_decoder)) >>= (fun f_UnderlyingInstrument_UnderlyingRepoCollateralSecurityType -> (maybe (field "UnderlyingIssueDate" localmktdate_decoder)) >>= (fun f_UnderlyingInstrument_UnderlyingIssueDate -> (maybe (field "UnderlyingCouponPaymentDate" localmktdate_decoder)) >>= (fun f_UnderlyingInstrument_UnderlyingCouponPaymentDate -> (maybe (field "UnderlyingMaturityDate" localmktdate_decoder)) >>= (fun f_UnderlyingInstrument_UnderlyingMaturityDate -> (maybe (field "UnderlyingMaturityMonthYear" monthyear_decoder)) >>= (fun f_UnderlyingInstrument_UnderlyingMaturityMonthYear -> (maybe (field "UnderlyingSecuritySubType" string_decoder)) >>= (fun f_UnderlyingInstrument_UnderlyingSecuritySubType -> (maybe (field "UnderlyingSecurityType" string_decoder)) >>= (fun f_UnderlyingInstrument_UnderlyingSecurityType -> (maybe (field "UnderlyingCFICode" string_decoder)) >>= (fun f_UnderlyingInstrument_UnderlyingCFICode -> (maybe (field "UnderlyingProduct" int_decoder)) >>= (fun f_UnderlyingInstrument_UnderlyingProduct -> (field "UndSecAltIDGrp" full_rg_undsecaltidgrp_decoder) >>= (fun f_UnderlyingInstrument_UndSecAltIDGrp -> (maybe (field "UnderlyingSecurityIDSource" full_enum_securityidsource_decoder)) >>= (fun f_UnderlyingInstrument_UnderlyingSecurityIDSource -> (maybe (field "UnderlyingSecurityID" string_decoder)) >>= (fun f_UnderlyingInstrument_UnderlyingSecurityID -> (maybe (field "UnderlyingSymbolSfx" string_decoder)) >>= (fun f_UnderlyingInstrument_UnderlyingSymbolSfx -> (maybe (field "UnderlyingSymbol" string_decoder)) >>= (fun f_UnderlyingInstrument_UnderlyingSymbol -> succeed {
        f_UnderlyingInstrument_UnderlyingSymbol = f_UnderlyingInstrument_UnderlyingSymbol;
        f_UnderlyingInstrument_UnderlyingSymbolSfx = f_UnderlyingInstrument_UnderlyingSymbolSfx;
        f_UnderlyingInstrument_UnderlyingSecurityID = f_UnderlyingInstrument_UnderlyingSecurityID;
        f_UnderlyingInstrument_UnderlyingSecurityIDSource = f_UnderlyingInstrument_UnderlyingSecurityIDSource;
        f_UnderlyingInstrument_UndSecAltIDGrp = f_UnderlyingInstrument_UndSecAltIDGrp;
        f_UnderlyingInstrument_UnderlyingProduct = f_UnderlyingInstrument_UnderlyingProduct;
        f_UnderlyingInstrument_UnderlyingCFICode = f_UnderlyingInstrument_UnderlyingCFICode;
        f_UnderlyingInstrument_UnderlyingSecurityType = f_UnderlyingInstrument_UnderlyingSecurityType;
        f_UnderlyingInstrument_UnderlyingSecuritySubType = f_UnderlyingInstrument_UnderlyingSecuritySubType;
        f_UnderlyingInstrument_UnderlyingMaturityMonthYear = f_UnderlyingInstrument_UnderlyingMaturityMonthYear;
        f_UnderlyingInstrument_UnderlyingMaturityDate = f_UnderlyingInstrument_UnderlyingMaturityDate;
        f_UnderlyingInstrument_UnderlyingCouponPaymentDate = f_UnderlyingInstrument_UnderlyingCouponPaymentDate;
        f_UnderlyingInstrument_UnderlyingIssueDate = f_UnderlyingInstrument_UnderlyingIssueDate;
        f_UnderlyingInstrument_UnderlyingRepoCollateralSecurityType = f_UnderlyingInstrument_UnderlyingRepoCollateralSecurityType;
        f_UnderlyingInstrument_UnderlyingRepurchaseTerm = f_UnderlyingInstrument_UnderlyingRepurchaseTerm;
        f_UnderlyingInstrument_UnderlyingRepurchaseRate = f_UnderlyingInstrument_UnderlyingRepurchaseRate;
        f_UnderlyingInstrument_UnderlyingFactor = f_UnderlyingInstrument_UnderlyingFactor;
        f_UnderlyingInstrument_UnderlyingCreditRating = f_UnderlyingInstrument_UnderlyingCreditRating;
        f_UnderlyingInstrument_UnderlyingInstrRegistry = f_UnderlyingInstrument_UnderlyingInstrRegistry;
        f_UnderlyingInstrument_UnderlyingCountryOfIssue = f_UnderlyingInstrument_UnderlyingCountryOfIssue;
        f_UnderlyingInstrument_UnderlyingStateOrProvinceOfIssue = f_UnderlyingInstrument_UnderlyingStateOrProvinceOfIssue;
        f_UnderlyingInstrument_UnderlyingLocaleOfIssue = f_UnderlyingInstrument_UnderlyingLocaleOfIssue;
        f_UnderlyingInstrument_UnderlyingRedemptionDate = f_UnderlyingInstrument_UnderlyingRedemptionDate;
        f_UnderlyingInstrument_UnderlyingStrikePrice = f_UnderlyingInstrument_UnderlyingStrikePrice;
        f_UnderlyingInstrument_UnderlyingStrikeCurrency = f_UnderlyingInstrument_UnderlyingStrikeCurrency;
        f_UnderlyingInstrument_UnderlyingOptAttribute = f_UnderlyingInstrument_UnderlyingOptAttribute;
        f_UnderlyingInstrument_UnderlyingContractMultiplier = f_UnderlyingInstrument_UnderlyingContractMultiplier;
        f_UnderlyingInstrument_UnderlyingCouponRate = f_UnderlyingInstrument_UnderlyingCouponRate;
        f_UnderlyingInstrument_UnderlyingSecurityExchange = f_UnderlyingInstrument_UnderlyingSecurityExchange;
        f_UnderlyingInstrument_UnderlyingIssuer = f_UnderlyingInstrument_UnderlyingIssuer;
        f_UnderlyingInstrument_EncodedUnderlyingIssuerLen = f_UnderlyingInstrument_EncodedUnderlyingIssuerLen;
        f_UnderlyingInstrument_EncodedUnderlyingIssuer = f_UnderlyingInstrument_EncodedUnderlyingIssuer;
        f_UnderlyingInstrument_UnderlyingSecurityDesc = f_UnderlyingInstrument_UnderlyingSecurityDesc;
        f_UnderlyingInstrument_EncodedUnderlyingSecurityDescLen = f_UnderlyingInstrument_EncodedUnderlyingSecurityDescLen;
        f_UnderlyingInstrument_EncodedUnderlyingSecurityDesc = f_UnderlyingInstrument_EncodedUnderlyingSecurityDesc;
        f_UnderlyingInstrument_UnderlyingCPProgram = f_UnderlyingInstrument_UnderlyingCPProgram;
        f_UnderlyingInstrument_UnderlyingCPRegType = f_UnderlyingInstrument_UnderlyingCPRegType;
        f_UnderlyingInstrument_UnderlyingCurrency = f_UnderlyingInstrument_UnderlyingCurrency;
        f_UnderlyingInstrument_UnderlyingQty = f_UnderlyingInstrument_UnderlyingQty;
        f_UnderlyingInstrument_UnderlyingPx = f_UnderlyingInstrument_UnderlyingPx;
        f_UnderlyingInstrument_UnderlyingDirtyPrice = f_UnderlyingInstrument_UnderlyingDirtyPrice;
        f_UnderlyingInstrument_UnderlyingEndPrice = f_UnderlyingInstrument_UnderlyingEndPrice;
        f_UnderlyingInstrument_UnderlyingStartValue = f_UnderlyingInstrument_UnderlyingStartValue;
        f_UnderlyingInstrument_UnderlyingCurrentValue = f_UnderlyingInstrument_UnderlyingCurrentValue;
        f_UnderlyingInstrument_UnderlyingEndValue = f_UnderlyingInstrument_UnderlyingEndValue;
        f_UnderlyingInstrument_UnderlyingStipulations = f_UnderlyingInstrument_UnderlyingStipulations
    }
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
;;

let full_record_instrument_decoder  : fix_instrument decoder =
    (maybe (field "InterestAccrualDate" localmktdate_decoder)) >>= (fun f_Instrument_InterestAccrualDate -> (maybe (field "DatedDate" localmktdate_decoder)) >>= (fun f_Instrument_DatedDate -> (field "EvntGrp" full_rg_evntgrp_decoder) >>= (fun f_Instrument_EvntGrp -> (maybe (field "CPRegType" string_decoder)) >>= (fun f_Instrument_CPRegType -> (maybe (field "CPProgram" full_enum_cpprogram_decoder)) >>= (fun f_Instrument_CPProgram -> (maybe (field "ContractSettlMonth" monthyear_decoder)) >>= (fun f_Instrument_ContractSettlMonth -> (maybe (field "Pool" string_decoder)) >>= (fun f_Instrument_Pool -> (maybe (field "EncodedSecurityDesc" string_decoder)) >>= (fun f_Instrument_EncodedSecurityDesc -> (maybe (field "EncodedSecurityDescLen" int_decoder)) >>= (fun f_Instrument_EncodedSecurityDescLen -> (maybe (field "SecurityDesc" string_decoder)) >>= (fun f_Instrument_SecurityDesc -> (maybe (field "EncodedIssuer" string_decoder)) >>= (fun f_Instrument_EncodedIssuer -> (maybe (field "EncodedIssuerLen" int_decoder)) >>= (fun f_Instrument_EncodedIssuerLen -> (maybe (field "Issuer" string_decoder)) >>= (fun f_Instrument_Issuer -> (maybe (field "SecurityExchange" full_enum_exchange_decoder)) >>= (fun f_Instrument_SecurityExchange -> (maybe (field "CouponRate" float_6_decoder)) >>= (fun f_Instrument_CouponRate -> (maybe (field "ContractMultiplier" float_decoder)) >>= (fun f_Instrument_ContractMultiplier -> (maybe (field "OptAttribute" char_decoder)) >>= (fun f_Instrument_OptAttribute -> (maybe (field "StrikeCurrency" full_enum_currency_decoder)) >>= (fun f_Instrument_StrikeCurrency -> (maybe (field "StrikePrice" float_6_decoder)) >>= (fun f_Instrument_StrikePrice -> (maybe (field "RedemptionDate" localmktdate_decoder)) >>= (fun f_Instrument_RedemptionDate -> (maybe (field "LocaleOfIssue" string_decoder)) >>= (fun f_Instrument_LocaleOfIssue -> (maybe (field "StateOrProvinceOfIssue" string_decoder)) >>= (fun f_Instrument_StateOrProvinceOfIssue -> (maybe (field "CountryOfIssue" full_enum_country_decoder)) >>= (fun f_Instrument_CountryOfIssue -> (maybe (field "InstrRegistry" string_decoder)) >>= (fun f_Instrument_InstrRegistry -> (maybe (field "CreditRating" string_decoder)) >>= (fun f_Instrument_CreditRating -> (maybe (field "Factor" float_decoder)) >>= (fun f_Instrument_Factor -> (maybe (field "RepurchaseRate" float_6_decoder)) >>= (fun f_Instrument_RepurchaseRate -> (maybe (field "RepurchaseTerm" int_decoder)) >>= (fun f_Instrument_RepurchaseTerm -> (maybe (field "RepoCollateralSecurityType" string_decoder)) >>= (fun f_Instrument_RepoCollateralSecurityType -> (maybe (field "IssueDate" localmktdate_decoder)) >>= (fun f_Instrument_IssueDate -> (maybe (field "CouponPaymentDate" localmktdate_decoder)) >>= (fun f_Instrument_CouponPaymentDate -> (maybe (field "MaturityDate" localmktdate_decoder)) >>= (fun f_Instrument_MaturityDate -> (maybe (field "MaturityMonthYear" monthyear_decoder)) >>= (fun f_Instrument_MaturityMonthYear -> (maybe (field "SecuritySubType" string_decoder)) >>= (fun f_Instrument_SecuritySubType -> (maybe (field "SecurityType" full_enum_securitytype_decoder)) >>= (fun f_Instrument_SecurityType -> (maybe (field "CFICode" string_decoder)) >>= (fun f_Instrument_CFICode -> (maybe (field "Product" full_enum_product_decoder)) >>= (fun f_Instrument_Product -> (field "SecAltIDGrp" full_rg_secaltidgrp_decoder) >>= (fun f_Instrument_SecAltIDGrp -> (maybe (field "SecurityIDSource" full_enum_securityidsource_decoder)) >>= (fun f_Instrument_SecurityIDSource -> (maybe (field "SecurityID" string_decoder)) >>= (fun f_Instrument_SecurityID -> (maybe (field "SymbolSfx" string_decoder)) >>= (fun f_Instrument_SymbolSfx -> (maybe (field "Symbol" string_decoder)) >>= (fun f_Instrument_Symbol -> succeed {
        f_Instrument_Symbol = f_Instrument_Symbol;
        f_Instrument_SymbolSfx = f_Instrument_SymbolSfx;
        f_Instrument_SecurityID = f_Instrument_SecurityID;
        f_Instrument_SecurityIDSource = f_Instrument_SecurityIDSource;
        f_Instrument_SecAltIDGrp = f_Instrument_SecAltIDGrp;
        f_Instrument_Product = f_Instrument_Product;
        f_Instrument_CFICode = f_Instrument_CFICode;
        f_Instrument_SecurityType = f_Instrument_SecurityType;
        f_Instrument_SecuritySubType = f_Instrument_SecuritySubType;
        f_Instrument_MaturityMonthYear = f_Instrument_MaturityMonthYear;
        f_Instrument_MaturityDate = f_Instrument_MaturityDate;
        f_Instrument_CouponPaymentDate = f_Instrument_CouponPaymentDate;
        f_Instrument_IssueDate = f_Instrument_IssueDate;
        f_Instrument_RepoCollateralSecurityType = f_Instrument_RepoCollateralSecurityType;
        f_Instrument_RepurchaseTerm = f_Instrument_RepurchaseTerm;
        f_Instrument_RepurchaseRate = f_Instrument_RepurchaseRate;
        f_Instrument_Factor = f_Instrument_Factor;
        f_Instrument_CreditRating = f_Instrument_CreditRating;
        f_Instrument_InstrRegistry = f_Instrument_InstrRegistry;
        f_Instrument_CountryOfIssue = f_Instrument_CountryOfIssue;
        f_Instrument_StateOrProvinceOfIssue = f_Instrument_StateOrProvinceOfIssue;
        f_Instrument_LocaleOfIssue = f_Instrument_LocaleOfIssue;
        f_Instrument_RedemptionDate = f_Instrument_RedemptionDate;
        f_Instrument_StrikePrice = f_Instrument_StrikePrice;
        f_Instrument_StrikeCurrency = f_Instrument_StrikeCurrency;
        f_Instrument_OptAttribute = f_Instrument_OptAttribute;
        f_Instrument_ContractMultiplier = f_Instrument_ContractMultiplier;
        f_Instrument_CouponRate = f_Instrument_CouponRate;
        f_Instrument_SecurityExchange = f_Instrument_SecurityExchange;
        f_Instrument_Issuer = f_Instrument_Issuer;
        f_Instrument_EncodedIssuerLen = f_Instrument_EncodedIssuerLen;
        f_Instrument_EncodedIssuer = f_Instrument_EncodedIssuer;
        f_Instrument_SecurityDesc = f_Instrument_SecurityDesc;
        f_Instrument_EncodedSecurityDescLen = f_Instrument_EncodedSecurityDescLen;
        f_Instrument_EncodedSecurityDesc = f_Instrument_EncodedSecurityDesc;
        f_Instrument_Pool = f_Instrument_Pool;
        f_Instrument_ContractSettlMonth = f_Instrument_ContractSettlMonth;
        f_Instrument_CPProgram = f_Instrument_CPProgram;
        f_Instrument_CPRegType = f_Instrument_CPRegType;
        f_Instrument_EvntGrp = f_Instrument_EvntGrp;
        f_Instrument_DatedDate = f_Instrument_DatedDate;
        f_Instrument_InterestAccrualDate = f_Instrument_InterestAccrualDate
    }
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
;;

let full_rg_inner_InstrmtGrp_decoder  : fix_rg_inner_instrmtgrp decoder =
    (field "Instrument" full_record_instrument_decoder) >>= (fun f_InstrmtGrp_Instrument -> (maybe (field "NoRelatedSym" int_decoder)) >>= (fun f_InstrmtGrp_NoRelatedSym -> succeed {
        f_InstrmtGrp_NoRelatedSym = f_InstrmtGrp_NoRelatedSym;
        f_InstrmtGrp_Instrument = f_InstrmtGrp_Instrument
    }
    )
    )
;;

let full_rg_instrmtgrp_decoder  : fix_rg_instrmtgrp decoder =
    list full_rg_inner_InstrmtGrp_decoder
;;

let full_rg_inner_InstrmtStrkPxGrp_decoder  : fix_rg_inner_instrmtstrkpxgrp decoder =
    (field "Instrument" full_record_instrument_decoder) >>= (fun f_InstrmtStrkPxGrp_Instrument -> (maybe (field "NoStrikes" int_decoder)) >>= (fun f_InstrmtStrkPxGrp_NoStrikes -> succeed {
        f_InstrmtStrkPxGrp_NoStrikes = f_InstrmtStrkPxGrp_NoStrikes;
        f_InstrmtStrkPxGrp_Instrument = f_InstrmtStrkPxGrp_Instrument
    }
    )
    )
;;

let full_rg_instrmtstrkpxgrp_decoder  : fix_rg_instrmtstrkpxgrp decoder =
    list full_rg_inner_InstrmtStrkPxGrp_decoder
;;

let full_rg_inner_UndInstrmtGrp_decoder  : fix_rg_inner_undinstrmtgrp decoder =
    (field "UnderlyingInstrument" full_record_underlyinginstrument_decoder) >>= (fun f_UndInstrmtGrp_UnderlyingInstrument -> (maybe (field "NoUnderlyings" int_decoder)) >>= (fun f_UndInstrmtGrp_NoUnderlyings -> succeed {
        f_UndInstrmtGrp_NoUnderlyings = f_UndInstrmtGrp_NoUnderlyings;
        f_UndInstrmtGrp_UnderlyingInstrument = f_UndInstrmtGrp_UnderlyingInstrument
    }
    )
    )
;;

let full_rg_undinstrmtgrp_decoder  : fix_rg_undinstrmtgrp decoder =
    list full_rg_inner_UndInstrmtGrp_decoder
;;

let full_rg_inner_UndInstrmtCollGrp_decoder  : fix_rg_inner_undinstrmtcollgrp decoder =
    (maybe (field "CollAction" full_enum_collaction_decoder)) >>= (fun f_UndInstrmtCollGrp_CollAction -> (field "UnderlyingInstrument" full_record_underlyinginstrument_decoder) >>= (fun f_UndInstrmtCollGrp_UnderlyingInstrument -> (maybe (field "NoUnderlyings" int_decoder)) >>= (fun f_UndInstrmtCollGrp_NoUnderlyings -> succeed {
        f_UndInstrmtCollGrp_NoUnderlyings = f_UndInstrmtCollGrp_NoUnderlyings;
        f_UndInstrmtCollGrp_UnderlyingInstrument = f_UndInstrmtCollGrp_UnderlyingInstrument;
        f_UndInstrmtCollGrp_CollAction = f_UndInstrmtCollGrp_CollAction
    }
    )
    )
    )
;;

let full_rg_undinstrmtcollgrp_decoder  : fix_rg_undinstrmtcollgrp decoder =
    list full_rg_inner_UndInstrmtCollGrp_decoder
;;

let full_rg_inner_PosUndInstrmtGrp_decoder  : fix_rg_inner_posundinstrmtgrp decoder =
    (maybe (field "UnderlyingSettlPriceType" int_decoder)) >>= (fun f_PosUndInstrmtGrp_UnderlyingSettlPriceType -> (maybe (field "UnderlyingSettlPrice" float_6_decoder)) >>= (fun f_PosUndInstrmtGrp_UnderlyingSettlPrice -> (field "UnderlyingInstrument" full_record_underlyinginstrument_decoder) >>= (fun f_PosUndInstrmtGrp_UnderlyingInstrument -> (maybe (field "NoUnderlyings" int_decoder)) >>= (fun f_PosUndInstrmtGrp_NoUnderlyings -> succeed {
        f_PosUndInstrmtGrp_NoUnderlyings = f_PosUndInstrmtGrp_NoUnderlyings;
        f_PosUndInstrmtGrp_UnderlyingInstrument = f_PosUndInstrmtGrp_UnderlyingInstrument;
        f_PosUndInstrmtGrp_UnderlyingSettlPrice = f_PosUndInstrmtGrp_UnderlyingSettlPrice;
        f_PosUndInstrmtGrp_UnderlyingSettlPriceType = f_PosUndInstrmtGrp_UnderlyingSettlPriceType
    }
    )
    )
    )
    )
;;

let full_rg_posundinstrmtgrp_decoder  : fix_rg_posundinstrmtgrp decoder =
    list full_rg_inner_PosUndInstrmtGrp_decoder
;;

let full_rg_inner_UndInstrmtStrkPxGrp_decoder  : fix_rg_inner_undinstrmtstrkpxgrp decoder =
    (maybe (field "EncodedText" string_decoder)) >>= (fun f_UndInstrmtStrkPxGrp_EncodedText -> (maybe (field "EncodedTextLen" int_decoder)) >>= (fun f_UndInstrmtStrkPxGrp_EncodedTextLen -> (maybe (field "Text" string_decoder)) >>= (fun f_UndInstrmtStrkPxGrp_Text -> (maybe (field "Currency" full_enum_currency_decoder)) >>= (fun f_UndInstrmtStrkPxGrp_Currency -> (maybe (field "Price" float_6_decoder)) >>= (fun f_UndInstrmtStrkPxGrp_Price -> (maybe (field "Side" full_enum_side_decoder)) >>= (fun f_UndInstrmtStrkPxGrp_Side -> (maybe (field "SecondaryClOrdID" string_decoder)) >>= (fun f_UndInstrmtStrkPxGrp_SecondaryClOrdID -> (maybe (field "ClOrdID" string_decoder)) >>= (fun f_UndInstrmtStrkPxGrp_ClOrdID -> (maybe (field "PrevClosePx" float_6_decoder)) >>= (fun f_UndInstrmtStrkPxGrp_PrevClosePx -> (field "UnderlyingInstrument" full_record_underlyinginstrument_decoder) >>= (fun f_UndInstrmtStrkPxGrp_UnderlyingInstrument -> (maybe (field "NoUnderlyings" int_decoder)) >>= (fun f_UndInstrmtStrkPxGrp_NoUnderlyings -> succeed {
        f_UndInstrmtStrkPxGrp_NoUnderlyings = f_UndInstrmtStrkPxGrp_NoUnderlyings;
        f_UndInstrmtStrkPxGrp_UnderlyingInstrument = f_UndInstrmtStrkPxGrp_UnderlyingInstrument;
        f_UndInstrmtStrkPxGrp_PrevClosePx = f_UndInstrmtStrkPxGrp_PrevClosePx;
        f_UndInstrmtStrkPxGrp_ClOrdID = f_UndInstrmtStrkPxGrp_ClOrdID;
        f_UndInstrmtStrkPxGrp_SecondaryClOrdID = f_UndInstrmtStrkPxGrp_SecondaryClOrdID;
        f_UndInstrmtStrkPxGrp_Side = f_UndInstrmtStrkPxGrp_Side;
        f_UndInstrmtStrkPxGrp_Price = f_UndInstrmtStrkPxGrp_Price;
        f_UndInstrmtStrkPxGrp_Currency = f_UndInstrmtStrkPxGrp_Currency;
        f_UndInstrmtStrkPxGrp_Text = f_UndInstrmtStrkPxGrp_Text;
        f_UndInstrmtStrkPxGrp_EncodedTextLen = f_UndInstrmtStrkPxGrp_EncodedTextLen;
        f_UndInstrmtStrkPxGrp_EncodedText = f_UndInstrmtStrkPxGrp_EncodedText
    }
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
;;

let full_rg_undinstrmtstrkpxgrp_decoder  : fix_rg_undinstrmtstrkpxgrp decoder =
    list full_rg_inner_UndInstrmtStrkPxGrp_decoder
;;

let full_rg_inner_PreAllocGrp_decoder  : fix_rg_inner_preallocgrp decoder =
    (maybe (field "AllocQty" float_6_decoder)) >>= (fun f_PreAllocGrp_AllocQty -> (field "NestedParties" full_rg_nestedparties_decoder) >>= (fun f_PreAllocGrp_NestedParties -> (maybe (field "IndividualAllocID" string_decoder)) >>= (fun f_PreAllocGrp_IndividualAllocID -> (maybe (field "AllocSettlCurrency" full_enum_currency_decoder)) >>= (fun f_PreAllocGrp_AllocSettlCurrency -> (maybe (field "AllocAcctIDSource" int_decoder)) >>= (fun f_PreAllocGrp_AllocAcctIDSource -> (maybe (field "AllocAccount" string_decoder)) >>= (fun f_PreAllocGrp_AllocAccount -> (maybe (field "NoAllocs" int_decoder)) >>= (fun f_PreAllocGrp_NoAllocs -> succeed {
        f_PreAllocGrp_NoAllocs = f_PreAllocGrp_NoAllocs;
        f_PreAllocGrp_AllocAccount = f_PreAllocGrp_AllocAccount;
        f_PreAllocGrp_AllocAcctIDSource = f_PreAllocGrp_AllocAcctIDSource;
        f_PreAllocGrp_AllocSettlCurrency = f_PreAllocGrp_AllocSettlCurrency;
        f_PreAllocGrp_IndividualAllocID = f_PreAllocGrp_IndividualAllocID;
        f_PreAllocGrp_NestedParties = f_PreAllocGrp_NestedParties;
        f_PreAllocGrp_AllocQty = f_PreAllocGrp_AllocQty
    }
    )
    )
    )
    )
    )
    )
    )
;;

let full_rg_preallocgrp_decoder  : fix_rg_preallocgrp decoder =
    list full_rg_inner_PreAllocGrp_decoder
;;

let full_rg_inner_PositionQty_decoder  : fix_rg_inner_positionqty decoder =
    (field "NestedParties" full_rg_nestedparties_decoder) >>= (fun f_PositionQty_NestedParties -> (maybe (field "PosQtyStatus" full_enum_posqtystatus_decoder)) >>= (fun f_PositionQty_PosQtyStatus -> (maybe (field "ShortQty" float_6_decoder)) >>= (fun f_PositionQty_ShortQty -> (maybe (field "LongQty" float_6_decoder)) >>= (fun f_PositionQty_LongQty -> (maybe (field "PosType" full_enum_postype_decoder)) >>= (fun f_PositionQty_PosType -> (maybe (field "NoPositions" int_decoder)) >>= (fun f_PositionQty_NoPositions -> succeed {
        f_PositionQty_NoPositions = f_PositionQty_NoPositions;
        f_PositionQty_PosType = f_PositionQty_PosType;
        f_PositionQty_LongQty = f_PositionQty_LongQty;
        f_PositionQty_ShortQty = f_PositionQty_ShortQty;
        f_PositionQty_PosQtyStatus = f_PositionQty_PosQtyStatus;
        f_PositionQty_NestedParties = f_PositionQty_NestedParties
    }
    )
    )
    )
    )
    )
    )
;;

let full_rg_positionqty_decoder  : fix_rg_positionqty decoder =
    list full_rg_inner_PositionQty_decoder
;;

let full_rg_inner_RgstDtlsGrp_decoder  : fix_rg_inner_rgstdtlsgrp decoder =
    (maybe (field "InvestorCountryOfResidence" full_enum_country_decoder)) >>= (fun f_RgstDtlsGrp_InvestorCountryOfResidence -> (maybe (field "DateOfBirth" localmktdate_decoder)) >>= (fun f_RgstDtlsGrp_DateOfBirth -> (maybe (field "OwnerType" full_enum_ownertype_decoder)) >>= (fun f_RgstDtlsGrp_OwnerType -> (field "NestedParties" full_rg_nestedparties_decoder) >>= (fun f_RgstDtlsGrp_NestedParties -> (maybe (field "MailingInst" string_decoder)) >>= (fun f_RgstDtlsGrp_MailingInst -> (maybe (field "MailingDtls" string_decoder)) >>= (fun f_RgstDtlsGrp_MailingDtls -> (maybe (field "RegistEmail" string_decoder)) >>= (fun f_RgstDtlsGrp_RegistEmail -> (maybe (field "RegistDtls" string_decoder)) >>= (fun f_RgstDtlsGrp_RegistDtls -> (maybe (field "NoRegistDtls" int_decoder)) >>= (fun f_RgstDtlsGrp_NoRegistDtls -> succeed {
        f_RgstDtlsGrp_NoRegistDtls = f_RgstDtlsGrp_NoRegistDtls;
        f_RgstDtlsGrp_RegistDtls = f_RgstDtlsGrp_RegistDtls;
        f_RgstDtlsGrp_RegistEmail = f_RgstDtlsGrp_RegistEmail;
        f_RgstDtlsGrp_MailingDtls = f_RgstDtlsGrp_MailingDtls;
        f_RgstDtlsGrp_MailingInst = f_RgstDtlsGrp_MailingInst;
        f_RgstDtlsGrp_NestedParties = f_RgstDtlsGrp_NestedParties;
        f_RgstDtlsGrp_OwnerType = f_RgstDtlsGrp_OwnerType;
        f_RgstDtlsGrp_DateOfBirth = f_RgstDtlsGrp_DateOfBirth;
        f_RgstDtlsGrp_InvestorCountryOfResidence = f_RgstDtlsGrp_InvestorCountryOfResidence
    }
    )
    )
    )
    )
    )
    )
    )
    )
    )
;;

let full_rg_rgstdtlsgrp_decoder  : fix_rg_rgstdtlsgrp decoder =
    list full_rg_inner_RgstDtlsGrp_decoder
;;

let full_rg_inner_PreAllocMlegGrp_decoder  : fix_rg_inner_preallocmleggrp decoder =
    (maybe (field "AllocQty" float_6_decoder)) >>= (fun f_PreAllocMlegGrp_AllocQty -> (field "NestedParties3" full_rg_nestedparties3_decoder) >>= (fun f_PreAllocMlegGrp_NestedParties3 -> (maybe (field "IndividualAllocID" string_decoder)) >>= (fun f_PreAllocMlegGrp_IndividualAllocID -> (maybe (field "AllocSettlCurrency" full_enum_currency_decoder)) >>= (fun f_PreAllocMlegGrp_AllocSettlCurrency -> (maybe (field "AllocAcctIDSource" int_decoder)) >>= (fun f_PreAllocMlegGrp_AllocAcctIDSource -> (maybe (field "AllocAccount" string_decoder)) >>= (fun f_PreAllocMlegGrp_AllocAccount -> (maybe (field "NoAllocs" int_decoder)) >>= (fun f_PreAllocMlegGrp_NoAllocs -> succeed {
        f_PreAllocMlegGrp_NoAllocs = f_PreAllocMlegGrp_NoAllocs;
        f_PreAllocMlegGrp_AllocAccount = f_PreAllocMlegGrp_AllocAccount;
        f_PreAllocMlegGrp_AllocAcctIDSource = f_PreAllocMlegGrp_AllocAcctIDSource;
        f_PreAllocMlegGrp_AllocSettlCurrency = f_PreAllocMlegGrp_AllocSettlCurrency;
        f_PreAllocMlegGrp_IndividualAllocID = f_PreAllocMlegGrp_IndividualAllocID;
        f_PreAllocMlegGrp_NestedParties3 = f_PreAllocMlegGrp_NestedParties3;
        f_PreAllocMlegGrp_AllocQty = f_PreAllocMlegGrp_AllocQty
    }
    )
    )
    )
    )
    )
    )
    )
;;

let full_rg_preallocmleggrp_decoder  : fix_rg_preallocmleggrp decoder =
    list full_rg_inner_PreAllocMlegGrp_decoder
;;

let full_rg_inner_DlvyInstGrp_decoder  : fix_rg_inner_dlvyinstgrp decoder =
    (field "SettlParties" full_rg_settlparties_decoder) >>= (fun f_DlvyInstGrp_SettlParties -> (maybe (field "DlvyInstType" full_enum_dlvyinsttype_decoder)) >>= (fun f_DlvyInstGrp_DlvyInstType -> (maybe (field "SettlInstSource" full_enum_settlinstsource_decoder)) >>= (fun f_DlvyInstGrp_SettlInstSource -> (maybe (field "NoDlvyInst" int_decoder)) >>= (fun f_DlvyInstGrp_NoDlvyInst -> succeed {
        f_DlvyInstGrp_NoDlvyInst = f_DlvyInstGrp_NoDlvyInst;
        f_DlvyInstGrp_SettlInstSource = f_DlvyInstGrp_SettlInstSource;
        f_DlvyInstGrp_DlvyInstType = f_DlvyInstGrp_DlvyInstType;
        f_DlvyInstGrp_SettlParties = f_DlvyInstGrp_SettlParties
    }
    )
    )
    )
    )
;;

let full_rg_dlvyinstgrp_decoder  : fix_rg_dlvyinstgrp decoder =
    list full_rg_inner_DlvyInstGrp_decoder
;;

let full_rg_inner_OrdAllocGrp_decoder  : fix_rg_inner_ordallocgrp decoder =
    (maybe (field "OrderBookingQty" float_6_decoder)) >>= (fun f_OrdAllocGrp_OrderBookingQty -> (maybe (field "OrderAvgPx" float_6_decoder)) >>= (fun f_OrdAllocGrp_OrderAvgPx -> (maybe (field "OrderQty" float_6_decoder)) >>= (fun f_OrdAllocGrp_OrderQty -> (field "NestedParties2" full_rg_nestedparties2_decoder) >>= (fun f_OrdAllocGrp_NestedParties2 -> (maybe (field "ListID" string_decoder)) >>= (fun f_OrdAllocGrp_ListID -> (maybe (field "SecondaryClOrdID" string_decoder)) >>= (fun f_OrdAllocGrp_SecondaryClOrdID -> (maybe (field "SecondaryOrderID" string_decoder)) >>= (fun f_OrdAllocGrp_SecondaryOrderID -> (maybe (field "OrderID" string_decoder)) >>= (fun f_OrdAllocGrp_OrderID -> (maybe (field "ClOrdID" string_decoder)) >>= (fun f_OrdAllocGrp_ClOrdID -> (maybe (field "NoOrders" int_decoder)) >>= (fun f_OrdAllocGrp_NoOrders -> succeed {
        f_OrdAllocGrp_NoOrders = f_OrdAllocGrp_NoOrders;
        f_OrdAllocGrp_ClOrdID = f_OrdAllocGrp_ClOrdID;
        f_OrdAllocGrp_OrderID = f_OrdAllocGrp_OrderID;
        f_OrdAllocGrp_SecondaryOrderID = f_OrdAllocGrp_SecondaryOrderID;
        f_OrdAllocGrp_SecondaryClOrdID = f_OrdAllocGrp_SecondaryClOrdID;
        f_OrdAllocGrp_ListID = f_OrdAllocGrp_ListID;
        f_OrdAllocGrp_NestedParties2 = f_OrdAllocGrp_NestedParties2;
        f_OrdAllocGrp_OrderQty = f_OrdAllocGrp_OrderQty;
        f_OrdAllocGrp_OrderAvgPx = f_OrdAllocGrp_OrderAvgPx;
        f_OrdAllocGrp_OrderBookingQty = f_OrdAllocGrp_OrderBookingQty
    }
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
;;

let full_rg_ordallocgrp_decoder  : fix_rg_ordallocgrp decoder =
    list full_rg_inner_OrdAllocGrp_decoder
;;

let full_rg_inner_LegPreAllocGrp_decoder  : fix_rg_inner_legpreallocgrp decoder =
    (maybe (field "LegSettlCurrency" full_enum_currency_decoder)) >>= (fun f_LegPreAllocGrp_LegSettlCurrency -> (maybe (field "LegAllocAcctIDSource" string_decoder)) >>= (fun f_LegPreAllocGrp_LegAllocAcctIDSource -> (maybe (field "LegAllocQty" float_6_decoder)) >>= (fun f_LegPreAllocGrp_LegAllocQty -> (field "NestedParties2" full_rg_nestedparties2_decoder) >>= (fun f_LegPreAllocGrp_NestedParties2 -> (maybe (field "LegIndividualAllocID" string_decoder)) >>= (fun f_LegPreAllocGrp_LegIndividualAllocID -> (maybe (field "LegAllocAccount" string_decoder)) >>= (fun f_LegPreAllocGrp_LegAllocAccount -> (maybe (field "NoLegAllocs" int_decoder)) >>= (fun f_LegPreAllocGrp_NoLegAllocs -> succeed {
        f_LegPreAllocGrp_NoLegAllocs = f_LegPreAllocGrp_NoLegAllocs;
        f_LegPreAllocGrp_LegAllocAccount = f_LegPreAllocGrp_LegAllocAccount;
        f_LegPreAllocGrp_LegIndividualAllocID = f_LegPreAllocGrp_LegIndividualAllocID;
        f_LegPreAllocGrp_NestedParties2 = f_LegPreAllocGrp_NestedParties2;
        f_LegPreAllocGrp_LegAllocQty = f_LegPreAllocGrp_LegAllocQty;
        f_LegPreAllocGrp_LegAllocAcctIDSource = f_LegPreAllocGrp_LegAllocAcctIDSource;
        f_LegPreAllocGrp_LegSettlCurrency = f_LegPreAllocGrp_LegSettlCurrency
    }
    )
    )
    )
    )
    )
    )
    )
;;

let full_rg_legpreallocgrp_decoder  : fix_rg_legpreallocgrp decoder =
    list full_rg_inner_LegPreAllocGrp_decoder
;;

let full_rg_inner_TrdAllocGrp_decoder  : fix_rg_inner_trdallocgrp decoder =
    (maybe (field "AllocQty" float_6_decoder)) >>= (fun f_TrdAllocGrp_AllocQty -> (field "NestedParties2" full_rg_nestedparties2_decoder) >>= (fun f_TrdAllocGrp_NestedParties2 -> (maybe (field "IndividualAllocID" string_decoder)) >>= (fun f_TrdAllocGrp_IndividualAllocID -> (maybe (field "AllocSettlCurrency" full_enum_currency_decoder)) >>= (fun f_TrdAllocGrp_AllocSettlCurrency -> (maybe (field "AllocAcctIDSource" int_decoder)) >>= (fun f_TrdAllocGrp_AllocAcctIDSource -> (maybe (field "AllocAccount" string_decoder)) >>= (fun f_TrdAllocGrp_AllocAccount -> (maybe (field "NoAllocs" int_decoder)) >>= (fun f_TrdAllocGrp_NoAllocs -> succeed {
        f_TrdAllocGrp_NoAllocs = f_TrdAllocGrp_NoAllocs;
        f_TrdAllocGrp_AllocAccount = f_TrdAllocGrp_AllocAccount;
        f_TrdAllocGrp_AllocAcctIDSource = f_TrdAllocGrp_AllocAcctIDSource;
        f_TrdAllocGrp_AllocSettlCurrency = f_TrdAllocGrp_AllocSettlCurrency;
        f_TrdAllocGrp_IndividualAllocID = f_TrdAllocGrp_IndividualAllocID;
        f_TrdAllocGrp_NestedParties2 = f_TrdAllocGrp_NestedParties2;
        f_TrdAllocGrp_AllocQty = f_TrdAllocGrp_AllocQty
    }
    )
    )
    )
    )
    )
    )
    )
;;

let full_rg_trdallocgrp_decoder  : fix_rg_trdallocgrp decoder =
    list full_rg_inner_TrdAllocGrp_decoder
;;

let full_rg_inner_SideCrossOrdCxlGrp_decoder  : fix_rg_inner_sidecrossordcxlgrp decoder =
    (maybe (field "EncodedText" string_decoder)) >>= (fun f_SideCrossOrdCxlGrp_EncodedText -> (maybe (field "EncodedTextLen" int_decoder)) >>= (fun f_SideCrossOrdCxlGrp_EncodedTextLen -> (maybe (field "Text" string_decoder)) >>= (fun f_SideCrossOrdCxlGrp_Text -> (maybe (field "ComplianceID" string_decoder)) >>= (fun f_SideCrossOrdCxlGrp_ComplianceID -> (field "OrderQtyData" full_record_orderqtydata_decoder) >>= (fun f_SideCrossOrdCxlGrp_OrderQtyData -> (maybe (field "TradeDate" localmktdate_decoder)) >>= (fun f_SideCrossOrdCxlGrp_TradeDate -> (maybe (field "TradeOriginationDate" localmktdate_decoder)) >>= (fun f_SideCrossOrdCxlGrp_TradeOriginationDate -> (field "Parties" full_rg_parties_decoder) >>= (fun f_SideCrossOrdCxlGrp_Parties -> (maybe (field "OrigOrdModTime" utctimestamp_milli_decoder)) >>= (fun f_SideCrossOrdCxlGrp_OrigOrdModTime -> (maybe (field "ClOrdLinkID" string_decoder)) >>= (fun f_SideCrossOrdCxlGrp_ClOrdLinkID -> (maybe (field "SecondaryClOrdID" string_decoder)) >>= (fun f_SideCrossOrdCxlGrp_SecondaryClOrdID -> (maybe (field "ClOrdID" string_decoder)) >>= (fun f_SideCrossOrdCxlGrp_ClOrdID -> (maybe (field "OrigClOrdID" string_decoder)) >>= (fun f_SideCrossOrdCxlGrp_OrigClOrdID -> (maybe (field "Side" full_enum_side_decoder)) >>= (fun f_SideCrossOrdCxlGrp_Side -> (maybe (field "NoSides" full_enum_nosides_decoder)) >>= (fun f_SideCrossOrdCxlGrp_NoSides -> succeed {
        f_SideCrossOrdCxlGrp_NoSides = f_SideCrossOrdCxlGrp_NoSides;
        f_SideCrossOrdCxlGrp_Side = f_SideCrossOrdCxlGrp_Side;
        f_SideCrossOrdCxlGrp_OrigClOrdID = f_SideCrossOrdCxlGrp_OrigClOrdID;
        f_SideCrossOrdCxlGrp_ClOrdID = f_SideCrossOrdCxlGrp_ClOrdID;
        f_SideCrossOrdCxlGrp_SecondaryClOrdID = f_SideCrossOrdCxlGrp_SecondaryClOrdID;
        f_SideCrossOrdCxlGrp_ClOrdLinkID = f_SideCrossOrdCxlGrp_ClOrdLinkID;
        f_SideCrossOrdCxlGrp_OrigOrdModTime = f_SideCrossOrdCxlGrp_OrigOrdModTime;
        f_SideCrossOrdCxlGrp_Parties = f_SideCrossOrdCxlGrp_Parties;
        f_SideCrossOrdCxlGrp_TradeOriginationDate = f_SideCrossOrdCxlGrp_TradeOriginationDate;
        f_SideCrossOrdCxlGrp_TradeDate = f_SideCrossOrdCxlGrp_TradeDate;
        f_SideCrossOrdCxlGrp_OrderQtyData = f_SideCrossOrdCxlGrp_OrderQtyData;
        f_SideCrossOrdCxlGrp_ComplianceID = f_SideCrossOrdCxlGrp_ComplianceID;
        f_SideCrossOrdCxlGrp_Text = f_SideCrossOrdCxlGrp_Text;
        f_SideCrossOrdCxlGrp_EncodedTextLen = f_SideCrossOrdCxlGrp_EncodedTextLen;
        f_SideCrossOrdCxlGrp_EncodedText = f_SideCrossOrdCxlGrp_EncodedText
    }
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
;;

let full_rg_sidecrossordcxlgrp_decoder  : fix_rg_sidecrossordcxlgrp decoder =
    list full_rg_inner_SideCrossOrdCxlGrp_decoder
;;

let full_rg_inner_InstrmtLegExecGrp_decoder  : fix_rg_inner_instrmtlegexecgrp decoder =
    (maybe (field "LegLastPx" float_6_decoder)) >>= (fun f_InstrmtLegExecGrp_LegLastPx -> (maybe (field "LegSettlDate" localmktdate_decoder)) >>= (fun f_InstrmtLegExecGrp_LegSettlDate -> (maybe (field "LegSettlType" char_decoder)) >>= (fun f_InstrmtLegExecGrp_LegSettlType -> (maybe (field "LegPrice" float_6_decoder)) >>= (fun f_InstrmtLegExecGrp_LegPrice -> (maybe (field "LegRefID" string_decoder)) >>= (fun f_InstrmtLegExecGrp_LegRefID -> (field "NestedParties" full_rg_nestedparties_decoder) >>= (fun f_InstrmtLegExecGrp_NestedParties -> (maybe (field "LegCoveredOrUncovered" int_decoder)) >>= (fun f_InstrmtLegExecGrp_LegCoveredOrUncovered -> (maybe (field "LegPositionEffect" char_decoder)) >>= (fun f_InstrmtLegExecGrp_LegPositionEffect -> (field "LegStipulations" full_rg_legstipulations_decoder) >>= (fun f_InstrmtLegExecGrp_LegStipulations -> (maybe (field "LegSwapType" full_enum_legswaptype_decoder)) >>= (fun f_InstrmtLegExecGrp_LegSwapType -> (maybe (field "LegQty" float_6_decoder)) >>= (fun f_InstrmtLegExecGrp_LegQty -> (field "InstrumentLeg" full_record_instrumentleg_decoder) >>= (fun f_InstrmtLegExecGrp_InstrumentLeg -> (maybe (field "NoLegs" int_decoder)) >>= (fun f_InstrmtLegExecGrp_NoLegs -> succeed {
        f_InstrmtLegExecGrp_NoLegs = f_InstrmtLegExecGrp_NoLegs;
        f_InstrmtLegExecGrp_InstrumentLeg = f_InstrmtLegExecGrp_InstrumentLeg;
        f_InstrmtLegExecGrp_LegQty = f_InstrmtLegExecGrp_LegQty;
        f_InstrmtLegExecGrp_LegSwapType = f_InstrmtLegExecGrp_LegSwapType;
        f_InstrmtLegExecGrp_LegStipulations = f_InstrmtLegExecGrp_LegStipulations;
        f_InstrmtLegExecGrp_LegPositionEffect = f_InstrmtLegExecGrp_LegPositionEffect;
        f_InstrmtLegExecGrp_LegCoveredOrUncovered = f_InstrmtLegExecGrp_LegCoveredOrUncovered;
        f_InstrmtLegExecGrp_NestedParties = f_InstrmtLegExecGrp_NestedParties;
        f_InstrmtLegExecGrp_LegRefID = f_InstrmtLegExecGrp_LegRefID;
        f_InstrmtLegExecGrp_LegPrice = f_InstrmtLegExecGrp_LegPrice;
        f_InstrmtLegExecGrp_LegSettlType = f_InstrmtLegExecGrp_LegSettlType;
        f_InstrmtLegExecGrp_LegSettlDate = f_InstrmtLegExecGrp_LegSettlDate;
        f_InstrmtLegExecGrp_LegLastPx = f_InstrmtLegExecGrp_LegLastPx
    }
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
;;

let full_rg_instrmtlegexecgrp_decoder  : fix_rg_instrmtlegexecgrp decoder =
    list full_rg_inner_InstrmtLegExecGrp_decoder
;;

let full_rg_inner_LegQuotStatGrp_decoder  : fix_rg_inner_legquotstatgrp decoder =
    (field "NestedParties" full_rg_nestedparties_decoder) >>= (fun f_LegQuotStatGrp_NestedParties -> (field "LegStipulations" full_rg_legstipulations_decoder) >>= (fun f_LegQuotStatGrp_LegStipulations -> (maybe (field "LegSettlDate" localmktdate_decoder)) >>= (fun f_LegQuotStatGrp_LegSettlDate -> (maybe (field "LegSettlType" char_decoder)) >>= (fun f_LegQuotStatGrp_LegSettlType -> (maybe (field "LegSwapType" full_enum_legswaptype_decoder)) >>= (fun f_LegQuotStatGrp_LegSwapType -> (maybe (field "LegQty" float_6_decoder)) >>= (fun f_LegQuotStatGrp_LegQty -> (field "InstrumentLeg" full_record_instrumentleg_decoder) >>= (fun f_LegQuotStatGrp_InstrumentLeg -> (maybe (field "NoLegs" int_decoder)) >>= (fun f_LegQuotStatGrp_NoLegs -> succeed {
        f_LegQuotStatGrp_NoLegs = f_LegQuotStatGrp_NoLegs;
        f_LegQuotStatGrp_InstrumentLeg = f_LegQuotStatGrp_InstrumentLeg;
        f_LegQuotStatGrp_LegQty = f_LegQuotStatGrp_LegQty;
        f_LegQuotStatGrp_LegSwapType = f_LegQuotStatGrp_LegSwapType;
        f_LegQuotStatGrp_LegSettlType = f_LegQuotStatGrp_LegSettlType;
        f_LegQuotStatGrp_LegSettlDate = f_LegQuotStatGrp_LegSettlDate;
        f_LegQuotStatGrp_LegStipulations = f_LegQuotStatGrp_LegStipulations;
        f_LegQuotStatGrp_NestedParties = f_LegQuotStatGrp_NestedParties
    }
    )
    )
    )
    )
    )
    )
    )
    )
;;

let full_rg_legquotstatgrp_decoder  : fix_rg_legquotstatgrp decoder =
    list full_rg_inner_LegQuotStatGrp_decoder
;;

let full_rg_inner_InstrmtLegSecListGrp_decoder  : fix_rg_inner_instrmtlegseclistgrp decoder =
    (field "LegBenchmarkCurveData" full_record_legbenchmarkcurvedata_decoder) >>= (fun f_InstrmtLegSecListGrp_LegBenchmarkCurveData -> (field "LegStipulations" full_rg_legstipulations_decoder) >>= (fun f_InstrmtLegSecListGrp_LegStipulations -> (maybe (field "LegSettlType" char_decoder)) >>= (fun f_InstrmtLegSecListGrp_LegSettlType -> (maybe (field "LegSwapType" full_enum_legswaptype_decoder)) >>= (fun f_InstrmtLegSecListGrp_LegSwapType -> (field "InstrumentLeg" full_record_instrumentleg_decoder) >>= (fun f_InstrmtLegSecListGrp_InstrumentLeg -> (maybe (field "NoLegs" int_decoder)) >>= (fun f_InstrmtLegSecListGrp_NoLegs -> succeed {
        f_InstrmtLegSecListGrp_NoLegs = f_InstrmtLegSecListGrp_NoLegs;
        f_InstrmtLegSecListGrp_InstrumentLeg = f_InstrmtLegSecListGrp_InstrumentLeg;
        f_InstrmtLegSecListGrp_LegSwapType = f_InstrmtLegSecListGrp_LegSwapType;
        f_InstrmtLegSecListGrp_LegSettlType = f_InstrmtLegSecListGrp_LegSettlType;
        f_InstrmtLegSecListGrp_LegStipulations = f_InstrmtLegSecListGrp_LegStipulations;
        f_InstrmtLegSecListGrp_LegBenchmarkCurveData = f_InstrmtLegSecListGrp_LegBenchmarkCurveData
    }
    )
    )
    )
    )
    )
    )
;;

let full_rg_instrmtlegseclistgrp_decoder  : fix_rg_instrmtlegseclistgrp decoder =
    list full_rg_inner_InstrmtLegSecListGrp_decoder
;;

let full_rg_inner_TrdInstrmtLegGrp_decoder  : fix_rg_inner_trdinstrmtleggrp decoder =
    (maybe (field "LegLastPx" float_6_decoder)) >>= (fun f_TrdInstrmtLegGrp_LegLastPx -> (maybe (field "LegSettlDate" localmktdate_decoder)) >>= (fun f_TrdInstrmtLegGrp_LegSettlDate -> (maybe (field "LegSettlType" char_decoder)) >>= (fun f_TrdInstrmtLegGrp_LegSettlType -> (maybe (field "LegPrice" float_6_decoder)) >>= (fun f_TrdInstrmtLegGrp_LegPrice -> (maybe (field "LegRefID" string_decoder)) >>= (fun f_TrdInstrmtLegGrp_LegRefID -> (field "NestedParties" full_rg_nestedparties_decoder) >>= (fun f_TrdInstrmtLegGrp_NestedParties -> (maybe (field "LegCoveredOrUncovered" int_decoder)) >>= (fun f_TrdInstrmtLegGrp_LegCoveredOrUncovered -> (maybe (field "LegPositionEffect" char_decoder)) >>= (fun f_TrdInstrmtLegGrp_LegPositionEffect -> (field "LegStipulations" full_rg_legstipulations_decoder) >>= (fun f_TrdInstrmtLegGrp_LegStipulations -> (maybe (field "LegSwapType" full_enum_legswaptype_decoder)) >>= (fun f_TrdInstrmtLegGrp_LegSwapType -> (maybe (field "LegQty" float_6_decoder)) >>= (fun f_TrdInstrmtLegGrp_LegQty -> (field "InstrumentLeg" full_record_instrumentleg_decoder) >>= (fun f_TrdInstrmtLegGrp_InstrumentLeg -> (maybe (field "NoLegs" int_decoder)) >>= (fun f_TrdInstrmtLegGrp_NoLegs -> succeed {
        f_TrdInstrmtLegGrp_NoLegs = f_TrdInstrmtLegGrp_NoLegs;
        f_TrdInstrmtLegGrp_InstrumentLeg = f_TrdInstrmtLegGrp_InstrumentLeg;
        f_TrdInstrmtLegGrp_LegQty = f_TrdInstrmtLegGrp_LegQty;
        f_TrdInstrmtLegGrp_LegSwapType = f_TrdInstrmtLegGrp_LegSwapType;
        f_TrdInstrmtLegGrp_LegStipulations = f_TrdInstrmtLegGrp_LegStipulations;
        f_TrdInstrmtLegGrp_LegPositionEffect = f_TrdInstrmtLegGrp_LegPositionEffect;
        f_TrdInstrmtLegGrp_LegCoveredOrUncovered = f_TrdInstrmtLegGrp_LegCoveredOrUncovered;
        f_TrdInstrmtLegGrp_NestedParties = f_TrdInstrmtLegGrp_NestedParties;
        f_TrdInstrmtLegGrp_LegRefID = f_TrdInstrmtLegGrp_LegRefID;
        f_TrdInstrmtLegGrp_LegPrice = f_TrdInstrmtLegGrp_LegPrice;
        f_TrdInstrmtLegGrp_LegSettlType = f_TrdInstrmtLegGrp_LegSettlType;
        f_TrdInstrmtLegGrp_LegSettlDate = f_TrdInstrmtLegGrp_LegSettlDate;
        f_TrdInstrmtLegGrp_LegLastPx = f_TrdInstrmtLegGrp_LegLastPx
    }
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
;;

let full_rg_trdinstrmtleggrp_decoder  : fix_rg_trdinstrmtleggrp decoder =
    list full_rg_inner_TrdInstrmtLegGrp_decoder
;;

let full_rg_inner_InstrmtLegGrp_decoder  : fix_rg_inner_instrmtleggrp decoder =
    (field "InstrumentLeg" full_record_instrumentleg_decoder) >>= (fun f_InstrmtLegGrp_InstrumentLeg -> (maybe (field "NoLegs" int_decoder)) >>= (fun f_InstrmtLegGrp_NoLegs -> succeed {
        f_InstrmtLegGrp_NoLegs = f_InstrmtLegGrp_NoLegs;
        f_InstrmtLegGrp_InstrumentLeg = f_InstrmtLegGrp_InstrumentLeg
    }
    )
    )
;;

let full_rg_instrmtleggrp_decoder  : fix_rg_instrmtleggrp decoder =
    list full_rg_inner_InstrmtLegGrp_decoder
;;

let full_rg_inner_InstrmtLegIOIGrp_decoder  : fix_rg_inner_instrmtlegioigrp decoder =
    (field "LegStipulations" full_rg_legstipulations_decoder) >>= (fun f_InstrmtLegIOIGrp_LegStipulations -> (maybe (field "LegIOIQty" string_decoder)) >>= (fun f_InstrmtLegIOIGrp_LegIOIQty -> (field "InstrumentLeg" full_record_instrumentleg_decoder) >>= (fun f_InstrmtLegIOIGrp_InstrumentLeg -> (maybe (field "NoLegs" int_decoder)) >>= (fun f_InstrmtLegIOIGrp_NoLegs -> succeed {
        f_InstrmtLegIOIGrp_NoLegs = f_InstrmtLegIOIGrp_NoLegs;
        f_InstrmtLegIOIGrp_InstrumentLeg = f_InstrmtLegIOIGrp_InstrumentLeg;
        f_InstrmtLegIOIGrp_LegIOIQty = f_InstrmtLegIOIGrp_LegIOIQty;
        f_InstrmtLegIOIGrp_LegStipulations = f_InstrmtLegIOIGrp_LegStipulations
    }
    )
    )
    )
    )
;;

let full_rg_instrmtlegioigrp_decoder  : fix_rg_instrmtlegioigrp decoder =
    list full_rg_inner_InstrmtLegIOIGrp_decoder
;;

let full_rg_inner_LegQuotGrp_decoder  : fix_rg_inner_legquotgrp decoder =
    (field "LegBenchmarkCurveData" full_record_legbenchmarkcurvedata_decoder) >>= (fun f_LegQuotGrp_LegBenchmarkCurveData -> (maybe (field "LegOfferPx" float_6_decoder)) >>= (fun f_LegQuotGrp_LegOfferPx -> (maybe (field "LegBidPx" float_6_decoder)) >>= (fun f_LegQuotGrp_LegBidPx -> (maybe (field "LegPriceType" int_decoder)) >>= (fun f_LegQuotGrp_LegPriceType -> (field "NestedParties" full_rg_nestedparties_decoder) >>= (fun f_LegQuotGrp_NestedParties -> (field "LegStipulations" full_rg_legstipulations_decoder) >>= (fun f_LegQuotGrp_LegStipulations -> (maybe (field "LegSettlDate" localmktdate_decoder)) >>= (fun f_LegQuotGrp_LegSettlDate -> (maybe (field "LegSettlType" char_decoder)) >>= (fun f_LegQuotGrp_LegSettlType -> (maybe (field "LegSwapType" full_enum_legswaptype_decoder)) >>= (fun f_LegQuotGrp_LegSwapType -> (maybe (field "LegQty" float_6_decoder)) >>= (fun f_LegQuotGrp_LegQty -> (field "InstrumentLeg" full_record_instrumentleg_decoder) >>= (fun f_LegQuotGrp_InstrumentLeg -> (maybe (field "NoLegs" int_decoder)) >>= (fun f_LegQuotGrp_NoLegs -> succeed {
        f_LegQuotGrp_NoLegs = f_LegQuotGrp_NoLegs;
        f_LegQuotGrp_InstrumentLeg = f_LegQuotGrp_InstrumentLeg;
        f_LegQuotGrp_LegQty = f_LegQuotGrp_LegQty;
        f_LegQuotGrp_LegSwapType = f_LegQuotGrp_LegSwapType;
        f_LegQuotGrp_LegSettlType = f_LegQuotGrp_LegSettlType;
        f_LegQuotGrp_LegSettlDate = f_LegQuotGrp_LegSettlDate;
        f_LegQuotGrp_LegStipulations = f_LegQuotGrp_LegStipulations;
        f_LegQuotGrp_NestedParties = f_LegQuotGrp_NestedParties;
        f_LegQuotGrp_LegPriceType = f_LegQuotGrp_LegPriceType;
        f_LegQuotGrp_LegBidPx = f_LegQuotGrp_LegBidPx;
        f_LegQuotGrp_LegOfferPx = f_LegQuotGrp_LegOfferPx;
        f_LegQuotGrp_LegBenchmarkCurveData = f_LegQuotGrp_LegBenchmarkCurveData
    }
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
;;

let full_rg_legquotgrp_decoder  : fix_rg_legquotgrp decoder =
    list full_rg_inner_LegQuotGrp_decoder
;;

let full_rg_inner_QuotReqLegsGrp_decoder  : fix_rg_inner_quotreqlegsgrp decoder =
    (field "LegBenchmarkCurveData" full_record_legbenchmarkcurvedata_decoder) >>= (fun f_QuotReqLegsGrp_LegBenchmarkCurveData -> (field "NestedParties" full_rg_nestedparties_decoder) >>= (fun f_QuotReqLegsGrp_NestedParties -> (field "LegStipulations" full_rg_legstipulations_decoder) >>= (fun f_QuotReqLegsGrp_LegStipulations -> (maybe (field "LegSettlDate" localmktdate_decoder)) >>= (fun f_QuotReqLegsGrp_LegSettlDate -> (maybe (field "LegSettlType" char_decoder)) >>= (fun f_QuotReqLegsGrp_LegSettlType -> (maybe (field "LegSwapType" full_enum_legswaptype_decoder)) >>= (fun f_QuotReqLegsGrp_LegSwapType -> (maybe (field "LegQty" float_6_decoder)) >>= (fun f_QuotReqLegsGrp_LegQty -> (field "InstrumentLeg" full_record_instrumentleg_decoder) >>= (fun f_QuotReqLegsGrp_InstrumentLeg -> (maybe (field "NoLegs" int_decoder)) >>= (fun f_QuotReqLegsGrp_NoLegs -> succeed {
        f_QuotReqLegsGrp_NoLegs = f_QuotReqLegsGrp_NoLegs;
        f_QuotReqLegsGrp_InstrumentLeg = f_QuotReqLegsGrp_InstrumentLeg;
        f_QuotReqLegsGrp_LegQty = f_QuotReqLegsGrp_LegQty;
        f_QuotReqLegsGrp_LegSwapType = f_QuotReqLegsGrp_LegSwapType;
        f_QuotReqLegsGrp_LegSettlType = f_QuotReqLegsGrp_LegSettlType;
        f_QuotReqLegsGrp_LegSettlDate = f_QuotReqLegsGrp_LegSettlDate;
        f_QuotReqLegsGrp_LegStipulations = f_QuotReqLegsGrp_LegStipulations;
        f_QuotReqLegsGrp_NestedParties = f_QuotReqLegsGrp_NestedParties;
        f_QuotReqLegsGrp_LegBenchmarkCurveData = f_QuotReqLegsGrp_LegBenchmarkCurveData
    }
    )
    )
    )
    )
    )
    )
    )
    )
    )
;;

let full_rg_quotreqlegsgrp_decoder  : fix_rg_quotreqlegsgrp decoder =
    list full_rg_inner_QuotReqLegsGrp_decoder
;;

let full_rg_inner_QuotEntryAckGrp_decoder  : fix_rg_inner_quotentryackgrp decoder =
    (maybe (field "QuoteEntryRejectReason" int_decoder)) >>= (fun f_QuotEntryAckGrp_QuoteEntryRejectReason -> (maybe (field "Currency" full_enum_currency_decoder)) >>= (fun f_QuotEntryAckGrp_Currency -> (maybe (field "OfferForwardPoints2" float_6_decoder)) >>= (fun f_QuotEntryAckGrp_OfferForwardPoints2 -> (maybe (field "BidForwardPoints2" float_6_decoder)) >>= (fun f_QuotEntryAckGrp_BidForwardPoints2 -> (maybe (field "OrderQty2" float_6_decoder)) >>= (fun f_QuotEntryAckGrp_OrderQty2 -> (maybe (field "SettlDate2" localmktdate_decoder)) >>= (fun f_QuotEntryAckGrp_SettlDate2 -> (maybe (field "OrdType" full_enum_ordtype_decoder)) >>= (fun f_QuotEntryAckGrp_OrdType -> (maybe (field "SettlDate" localmktdate_decoder)) >>= (fun f_QuotEntryAckGrp_SettlDate -> (maybe (field "TradingSessionSubID" string_decoder)) >>= (fun f_QuotEntryAckGrp_TradingSessionSubID -> (maybe (field "TradingSessionID" string_decoder)) >>= (fun f_QuotEntryAckGrp_TradingSessionID -> (maybe (field "TransactTime" utctimestamp_milli_decoder)) >>= (fun f_QuotEntryAckGrp_TransactTime -> (maybe (field "OfferYield" float_6_decoder)) >>= (fun f_QuotEntryAckGrp_OfferYield -> (maybe (field "MidYield" float_6_decoder)) >>= (fun f_QuotEntryAckGrp_MidYield -> (maybe (field "BidYield" float_6_decoder)) >>= (fun f_QuotEntryAckGrp_BidYield -> (maybe (field "MidPx" float_6_decoder)) >>= (fun f_QuotEntryAckGrp_MidPx -> (maybe (field "OfferForwardPoints" float_6_decoder)) >>= (fun f_QuotEntryAckGrp_OfferForwardPoints -> (maybe (field "BidForwardPoints" float_6_decoder)) >>= (fun f_QuotEntryAckGrp_BidForwardPoints -> (maybe (field "OfferSpotRate" float_6_decoder)) >>= (fun f_QuotEntryAckGrp_OfferSpotRate -> (maybe (field "BidSpotRate" float_6_decoder)) >>= (fun f_QuotEntryAckGrp_BidSpotRate -> (maybe (field "ValidUntilTime" utctimestamp_milli_decoder)) >>= (fun f_QuotEntryAckGrp_ValidUntilTime -> (maybe (field "OfferSize" float_6_decoder)) >>= (fun f_QuotEntryAckGrp_OfferSize -> (maybe (field "BidSize" float_6_decoder)) >>= (fun f_QuotEntryAckGrp_BidSize -> (maybe (field "OfferPx" float_6_decoder)) >>= (fun f_QuotEntryAckGrp_OfferPx -> (maybe (field "BidPx" float_6_decoder)) >>= (fun f_QuotEntryAckGrp_BidPx -> (field "InstrmtLegGrp" full_rg_instrmtleggrp_decoder) >>= (fun f_QuotEntryAckGrp_InstrmtLegGrp -> (field "Instrument" full_record_instrument_decoder) >>= (fun f_QuotEntryAckGrp_Instrument -> (maybe (field "QuoteEntryID" string_decoder)) >>= (fun f_QuotEntryAckGrp_QuoteEntryID -> (maybe (field "NoQuoteEntries" int_decoder)) >>= (fun f_QuotEntryAckGrp_NoQuoteEntries -> succeed {
        f_QuotEntryAckGrp_NoQuoteEntries = f_QuotEntryAckGrp_NoQuoteEntries;
        f_QuotEntryAckGrp_QuoteEntryID = f_QuotEntryAckGrp_QuoteEntryID;
        f_QuotEntryAckGrp_Instrument = f_QuotEntryAckGrp_Instrument;
        f_QuotEntryAckGrp_InstrmtLegGrp = f_QuotEntryAckGrp_InstrmtLegGrp;
        f_QuotEntryAckGrp_BidPx = f_QuotEntryAckGrp_BidPx;
        f_QuotEntryAckGrp_OfferPx = f_QuotEntryAckGrp_OfferPx;
        f_QuotEntryAckGrp_BidSize = f_QuotEntryAckGrp_BidSize;
        f_QuotEntryAckGrp_OfferSize = f_QuotEntryAckGrp_OfferSize;
        f_QuotEntryAckGrp_ValidUntilTime = f_QuotEntryAckGrp_ValidUntilTime;
        f_QuotEntryAckGrp_BidSpotRate = f_QuotEntryAckGrp_BidSpotRate;
        f_QuotEntryAckGrp_OfferSpotRate = f_QuotEntryAckGrp_OfferSpotRate;
        f_QuotEntryAckGrp_BidForwardPoints = f_QuotEntryAckGrp_BidForwardPoints;
        f_QuotEntryAckGrp_OfferForwardPoints = f_QuotEntryAckGrp_OfferForwardPoints;
        f_QuotEntryAckGrp_MidPx = f_QuotEntryAckGrp_MidPx;
        f_QuotEntryAckGrp_BidYield = f_QuotEntryAckGrp_BidYield;
        f_QuotEntryAckGrp_MidYield = f_QuotEntryAckGrp_MidYield;
        f_QuotEntryAckGrp_OfferYield = f_QuotEntryAckGrp_OfferYield;
        f_QuotEntryAckGrp_TransactTime = f_QuotEntryAckGrp_TransactTime;
        f_QuotEntryAckGrp_TradingSessionID = f_QuotEntryAckGrp_TradingSessionID;
        f_QuotEntryAckGrp_TradingSessionSubID = f_QuotEntryAckGrp_TradingSessionSubID;
        f_QuotEntryAckGrp_SettlDate = f_QuotEntryAckGrp_SettlDate;
        f_QuotEntryAckGrp_OrdType = f_QuotEntryAckGrp_OrdType;
        f_QuotEntryAckGrp_SettlDate2 = f_QuotEntryAckGrp_SettlDate2;
        f_QuotEntryAckGrp_OrderQty2 = f_QuotEntryAckGrp_OrderQty2;
        f_QuotEntryAckGrp_BidForwardPoints2 = f_QuotEntryAckGrp_BidForwardPoints2;
        f_QuotEntryAckGrp_OfferForwardPoints2 = f_QuotEntryAckGrp_OfferForwardPoints2;
        f_QuotEntryAckGrp_Currency = f_QuotEntryAckGrp_Currency;
        f_QuotEntryAckGrp_QuoteEntryRejectReason = f_QuotEntryAckGrp_QuoteEntryRejectReason
    }
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
;;

let full_rg_quotentryackgrp_decoder  : fix_rg_quotentryackgrp decoder =
    list full_rg_inner_QuotEntryAckGrp_decoder
;;

let full_rg_inner_QuotEntryGrp_decoder  : fix_rg_inner_quotentrygrp decoder =
    (maybe (field "Currency" full_enum_currency_decoder)) >>= (fun f_QuotEntryGrp_Currency -> (maybe (field "OfferForwardPoints2" float_6_decoder)) >>= (fun f_QuotEntryGrp_OfferForwardPoints2 -> (maybe (field "BidForwardPoints2" float_6_decoder)) >>= (fun f_QuotEntryGrp_BidForwardPoints2 -> (maybe (field "OrderQty2" float_6_decoder)) >>= (fun f_QuotEntryGrp_OrderQty2 -> (maybe (field "SettlDate2" localmktdate_decoder)) >>= (fun f_QuotEntryGrp_SettlDate2 -> (maybe (field "OrdType" full_enum_ordtype_decoder)) >>= (fun f_QuotEntryGrp_OrdType -> (maybe (field "SettlDate" localmktdate_decoder)) >>= (fun f_QuotEntryGrp_SettlDate -> (maybe (field "TradingSessionSubID" string_decoder)) >>= (fun f_QuotEntryGrp_TradingSessionSubID -> (maybe (field "TradingSessionID" string_decoder)) >>= (fun f_QuotEntryGrp_TradingSessionID -> (maybe (field "TransactTime" utctimestamp_milli_decoder)) >>= (fun f_QuotEntryGrp_TransactTime -> (maybe (field "OfferYield" float_6_decoder)) >>= (fun f_QuotEntryGrp_OfferYield -> (maybe (field "MidYield" float_6_decoder)) >>= (fun f_QuotEntryGrp_MidYield -> (maybe (field "BidYield" float_6_decoder)) >>= (fun f_QuotEntryGrp_BidYield -> (maybe (field "MidPx" float_6_decoder)) >>= (fun f_QuotEntryGrp_MidPx -> (maybe (field "OfferForwardPoints" float_6_decoder)) >>= (fun f_QuotEntryGrp_OfferForwardPoints -> (maybe (field "BidForwardPoints" float_6_decoder)) >>= (fun f_QuotEntryGrp_BidForwardPoints -> (maybe (field "OfferSpotRate" float_6_decoder)) >>= (fun f_QuotEntryGrp_OfferSpotRate -> (maybe (field "BidSpotRate" float_6_decoder)) >>= (fun f_QuotEntryGrp_BidSpotRate -> (maybe (field "ValidUntilTime" utctimestamp_milli_decoder)) >>= (fun f_QuotEntryGrp_ValidUntilTime -> (maybe (field "OfferSize" float_6_decoder)) >>= (fun f_QuotEntryGrp_OfferSize -> (maybe (field "BidSize" float_6_decoder)) >>= (fun f_QuotEntryGrp_BidSize -> (maybe (field "OfferPx" float_6_decoder)) >>= (fun f_QuotEntryGrp_OfferPx -> (maybe (field "BidPx" float_6_decoder)) >>= (fun f_QuotEntryGrp_BidPx -> (field "InstrmtLegGrp" full_rg_instrmtleggrp_decoder) >>= (fun f_QuotEntryGrp_InstrmtLegGrp -> (field "Instrument" full_record_instrument_decoder) >>= (fun f_QuotEntryGrp_Instrument -> (maybe (field "QuoteEntryID" string_decoder)) >>= (fun f_QuotEntryGrp_QuoteEntryID -> (maybe (field "NoQuoteEntries" int_decoder)) >>= (fun f_QuotEntryGrp_NoQuoteEntries -> succeed {
        f_QuotEntryGrp_NoQuoteEntries = f_QuotEntryGrp_NoQuoteEntries;
        f_QuotEntryGrp_QuoteEntryID = f_QuotEntryGrp_QuoteEntryID;
        f_QuotEntryGrp_Instrument = f_QuotEntryGrp_Instrument;
        f_QuotEntryGrp_InstrmtLegGrp = f_QuotEntryGrp_InstrmtLegGrp;
        f_QuotEntryGrp_BidPx = f_QuotEntryGrp_BidPx;
        f_QuotEntryGrp_OfferPx = f_QuotEntryGrp_OfferPx;
        f_QuotEntryGrp_BidSize = f_QuotEntryGrp_BidSize;
        f_QuotEntryGrp_OfferSize = f_QuotEntryGrp_OfferSize;
        f_QuotEntryGrp_ValidUntilTime = f_QuotEntryGrp_ValidUntilTime;
        f_QuotEntryGrp_BidSpotRate = f_QuotEntryGrp_BidSpotRate;
        f_QuotEntryGrp_OfferSpotRate = f_QuotEntryGrp_OfferSpotRate;
        f_QuotEntryGrp_BidForwardPoints = f_QuotEntryGrp_BidForwardPoints;
        f_QuotEntryGrp_OfferForwardPoints = f_QuotEntryGrp_OfferForwardPoints;
        f_QuotEntryGrp_MidPx = f_QuotEntryGrp_MidPx;
        f_QuotEntryGrp_BidYield = f_QuotEntryGrp_BidYield;
        f_QuotEntryGrp_MidYield = f_QuotEntryGrp_MidYield;
        f_QuotEntryGrp_OfferYield = f_QuotEntryGrp_OfferYield;
        f_QuotEntryGrp_TransactTime = f_QuotEntryGrp_TransactTime;
        f_QuotEntryGrp_TradingSessionID = f_QuotEntryGrp_TradingSessionID;
        f_QuotEntryGrp_TradingSessionSubID = f_QuotEntryGrp_TradingSessionSubID;
        f_QuotEntryGrp_SettlDate = f_QuotEntryGrp_SettlDate;
        f_QuotEntryGrp_OrdType = f_QuotEntryGrp_OrdType;
        f_QuotEntryGrp_SettlDate2 = f_QuotEntryGrp_SettlDate2;
        f_QuotEntryGrp_OrderQty2 = f_QuotEntryGrp_OrderQty2;
        f_QuotEntryGrp_BidForwardPoints2 = f_QuotEntryGrp_BidForwardPoints2;
        f_QuotEntryGrp_OfferForwardPoints2 = f_QuotEntryGrp_OfferForwardPoints2;
        f_QuotEntryGrp_Currency = f_QuotEntryGrp_Currency
    }
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
;;

let full_rg_quotentrygrp_decoder  : fix_rg_quotentrygrp decoder =
    list full_rg_inner_QuotEntryGrp_decoder
;;

let full_rg_inner_RelSymDerivSecGrp_decoder  : fix_rg_inner_relsymderivsecgrp decoder =
    (maybe (field "EncodedText" string_decoder)) >>= (fun f_RelSymDerivSecGrp_EncodedText -> (maybe (field "EncodedTextLen" int_decoder)) >>= (fun f_RelSymDerivSecGrp_EncodedTextLen -> (maybe (field "Text" string_decoder)) >>= (fun f_RelSymDerivSecGrp_Text -> (maybe (field "TradingSessionSubID" string_decoder)) >>= (fun f_RelSymDerivSecGrp_TradingSessionSubID -> (maybe (field "TradingSessionID" string_decoder)) >>= (fun f_RelSymDerivSecGrp_TradingSessionID -> (field "InstrmtLegGrp" full_rg_instrmtleggrp_decoder) >>= (fun f_RelSymDerivSecGrp_InstrmtLegGrp -> (field "InstrumentExtension" full_record_instrumentextension_decoder) >>= (fun f_RelSymDerivSecGrp_InstrumentExtension -> (maybe (field "ExpirationCycle" full_enum_expirationcycle_decoder)) >>= (fun f_RelSymDerivSecGrp_ExpirationCycle -> (maybe (field "Currency" full_enum_currency_decoder)) >>= (fun f_RelSymDerivSecGrp_Currency -> (field "Instrument" full_record_instrument_decoder) >>= (fun f_RelSymDerivSecGrp_Instrument -> (maybe (field "NoRelatedSym" int_decoder)) >>= (fun f_RelSymDerivSecGrp_NoRelatedSym -> succeed {
        f_RelSymDerivSecGrp_NoRelatedSym = f_RelSymDerivSecGrp_NoRelatedSym;
        f_RelSymDerivSecGrp_Instrument = f_RelSymDerivSecGrp_Instrument;
        f_RelSymDerivSecGrp_Currency = f_RelSymDerivSecGrp_Currency;
        f_RelSymDerivSecGrp_ExpirationCycle = f_RelSymDerivSecGrp_ExpirationCycle;
        f_RelSymDerivSecGrp_InstrumentExtension = f_RelSymDerivSecGrp_InstrumentExtension;
        f_RelSymDerivSecGrp_InstrmtLegGrp = f_RelSymDerivSecGrp_InstrmtLegGrp;
        f_RelSymDerivSecGrp_TradingSessionID = f_RelSymDerivSecGrp_TradingSessionID;
        f_RelSymDerivSecGrp_TradingSessionSubID = f_RelSymDerivSecGrp_TradingSessionSubID;
        f_RelSymDerivSecGrp_Text = f_RelSymDerivSecGrp_Text;
        f_RelSymDerivSecGrp_EncodedTextLen = f_RelSymDerivSecGrp_EncodedTextLen;
        f_RelSymDerivSecGrp_EncodedText = f_RelSymDerivSecGrp_EncodedText
    }
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
;;

let full_rg_relsymderivsecgrp_decoder  : fix_rg_relsymderivsecgrp decoder =
    list full_rg_inner_RelSymDerivSecGrp_decoder
;;

let full_rg_inner_TrdCapRptSideGrp_decoder  : fix_rg_inner_trdcaprptsidegrp decoder =
    (field "TrdAllocGrp" full_rg_trdallocgrp_decoder) >>= (fun f_TrdCapRptSideGrp_TrdAllocGrp -> (maybe (field "AllocID" string_decoder)) >>= (fun f_TrdCapRptSideGrp_AllocID -> (maybe (field "PreallocMethod" full_enum_preallocmethod_decoder)) >>= (fun f_TrdCapRptSideGrp_PreallocMethod -> (maybe (field "TradeAllocIndicator" full_enum_tradeallocindicator_decoder)) >>= (fun f_TrdCapRptSideGrp_TradeAllocIndicator -> (maybe (field "ExchangeRule" string_decoder)) >>= (fun f_TrdCapRptSideGrp_ExchangeRule -> (field "MiscFeesGrp" full_rg_miscfeesgrp_decoder) >>= (fun f_TrdCapRptSideGrp_MiscFeesGrp -> (field "Stipulations" full_rg_stipulations_decoder) >>= (fun f_TrdCapRptSideGrp_Stipulations -> (field "ContAmtGrp" full_rg_contamtgrp_decoder) >>= (fun f_TrdCapRptSideGrp_ContAmtGrp -> (maybe (field "SideMultiLegReportingType" full_enum_sidemultilegreportingtype_decoder)) >>= (fun f_TrdCapRptSideGrp_SideMultiLegReportingType -> (maybe (field "EncodedText" string_decoder)) >>= (fun f_TrdCapRptSideGrp_EncodedText -> (maybe (field "EncodedTextLen" int_decoder)) >>= (fun f_TrdCapRptSideGrp_EncodedTextLen -> (maybe (field "Text" string_decoder)) >>= (fun f_TrdCapRptSideGrp_Text -> (maybe (field "PositionEffect" full_enum_positioneffect_decoder)) >>= (fun f_TrdCapRptSideGrp_PositionEffect -> (maybe (field "SettlCurrFxRateCalc" full_enum_settlcurrfxratecalc_decoder)) >>= (fun f_TrdCapRptSideGrp_SettlCurrFxRateCalc -> (maybe (field "SettlCurrFxRate" float_decoder)) >>= (fun f_TrdCapRptSideGrp_SettlCurrFxRate -> (maybe (field "SettlCurrency" full_enum_currency_decoder)) >>= (fun f_TrdCapRptSideGrp_SettlCurrency -> (maybe (field "SettlCurrAmt" float_6_decoder)) >>= (fun f_TrdCapRptSideGrp_SettlCurrAmt -> (maybe (field "NetMoney" float_6_decoder)) >>= (fun f_TrdCapRptSideGrp_NetMoney -> (maybe (field "TotalTakedown" float_6_decoder)) >>= (fun f_TrdCapRptSideGrp_TotalTakedown -> (maybe (field "Concession" float_6_decoder)) >>= (fun f_TrdCapRptSideGrp_Concession -> (maybe (field "EndCash" float_6_decoder)) >>= (fun f_TrdCapRptSideGrp_EndCash -> (maybe (field "StartCash" float_6_decoder)) >>= (fun f_TrdCapRptSideGrp_StartCash -> (maybe (field "EndAccruedInterestAmt" float_6_decoder)) >>= (fun f_TrdCapRptSideGrp_EndAccruedInterestAmt -> (maybe (field "InterestAtMaturity" float_6_decoder)) >>= (fun f_TrdCapRptSideGrp_InterestAtMaturity -> (maybe (field "AccruedInterestAmt" float_6_decoder)) >>= (fun f_TrdCapRptSideGrp_AccruedInterestAmt -> (maybe (field "AccruedInterestRate" float_6_decoder)) >>= (fun f_TrdCapRptSideGrp_AccruedInterestRate -> (maybe (field "ExDate" localmktdate_decoder)) >>= (fun f_TrdCapRptSideGrp_ExDate -> (maybe (field "NumDaysInterest" int_decoder)) >>= (fun f_TrdCapRptSideGrp_NumDaysInterest -> (maybe (field "GrossTradeAmt" float_6_decoder)) >>= (fun f_TrdCapRptSideGrp_GrossTradeAmt -> (field "CommissionData" full_record_commissiondata_decoder) >>= (fun f_TrdCapRptSideGrp_CommissionData -> (maybe (field "TimeBracket" string_decoder)) >>= (fun f_TrdCapRptSideGrp_TimeBracket -> (maybe (field "TradingSessionSubID" string_decoder)) >>= (fun f_TrdCapRptSideGrp_TradingSessionSubID -> (maybe (field "TradingSessionID" string_decoder)) >>= (fun f_TrdCapRptSideGrp_TradingSessionID -> (maybe (field "TransBkdTime" utctimestamp_milli_decoder)) >>= (fun f_TrdCapRptSideGrp_TransBkdTime -> (maybe (field "ExecInst" full_enum_execinst_decoder)) >>= (fun f_TrdCapRptSideGrp_ExecInst -> (maybe (field "OrdType" full_enum_ordtype_decoder)) >>= (fun f_TrdCapRptSideGrp_OrdType -> (maybe (field "CustOrderCapacity" full_enum_custordercapacity_decoder)) >>= (fun f_TrdCapRptSideGrp_CustOrderCapacity -> (maybe (field "OrderRestrictions" full_enum_orderrestrictions_decoder)) >>= (fun f_TrdCapRptSideGrp_OrderRestrictions -> (maybe (field "OrderCapacity" full_enum_ordercapacity_decoder)) >>= (fun f_TrdCapRptSideGrp_OrderCapacity -> (maybe (field "SolicitedFlag" full_enum_solicitedflag_decoder)) >>= (fun f_TrdCapRptSideGrp_SolicitedFlag -> (maybe (field "ComplianceID" string_decoder)) >>= (fun f_TrdCapRptSideGrp_ComplianceID -> (maybe (field "Currency" full_enum_currency_decoder)) >>= (fun f_TrdCapRptSideGrp_Currency -> (maybe (field "OrderInputDevice" string_decoder)) >>= (fun f_TrdCapRptSideGrp_OrderInputDevice -> (maybe (field "TradeInputDevice" string_decoder)) >>= (fun f_TrdCapRptSideGrp_TradeInputDevice -> (maybe (field "TradeInputSource" string_decoder)) >>= (fun f_TrdCapRptSideGrp_TradeInputSource -> (field "ClrInstGrp" full_rg_clrinstgrp_decoder) >>= (fun f_TrdCapRptSideGrp_ClrInstGrp -> (maybe (field "OddLot" full_enum_oddlot_decoder)) >>= (fun f_TrdCapRptSideGrp_OddLot -> (maybe (field "ProcessCode" full_enum_processcode_decoder)) >>= (fun f_TrdCapRptSideGrp_ProcessCode -> (maybe (field "AccountType" full_enum_accounttype_decoder)) >>= (fun f_TrdCapRptSideGrp_AccountType -> (maybe (field "AcctIDSource" full_enum_acctidsource_decoder)) >>= (fun f_TrdCapRptSideGrp_AcctIDSource -> (maybe (field "Account" string_decoder)) >>= (fun f_TrdCapRptSideGrp_Account -> (field "Parties" full_rg_parties_decoder) >>= (fun f_TrdCapRptSideGrp_Parties -> (maybe (field "ListID" string_decoder)) >>= (fun f_TrdCapRptSideGrp_ListID -> (maybe (field "SecondaryClOrdID" string_decoder)) >>= (fun f_TrdCapRptSideGrp_SecondaryClOrdID -> (maybe (field "ClOrdID" string_decoder)) >>= (fun f_TrdCapRptSideGrp_ClOrdID -> (maybe (field "SecondaryOrderID" string_decoder)) >>= (fun f_TrdCapRptSideGrp_SecondaryOrderID -> (maybe (field "OrderID" string_decoder)) >>= (fun f_TrdCapRptSideGrp_OrderID -> (maybe (field "Side" full_enum_side_decoder)) >>= (fun f_TrdCapRptSideGrp_Side -> (maybe (field "NoSides" full_enum_nosides_decoder)) >>= (fun f_TrdCapRptSideGrp_NoSides -> succeed {
        f_TrdCapRptSideGrp_NoSides = f_TrdCapRptSideGrp_NoSides;
        f_TrdCapRptSideGrp_Side = f_TrdCapRptSideGrp_Side;
        f_TrdCapRptSideGrp_OrderID = f_TrdCapRptSideGrp_OrderID;
        f_TrdCapRptSideGrp_SecondaryOrderID = f_TrdCapRptSideGrp_SecondaryOrderID;
        f_TrdCapRptSideGrp_ClOrdID = f_TrdCapRptSideGrp_ClOrdID;
        f_TrdCapRptSideGrp_SecondaryClOrdID = f_TrdCapRptSideGrp_SecondaryClOrdID;
        f_TrdCapRptSideGrp_ListID = f_TrdCapRptSideGrp_ListID;
        f_TrdCapRptSideGrp_Parties = f_TrdCapRptSideGrp_Parties;
        f_TrdCapRptSideGrp_Account = f_TrdCapRptSideGrp_Account;
        f_TrdCapRptSideGrp_AcctIDSource = f_TrdCapRptSideGrp_AcctIDSource;
        f_TrdCapRptSideGrp_AccountType = f_TrdCapRptSideGrp_AccountType;
        f_TrdCapRptSideGrp_ProcessCode = f_TrdCapRptSideGrp_ProcessCode;
        f_TrdCapRptSideGrp_OddLot = f_TrdCapRptSideGrp_OddLot;
        f_TrdCapRptSideGrp_ClrInstGrp = f_TrdCapRptSideGrp_ClrInstGrp;
        f_TrdCapRptSideGrp_TradeInputSource = f_TrdCapRptSideGrp_TradeInputSource;
        f_TrdCapRptSideGrp_TradeInputDevice = f_TrdCapRptSideGrp_TradeInputDevice;
        f_TrdCapRptSideGrp_OrderInputDevice = f_TrdCapRptSideGrp_OrderInputDevice;
        f_TrdCapRptSideGrp_Currency = f_TrdCapRptSideGrp_Currency;
        f_TrdCapRptSideGrp_ComplianceID = f_TrdCapRptSideGrp_ComplianceID;
        f_TrdCapRptSideGrp_SolicitedFlag = f_TrdCapRptSideGrp_SolicitedFlag;
        f_TrdCapRptSideGrp_OrderCapacity = f_TrdCapRptSideGrp_OrderCapacity;
        f_TrdCapRptSideGrp_OrderRestrictions = f_TrdCapRptSideGrp_OrderRestrictions;
        f_TrdCapRptSideGrp_CustOrderCapacity = f_TrdCapRptSideGrp_CustOrderCapacity;
        f_TrdCapRptSideGrp_OrdType = f_TrdCapRptSideGrp_OrdType;
        f_TrdCapRptSideGrp_ExecInst = f_TrdCapRptSideGrp_ExecInst;
        f_TrdCapRptSideGrp_TransBkdTime = f_TrdCapRptSideGrp_TransBkdTime;
        f_TrdCapRptSideGrp_TradingSessionID = f_TrdCapRptSideGrp_TradingSessionID;
        f_TrdCapRptSideGrp_TradingSessionSubID = f_TrdCapRptSideGrp_TradingSessionSubID;
        f_TrdCapRptSideGrp_TimeBracket = f_TrdCapRptSideGrp_TimeBracket;
        f_TrdCapRptSideGrp_CommissionData = f_TrdCapRptSideGrp_CommissionData;
        f_TrdCapRptSideGrp_GrossTradeAmt = f_TrdCapRptSideGrp_GrossTradeAmt;
        f_TrdCapRptSideGrp_NumDaysInterest = f_TrdCapRptSideGrp_NumDaysInterest;
        f_TrdCapRptSideGrp_ExDate = f_TrdCapRptSideGrp_ExDate;
        f_TrdCapRptSideGrp_AccruedInterestRate = f_TrdCapRptSideGrp_AccruedInterestRate;
        f_TrdCapRptSideGrp_AccruedInterestAmt = f_TrdCapRptSideGrp_AccruedInterestAmt;
        f_TrdCapRptSideGrp_InterestAtMaturity = f_TrdCapRptSideGrp_InterestAtMaturity;
        f_TrdCapRptSideGrp_EndAccruedInterestAmt = f_TrdCapRptSideGrp_EndAccruedInterestAmt;
        f_TrdCapRptSideGrp_StartCash = f_TrdCapRptSideGrp_StartCash;
        f_TrdCapRptSideGrp_EndCash = f_TrdCapRptSideGrp_EndCash;
        f_TrdCapRptSideGrp_Concession = f_TrdCapRptSideGrp_Concession;
        f_TrdCapRptSideGrp_TotalTakedown = f_TrdCapRptSideGrp_TotalTakedown;
        f_TrdCapRptSideGrp_NetMoney = f_TrdCapRptSideGrp_NetMoney;
        f_TrdCapRptSideGrp_SettlCurrAmt = f_TrdCapRptSideGrp_SettlCurrAmt;
        f_TrdCapRptSideGrp_SettlCurrency = f_TrdCapRptSideGrp_SettlCurrency;
        f_TrdCapRptSideGrp_SettlCurrFxRate = f_TrdCapRptSideGrp_SettlCurrFxRate;
        f_TrdCapRptSideGrp_SettlCurrFxRateCalc = f_TrdCapRptSideGrp_SettlCurrFxRateCalc;
        f_TrdCapRptSideGrp_PositionEffect = f_TrdCapRptSideGrp_PositionEffect;
        f_TrdCapRptSideGrp_Text = f_TrdCapRptSideGrp_Text;
        f_TrdCapRptSideGrp_EncodedTextLen = f_TrdCapRptSideGrp_EncodedTextLen;
        f_TrdCapRptSideGrp_EncodedText = f_TrdCapRptSideGrp_EncodedText;
        f_TrdCapRptSideGrp_SideMultiLegReportingType = f_TrdCapRptSideGrp_SideMultiLegReportingType;
        f_TrdCapRptSideGrp_ContAmtGrp = f_TrdCapRptSideGrp_ContAmtGrp;
        f_TrdCapRptSideGrp_Stipulations = f_TrdCapRptSideGrp_Stipulations;
        f_TrdCapRptSideGrp_MiscFeesGrp = f_TrdCapRptSideGrp_MiscFeesGrp;
        f_TrdCapRptSideGrp_ExchangeRule = f_TrdCapRptSideGrp_ExchangeRule;
        f_TrdCapRptSideGrp_TradeAllocIndicator = f_TrdCapRptSideGrp_TradeAllocIndicator;
        f_TrdCapRptSideGrp_PreallocMethod = f_TrdCapRptSideGrp_PreallocMethod;
        f_TrdCapRptSideGrp_AllocID = f_TrdCapRptSideGrp_AllocID;
        f_TrdCapRptSideGrp_TrdAllocGrp = f_TrdCapRptSideGrp_TrdAllocGrp
    }
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
;;

let full_rg_trdcaprptsidegrp_decoder  : fix_rg_trdcaprptsidegrp decoder =
    list full_rg_inner_TrdCapRptSideGrp_decoder
;;

let full_rg_inner_LegOrdGrp_decoder  : fix_rg_inner_legordgrp decoder =
    (maybe (field "LegSettlDate" localmktdate_decoder)) >>= (fun f_LegOrdGrp_LegSettlDate -> (maybe (field "LegSettlType" char_decoder)) >>= (fun f_LegOrdGrp_LegSettlType -> (maybe (field "LegPrice" float_6_decoder)) >>= (fun f_LegOrdGrp_LegPrice -> (maybe (field "LegRefID" string_decoder)) >>= (fun f_LegOrdGrp_LegRefID -> (field "NestedParties" full_rg_nestedparties_decoder) >>= (fun f_LegOrdGrp_NestedParties -> (maybe (field "LegCoveredOrUncovered" int_decoder)) >>= (fun f_LegOrdGrp_LegCoveredOrUncovered -> (maybe (field "LegPositionEffect" char_decoder)) >>= (fun f_LegOrdGrp_LegPositionEffect -> (field "LegPreAllocGrp" full_rg_legpreallocgrp_decoder) >>= (fun f_LegOrdGrp_LegPreAllocGrp -> (field "LegStipulations" full_rg_legstipulations_decoder) >>= (fun f_LegOrdGrp_LegStipulations -> (maybe (field "LegSwapType" full_enum_legswaptype_decoder)) >>= (fun f_LegOrdGrp_LegSwapType -> (maybe (field "LegQty" float_6_decoder)) >>= (fun f_LegOrdGrp_LegQty -> (field "InstrumentLeg" full_record_instrumentleg_decoder) >>= (fun f_LegOrdGrp_InstrumentLeg -> (maybe (field "NoLegs" int_decoder)) >>= (fun f_LegOrdGrp_NoLegs -> succeed {
        f_LegOrdGrp_NoLegs = f_LegOrdGrp_NoLegs;
        f_LegOrdGrp_InstrumentLeg = f_LegOrdGrp_InstrumentLeg;
        f_LegOrdGrp_LegQty = f_LegOrdGrp_LegQty;
        f_LegOrdGrp_LegSwapType = f_LegOrdGrp_LegSwapType;
        f_LegOrdGrp_LegStipulations = f_LegOrdGrp_LegStipulations;
        f_LegOrdGrp_LegPreAllocGrp = f_LegOrdGrp_LegPreAllocGrp;
        f_LegOrdGrp_LegPositionEffect = f_LegOrdGrp_LegPositionEffect;
        f_LegOrdGrp_LegCoveredOrUncovered = f_LegOrdGrp_LegCoveredOrUncovered;
        f_LegOrdGrp_NestedParties = f_LegOrdGrp_NestedParties;
        f_LegOrdGrp_LegRefID = f_LegOrdGrp_LegRefID;
        f_LegOrdGrp_LegPrice = f_LegOrdGrp_LegPrice;
        f_LegOrdGrp_LegSettlType = f_LegOrdGrp_LegSettlType;
        f_LegOrdGrp_LegSettlDate = f_LegOrdGrp_LegSettlDate
    }
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
;;

let full_rg_legordgrp_decoder  : fix_rg_legordgrp decoder =
    list full_rg_inner_LegOrdGrp_decoder
;;

let full_record_settlinstructionsdata_decoder  : fix_settlinstructionsdata decoder =
    (field "DlvyInstGrp" full_rg_dlvyinstgrp_decoder) >>= (fun f_SettlInstructionsData_DlvyInstGrp -> (maybe (field "StandInstDbID" string_decoder)) >>= (fun f_SettlInstructionsData_StandInstDbID -> (maybe (field "StandInstDbName" string_decoder)) >>= (fun f_SettlInstructionsData_StandInstDbName -> (maybe (field "StandInstDbType" full_enum_standinstdbtype_decoder)) >>= (fun f_SettlInstructionsData_StandInstDbType -> (maybe (field "SettlDeliveryType" full_enum_settldeliverytype_decoder)) >>= (fun f_SettlInstructionsData_SettlDeliveryType -> succeed {
        f_SettlInstructionsData_SettlDeliveryType = f_SettlInstructionsData_SettlDeliveryType;
        f_SettlInstructionsData_StandInstDbType = f_SettlInstructionsData_StandInstDbType;
        f_SettlInstructionsData_StandInstDbName = f_SettlInstructionsData_StandInstDbName;
        f_SettlInstructionsData_StandInstDbID = f_SettlInstructionsData_StandInstDbID;
        f_SettlInstructionsData_DlvyInstGrp = f_SettlInstructionsData_DlvyInstGrp
    }
    )
    )
    )
    )
    )
;;

let full_rg_inner_SideCrossOrdModGrp_decoder  : fix_rg_inner_sidecrossordmodgrp decoder =
    (maybe (field "SideComplianceID" string_decoder)) >>= (fun f_SideCrossOrdModGrp_SideComplianceID -> (maybe (field "SolicitedFlag" full_enum_solicitedflag_decoder)) >>= (fun f_SideCrossOrdModGrp_SolicitedFlag -> (maybe (field "ClearingFeeIndicator" full_enum_clearingfeeindicator_decoder)) >>= (fun f_SideCrossOrdModGrp_ClearingFeeIndicator -> (maybe (field "CashMargin" full_enum_cashmargin_decoder)) >>= (fun f_SideCrossOrdModGrp_CashMargin -> (maybe (field "CoveredOrUncovered" full_enum_coveredoruncovered_decoder)) >>= (fun f_SideCrossOrdModGrp_CoveredOrUncovered -> (maybe (field "PositionEffect" full_enum_positioneffect_decoder)) >>= (fun f_SideCrossOrdModGrp_PositionEffect -> (maybe (field "EncodedText" string_decoder)) >>= (fun f_SideCrossOrdModGrp_EncodedText -> (maybe (field "EncodedTextLen" int_decoder)) >>= (fun f_SideCrossOrdModGrp_EncodedTextLen -> (maybe (field "Text" string_decoder)) >>= (fun f_SideCrossOrdModGrp_Text -> (maybe (field "BookingType" full_enum_bookingtype_decoder)) >>= (fun f_SideCrossOrdModGrp_BookingType -> (maybe (field "SettlCurrency" full_enum_currency_decoder)) >>= (fun f_SideCrossOrdModGrp_SettlCurrency -> (maybe (field "ForexReq" full_enum_forexreq_decoder)) >>= (fun f_SideCrossOrdModGrp_ForexReq -> (maybe (field "CustOrderCapacity" full_enum_custordercapacity_decoder)) >>= (fun f_SideCrossOrdModGrp_CustOrderCapacity -> (maybe (field "OrderRestrictions" full_enum_orderrestrictions_decoder)) >>= (fun f_SideCrossOrdModGrp_OrderRestrictions -> (maybe (field "OrderCapacity" full_enum_ordercapacity_decoder)) >>= (fun f_SideCrossOrdModGrp_OrderCapacity -> (field "CommissionData" full_record_commissiondata_decoder) >>= (fun f_SideCrossOrdModGrp_CommissionData -> (field "OrderQtyData" full_record_orderqtydata_decoder) >>= (fun f_SideCrossOrdModGrp_OrderQtyData -> (maybe (field "QtyType" full_enum_qtytype_decoder)) >>= (fun f_SideCrossOrdModGrp_QtyType -> (field "PreAllocGrp" full_rg_preallocgrp_decoder) >>= (fun f_SideCrossOrdModGrp_PreAllocGrp -> (maybe (field "AllocID" string_decoder)) >>= (fun f_SideCrossOrdModGrp_AllocID -> (maybe (field "PreallocMethod" full_enum_preallocmethod_decoder)) >>= (fun f_SideCrossOrdModGrp_PreallocMethod -> (maybe (field "BookingUnit" full_enum_bookingunit_decoder)) >>= (fun f_SideCrossOrdModGrp_BookingUnit -> (maybe (field "DayBookingInst" full_enum_daybookinginst_decoder)) >>= (fun f_SideCrossOrdModGrp_DayBookingInst -> (maybe (field "AccountType" full_enum_accounttype_decoder)) >>= (fun f_SideCrossOrdModGrp_AccountType -> (maybe (field "AcctIDSource" full_enum_acctidsource_decoder)) >>= (fun f_SideCrossOrdModGrp_AcctIDSource -> (maybe (field "Account" string_decoder)) >>= (fun f_SideCrossOrdModGrp_Account -> (maybe (field "TradeDate" localmktdate_decoder)) >>= (fun f_SideCrossOrdModGrp_TradeDate -> (maybe (field "TradeOriginationDate" localmktdate_decoder)) >>= (fun f_SideCrossOrdModGrp_TradeOriginationDate -> (field "Parties" full_rg_parties_decoder) >>= (fun f_SideCrossOrdModGrp_Parties -> (maybe (field "ClOrdLinkID" string_decoder)) >>= (fun f_SideCrossOrdModGrp_ClOrdLinkID -> (maybe (field "SecondaryClOrdID" string_decoder)) >>= (fun f_SideCrossOrdModGrp_SecondaryClOrdID -> (maybe (field "ClOrdID" string_decoder)) >>= (fun f_SideCrossOrdModGrp_ClOrdID -> (maybe (field "Side" full_enum_side_decoder)) >>= (fun f_SideCrossOrdModGrp_Side -> (maybe (field "NoSides" full_enum_nosides_decoder)) >>= (fun f_SideCrossOrdModGrp_NoSides -> succeed {
        f_SideCrossOrdModGrp_NoSides = f_SideCrossOrdModGrp_NoSides;
        f_SideCrossOrdModGrp_Side = f_SideCrossOrdModGrp_Side;
        f_SideCrossOrdModGrp_ClOrdID = f_SideCrossOrdModGrp_ClOrdID;
        f_SideCrossOrdModGrp_SecondaryClOrdID = f_SideCrossOrdModGrp_SecondaryClOrdID;
        f_SideCrossOrdModGrp_ClOrdLinkID = f_SideCrossOrdModGrp_ClOrdLinkID;
        f_SideCrossOrdModGrp_Parties = f_SideCrossOrdModGrp_Parties;
        f_SideCrossOrdModGrp_TradeOriginationDate = f_SideCrossOrdModGrp_TradeOriginationDate;
        f_SideCrossOrdModGrp_TradeDate = f_SideCrossOrdModGrp_TradeDate;
        f_SideCrossOrdModGrp_Account = f_SideCrossOrdModGrp_Account;
        f_SideCrossOrdModGrp_AcctIDSource = f_SideCrossOrdModGrp_AcctIDSource;
        f_SideCrossOrdModGrp_AccountType = f_SideCrossOrdModGrp_AccountType;
        f_SideCrossOrdModGrp_DayBookingInst = f_SideCrossOrdModGrp_DayBookingInst;
        f_SideCrossOrdModGrp_BookingUnit = f_SideCrossOrdModGrp_BookingUnit;
        f_SideCrossOrdModGrp_PreallocMethod = f_SideCrossOrdModGrp_PreallocMethod;
        f_SideCrossOrdModGrp_AllocID = f_SideCrossOrdModGrp_AllocID;
        f_SideCrossOrdModGrp_PreAllocGrp = f_SideCrossOrdModGrp_PreAllocGrp;
        f_SideCrossOrdModGrp_QtyType = f_SideCrossOrdModGrp_QtyType;
        f_SideCrossOrdModGrp_OrderQtyData = f_SideCrossOrdModGrp_OrderQtyData;
        f_SideCrossOrdModGrp_CommissionData = f_SideCrossOrdModGrp_CommissionData;
        f_SideCrossOrdModGrp_OrderCapacity = f_SideCrossOrdModGrp_OrderCapacity;
        f_SideCrossOrdModGrp_OrderRestrictions = f_SideCrossOrdModGrp_OrderRestrictions;
        f_SideCrossOrdModGrp_CustOrderCapacity = f_SideCrossOrdModGrp_CustOrderCapacity;
        f_SideCrossOrdModGrp_ForexReq = f_SideCrossOrdModGrp_ForexReq;
        f_SideCrossOrdModGrp_SettlCurrency = f_SideCrossOrdModGrp_SettlCurrency;
        f_SideCrossOrdModGrp_BookingType = f_SideCrossOrdModGrp_BookingType;
        f_SideCrossOrdModGrp_Text = f_SideCrossOrdModGrp_Text;
        f_SideCrossOrdModGrp_EncodedTextLen = f_SideCrossOrdModGrp_EncodedTextLen;
        f_SideCrossOrdModGrp_EncodedText = f_SideCrossOrdModGrp_EncodedText;
        f_SideCrossOrdModGrp_PositionEffect = f_SideCrossOrdModGrp_PositionEffect;
        f_SideCrossOrdModGrp_CoveredOrUncovered = f_SideCrossOrdModGrp_CoveredOrUncovered;
        f_SideCrossOrdModGrp_CashMargin = f_SideCrossOrdModGrp_CashMargin;
        f_SideCrossOrdModGrp_ClearingFeeIndicator = f_SideCrossOrdModGrp_ClearingFeeIndicator;
        f_SideCrossOrdModGrp_SolicitedFlag = f_SideCrossOrdModGrp_SolicitedFlag;
        f_SideCrossOrdModGrp_SideComplianceID = f_SideCrossOrdModGrp_SideComplianceID
    }
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
;;

let full_rg_sidecrossordmodgrp_decoder  : fix_rg_sidecrossordmodgrp decoder =
    list full_rg_inner_SideCrossOrdModGrp_decoder
;;

let full_rg_inner_RFQReqGrp_decoder  : fix_rg_inner_rfqreqgrp decoder =
    (maybe (field "TradingSessionSubID" string_decoder)) >>= (fun f_RFQReqGrp_TradingSessionSubID -> (maybe (field "TradingSessionID" string_decoder)) >>= (fun f_RFQReqGrp_TradingSessionID -> (maybe (field "QuoteType" full_enum_quotetype_decoder)) >>= (fun f_RFQReqGrp_QuoteType -> (maybe (field "QuoteRequestType" full_enum_quoterequesttype_decoder)) >>= (fun f_RFQReqGrp_QuoteRequestType -> (maybe (field "PrevClosePx" float_6_decoder)) >>= (fun f_RFQReqGrp_PrevClosePx -> (field "InstrmtLegGrp" full_rg_instrmtleggrp_decoder) >>= (fun f_RFQReqGrp_InstrmtLegGrp -> (field "UndInstrmtGrp" full_rg_undinstrmtgrp_decoder) >>= (fun f_RFQReqGrp_UndInstrmtGrp -> (field "Instrument" full_record_instrument_decoder) >>= (fun f_RFQReqGrp_Instrument -> (maybe (field "NoRelatedSym" int_decoder)) >>= (fun f_RFQReqGrp_NoRelatedSym -> succeed {
        f_RFQReqGrp_NoRelatedSym = f_RFQReqGrp_NoRelatedSym;
        f_RFQReqGrp_Instrument = f_RFQReqGrp_Instrument;
        f_RFQReqGrp_UndInstrmtGrp = f_RFQReqGrp_UndInstrmtGrp;
        f_RFQReqGrp_InstrmtLegGrp = f_RFQReqGrp_InstrmtLegGrp;
        f_RFQReqGrp_PrevClosePx = f_RFQReqGrp_PrevClosePx;
        f_RFQReqGrp_QuoteRequestType = f_RFQReqGrp_QuoteRequestType;
        f_RFQReqGrp_QuoteType = f_RFQReqGrp_QuoteType;
        f_RFQReqGrp_TradingSessionID = f_RFQReqGrp_TradingSessionID;
        f_RFQReqGrp_TradingSessionSubID = f_RFQReqGrp_TradingSessionSubID
    }
    )
    )
    )
    )
    )
    )
    )
    )
    )
;;

let full_rg_rfqreqgrp_decoder  : fix_rg_rfqreqgrp decoder =
    list full_rg_inner_RFQReqGrp_decoder
;;

let full_rg_inner_SecListGrp_decoder  : fix_rg_inner_seclistgrp decoder =
    (maybe (field "EncodedText" string_decoder)) >>= (fun f_SecListGrp_EncodedText -> (maybe (field "EncodedTextLen" int_decoder)) >>= (fun f_SecListGrp_EncodedTextLen -> (maybe (field "Text" string_decoder)) >>= (fun f_SecListGrp_Text -> (maybe (field "ExpirationCycle" full_enum_expirationcycle_decoder)) >>= (fun f_SecListGrp_ExpirationCycle -> (maybe (field "TradingSessionSubID" string_decoder)) >>= (fun f_SecListGrp_TradingSessionSubID -> (maybe (field "TradingSessionID" string_decoder)) >>= (fun f_SecListGrp_TradingSessionID -> (maybe (field "MinTradeVol" float_6_decoder)) >>= (fun f_SecListGrp_MinTradeVol -> (maybe (field "RoundLot" float_6_decoder)) >>= (fun f_SecListGrp_RoundLot -> (field "YieldData" full_record_yielddata_decoder) >>= (fun f_SecListGrp_YieldData -> (field "SpreadOrBenchmarkCurveData" full_record_spreadorbenchmarkcurvedata_decoder) >>= (fun f_SecListGrp_SpreadOrBenchmarkCurveData -> (field "InstrmtLegSecListGrp" full_rg_instrmtlegseclistgrp_decoder) >>= (fun f_SecListGrp_InstrmtLegSecListGrp -> (field "Stipulations" full_rg_stipulations_decoder) >>= (fun f_SecListGrp_Stipulations -> (maybe (field "Currency" full_enum_currency_decoder)) >>= (fun f_SecListGrp_Currency -> (field "UndInstrmtGrp" full_rg_undinstrmtgrp_decoder) >>= (fun f_SecListGrp_UndInstrmtGrp -> (field "FinancingDetails" full_record_financingdetails_decoder) >>= (fun f_SecListGrp_FinancingDetails -> (field "InstrumentExtension" full_record_instrumentextension_decoder) >>= (fun f_SecListGrp_InstrumentExtension -> (field "Instrument" full_record_instrument_decoder) >>= (fun f_SecListGrp_Instrument -> (maybe (field "NoRelatedSym" int_decoder)) >>= (fun f_SecListGrp_NoRelatedSym -> succeed {
        f_SecListGrp_NoRelatedSym = f_SecListGrp_NoRelatedSym;
        f_SecListGrp_Instrument = f_SecListGrp_Instrument;
        f_SecListGrp_InstrumentExtension = f_SecListGrp_InstrumentExtension;
        f_SecListGrp_FinancingDetails = f_SecListGrp_FinancingDetails;
        f_SecListGrp_UndInstrmtGrp = f_SecListGrp_UndInstrmtGrp;
        f_SecListGrp_Currency = f_SecListGrp_Currency;
        f_SecListGrp_Stipulations = f_SecListGrp_Stipulations;
        f_SecListGrp_InstrmtLegSecListGrp = f_SecListGrp_InstrmtLegSecListGrp;
        f_SecListGrp_SpreadOrBenchmarkCurveData = f_SecListGrp_SpreadOrBenchmarkCurveData;
        f_SecListGrp_YieldData = f_SecListGrp_YieldData;
        f_SecListGrp_RoundLot = f_SecListGrp_RoundLot;
        f_SecListGrp_MinTradeVol = f_SecListGrp_MinTradeVol;
        f_SecListGrp_TradingSessionID = f_SecListGrp_TradingSessionID;
        f_SecListGrp_TradingSessionSubID = f_SecListGrp_TradingSessionSubID;
        f_SecListGrp_ExpirationCycle = f_SecListGrp_ExpirationCycle;
        f_SecListGrp_Text = f_SecListGrp_Text;
        f_SecListGrp_EncodedTextLen = f_SecListGrp_EncodedTextLen;
        f_SecListGrp_EncodedText = f_SecListGrp_EncodedText
    }
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
;;

let full_rg_seclistgrp_decoder  : fix_rg_seclistgrp decoder =
    list full_rg_inner_SecListGrp_decoder
;;

let full_rg_inner_InstrmtMDReqGrp_decoder  : fix_rg_inner_instrmtmdreqgrp decoder =
    (field "InstrmtLegGrp" full_rg_instrmtleggrp_decoder) >>= (fun f_InstrmtMDReqGrp_InstrmtLegGrp -> (field "UndInstrmtGrp" full_rg_undinstrmtgrp_decoder) >>= (fun f_InstrmtMDReqGrp_UndInstrmtGrp -> (field "Instrument" full_record_instrument_decoder) >>= (fun f_InstrmtMDReqGrp_Instrument -> (maybe (field "NoRelatedSym" int_decoder)) >>= (fun f_InstrmtMDReqGrp_NoRelatedSym -> succeed {
        f_InstrmtMDReqGrp_NoRelatedSym = f_InstrmtMDReqGrp_NoRelatedSym;
        f_InstrmtMDReqGrp_Instrument = f_InstrmtMDReqGrp_Instrument;
        f_InstrmtMDReqGrp_UndInstrmtGrp = f_InstrmtMDReqGrp_UndInstrmtGrp;
        f_InstrmtMDReqGrp_InstrmtLegGrp = f_InstrmtMDReqGrp_InstrmtLegGrp
    }
    )
    )
    )
    )
;;

let full_rg_instrmtmdreqgrp_decoder  : fix_rg_instrmtmdreqgrp decoder =
    list full_rg_inner_InstrmtMDReqGrp_decoder
;;

let full_rg_inner_QuotCxlEntriesGrp_decoder  : fix_rg_inner_quotcxlentriesgrp decoder =
    (field "InstrmtLegGrp" full_rg_instrmtleggrp_decoder) >>= (fun f_QuotCxlEntriesGrp_InstrmtLegGrp -> (field "UndInstrmtGrp" full_rg_undinstrmtgrp_decoder) >>= (fun f_QuotCxlEntriesGrp_UndInstrmtGrp -> (field "FinancingDetails" full_record_financingdetails_decoder) >>= (fun f_QuotCxlEntriesGrp_FinancingDetails -> (field "Instrument" full_record_instrument_decoder) >>= (fun f_QuotCxlEntriesGrp_Instrument -> (maybe (field "NoQuoteEntries" int_decoder)) >>= (fun f_QuotCxlEntriesGrp_NoQuoteEntries -> succeed {
        f_QuotCxlEntriesGrp_NoQuoteEntries = f_QuotCxlEntriesGrp_NoQuoteEntries;
        f_QuotCxlEntriesGrp_Instrument = f_QuotCxlEntriesGrp_Instrument;
        f_QuotCxlEntriesGrp_FinancingDetails = f_QuotCxlEntriesGrp_FinancingDetails;
        f_QuotCxlEntriesGrp_UndInstrmtGrp = f_QuotCxlEntriesGrp_UndInstrmtGrp;
        f_QuotCxlEntriesGrp_InstrmtLegGrp = f_QuotCxlEntriesGrp_InstrmtLegGrp
    }
    )
    )
    )
    )
    )
;;

let full_rg_quotcxlentriesgrp_decoder  : fix_rg_quotcxlentriesgrp decoder =
    list full_rg_inner_QuotCxlEntriesGrp_decoder
;;

let full_rg_inner_QuotReqGrp_decoder  : fix_rg_inner_quotreqgrp decoder =
    (field "Parties" full_rg_parties_decoder) >>= (fun f_QuotReqGrp_Parties -> (field "YieldData" full_record_yielddata_decoder) >>= (fun f_QuotReqGrp_YieldData -> (maybe (field "Price2" float_6_decoder)) >>= (fun f_QuotReqGrp_Price2 -> (maybe (field "Price" float_6_decoder)) >>= (fun f_QuotReqGrp_Price -> (maybe (field "PriceType" full_enum_pricetype_decoder)) >>= (fun f_QuotReqGrp_PriceType -> (field "SpreadOrBenchmarkCurveData" full_record_spreadorbenchmarkcurvedata_decoder) >>= (fun f_QuotReqGrp_SpreadOrBenchmarkCurveData -> (maybe (field "TransactTime" utctimestamp_milli_decoder)) >>= (fun f_QuotReqGrp_TransactTime -> (maybe (field "ExpireTime" utctimestamp_milli_decoder)) >>= (fun f_QuotReqGrp_ExpireTime -> (maybe (field "ValidUntilTime" utctimestamp_milli_decoder)) >>= (fun f_QuotReqGrp_ValidUntilTime -> (maybe (field "OrdType" full_enum_ordtype_decoder)) >>= (fun f_QuotReqGrp_OrdType -> (maybe (field "QuotePriceType" full_enum_quotepricetype_decoder)) >>= (fun f_QuotReqGrp_QuotePriceType -> (field "QuotQualGrp" full_rg_quotqualgrp_decoder) >>= (fun f_QuotReqGrp_QuotQualGrp -> (field "QuotReqLegsGrp" full_rg_quotreqlegsgrp_decoder) >>= (fun f_QuotReqGrp_QuotReqLegsGrp -> (maybe (field "AccountType" full_enum_accounttype_decoder)) >>= (fun f_QuotReqGrp_AccountType -> (maybe (field "AcctIDSource" full_enum_acctidsource_decoder)) >>= (fun f_QuotReqGrp_AcctIDSource -> (maybe (field "Account" string_decoder)) >>= (fun f_QuotReqGrp_Account -> (field "Stipulations" full_rg_stipulations_decoder) >>= (fun f_QuotReqGrp_Stipulations -> (maybe (field "Currency" full_enum_currency_decoder)) >>= (fun f_QuotReqGrp_Currency -> (maybe (field "OrderQty2" float_6_decoder)) >>= (fun f_QuotReqGrp_OrderQty2 -> (maybe (field "SettlDate2" localmktdate_decoder)) >>= (fun f_QuotReqGrp_SettlDate2 -> (maybe (field "SettlDate" localmktdate_decoder)) >>= (fun f_QuotReqGrp_SettlDate -> (maybe (field "SettlType" full_enum_settltype_decoder)) >>= (fun f_QuotReqGrp_SettlType -> (field "OrderQtyData" full_record_orderqtydata_decoder) >>= (fun f_QuotReqGrp_OrderQtyData -> (maybe (field "QtyType" full_enum_qtytype_decoder)) >>= (fun f_QuotReqGrp_QtyType -> (maybe (field "Side" full_enum_side_decoder)) >>= (fun f_QuotReqGrp_Side -> (maybe (field "TradeOriginationDate" localmktdate_decoder)) >>= (fun f_QuotReqGrp_TradeOriginationDate -> (maybe (field "TradingSessionSubID" string_decoder)) >>= (fun f_QuotReqGrp_TradingSessionSubID -> (maybe (field "TradingSessionID" string_decoder)) >>= (fun f_QuotReqGrp_TradingSessionID -> (maybe (field "QuoteType" full_enum_quotetype_decoder)) >>= (fun f_QuotReqGrp_QuoteType -> (maybe (field "QuoteRequestType" full_enum_quoterequesttype_decoder)) >>= (fun f_QuotReqGrp_QuoteRequestType -> (maybe (field "PrevClosePx" float_6_decoder)) >>= (fun f_QuotReqGrp_PrevClosePx -> (field "UndInstrmtGrp" full_rg_undinstrmtgrp_decoder) >>= (fun f_QuotReqGrp_UndInstrmtGrp -> (field "FinancingDetails" full_record_financingdetails_decoder) >>= (fun f_QuotReqGrp_FinancingDetails -> (field "Instrument" full_record_instrument_decoder) >>= (fun f_QuotReqGrp_Instrument -> (maybe (field "NoRelatedSym" int_decoder)) >>= (fun f_QuotReqGrp_NoRelatedSym -> succeed {
        f_QuotReqGrp_NoRelatedSym = f_QuotReqGrp_NoRelatedSym;
        f_QuotReqGrp_Instrument = f_QuotReqGrp_Instrument;
        f_QuotReqGrp_FinancingDetails = f_QuotReqGrp_FinancingDetails;
        f_QuotReqGrp_UndInstrmtGrp = f_QuotReqGrp_UndInstrmtGrp;
        f_QuotReqGrp_PrevClosePx = f_QuotReqGrp_PrevClosePx;
        f_QuotReqGrp_QuoteRequestType = f_QuotReqGrp_QuoteRequestType;
        f_QuotReqGrp_QuoteType = f_QuotReqGrp_QuoteType;
        f_QuotReqGrp_TradingSessionID = f_QuotReqGrp_TradingSessionID;
        f_QuotReqGrp_TradingSessionSubID = f_QuotReqGrp_TradingSessionSubID;
        f_QuotReqGrp_TradeOriginationDate = f_QuotReqGrp_TradeOriginationDate;
        f_QuotReqGrp_Side = f_QuotReqGrp_Side;
        f_QuotReqGrp_QtyType = f_QuotReqGrp_QtyType;
        f_QuotReqGrp_OrderQtyData = f_QuotReqGrp_OrderQtyData;
        f_QuotReqGrp_SettlType = f_QuotReqGrp_SettlType;
        f_QuotReqGrp_SettlDate = f_QuotReqGrp_SettlDate;
        f_QuotReqGrp_SettlDate2 = f_QuotReqGrp_SettlDate2;
        f_QuotReqGrp_OrderQty2 = f_QuotReqGrp_OrderQty2;
        f_QuotReqGrp_Currency = f_QuotReqGrp_Currency;
        f_QuotReqGrp_Stipulations = f_QuotReqGrp_Stipulations;
        f_QuotReqGrp_Account = f_QuotReqGrp_Account;
        f_QuotReqGrp_AcctIDSource = f_QuotReqGrp_AcctIDSource;
        f_QuotReqGrp_AccountType = f_QuotReqGrp_AccountType;
        f_QuotReqGrp_QuotReqLegsGrp = f_QuotReqGrp_QuotReqLegsGrp;
        f_QuotReqGrp_QuotQualGrp = f_QuotReqGrp_QuotQualGrp;
        f_QuotReqGrp_QuotePriceType = f_QuotReqGrp_QuotePriceType;
        f_QuotReqGrp_OrdType = f_QuotReqGrp_OrdType;
        f_QuotReqGrp_ValidUntilTime = f_QuotReqGrp_ValidUntilTime;
        f_QuotReqGrp_ExpireTime = f_QuotReqGrp_ExpireTime;
        f_QuotReqGrp_TransactTime = f_QuotReqGrp_TransactTime;
        f_QuotReqGrp_SpreadOrBenchmarkCurveData = f_QuotReqGrp_SpreadOrBenchmarkCurveData;
        f_QuotReqGrp_PriceType = f_QuotReqGrp_PriceType;
        f_QuotReqGrp_Price = f_QuotReqGrp_Price;
        f_QuotReqGrp_Price2 = f_QuotReqGrp_Price2;
        f_QuotReqGrp_YieldData = f_QuotReqGrp_YieldData;
        f_QuotReqGrp_Parties = f_QuotReqGrp_Parties
    }
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
;;

let full_rg_quotreqgrp_decoder  : fix_rg_quotreqgrp decoder =
    list full_rg_inner_QuotReqGrp_decoder
;;

let full_rg_inner_MDIncGrp_decoder  : fix_rg_inner_mdincgrp decoder =
    (maybe (field "EncodedText" string_decoder)) >>= (fun f_MDIncGrp_EncodedText -> (maybe (field "EncodedTextLen" int_decoder)) >>= (fun f_MDIncGrp_EncodedTextLen -> (maybe (field "Text" string_decoder)) >>= (fun f_MDIncGrp_Text -> (maybe (field "NetChgPrevDay" float_6_decoder)) >>= (fun f_MDIncGrp_NetChgPrevDay -> (maybe (field "PriceDelta" float_decoder)) >>= (fun f_MDIncGrp_PriceDelta -> (maybe (field "Scope" full_enum_scope_decoder)) >>= (fun f_MDIncGrp_Scope -> (maybe (field "MDEntryPositionNo" int_decoder)) >>= (fun f_MDIncGrp_MDEntryPositionNo -> (maybe (field "NumberOfOrders" int_decoder)) >>= (fun f_MDIncGrp_NumberOfOrders -> (maybe (field "MDEntrySeller" string_decoder)) >>= (fun f_MDIncGrp_MDEntrySeller -> (maybe (field "MDEntryBuyer" string_decoder)) >>= (fun f_MDIncGrp_MDEntryBuyer -> (maybe (field "QuoteEntryID" string_decoder)) >>= (fun f_MDIncGrp_QuoteEntryID -> (maybe (field "OrderID" string_decoder)) >>= (fun f_MDIncGrp_OrderID -> (maybe (field "SellerDays" int_decoder)) >>= (fun f_MDIncGrp_SellerDays -> (maybe (field "ExecInst" full_enum_execinst_decoder)) >>= (fun f_MDIncGrp_ExecInst -> (maybe (field "MinQty" float_6_decoder)) >>= (fun f_MDIncGrp_MinQty -> (maybe (field "ExpireTime" utctimestamp_milli_decoder)) >>= (fun f_MDIncGrp_ExpireTime -> (maybe (field "ExpireDate" localmktdate_decoder)) >>= (fun f_MDIncGrp_ExpireDate -> (maybe (field "TimeInForce" full_enum_timeinforce_decoder)) >>= (fun f_MDIncGrp_TimeInForce -> (maybe (field "OpenCloseSettlFlag" full_enum_openclosesettlflag_decoder)) >>= (fun f_MDIncGrp_OpenCloseSettlFlag -> (maybe (field "DeskID" string_decoder)) >>= (fun f_MDIncGrp_DeskID -> (maybe (field "LocationID" string_decoder)) >>= (fun f_MDIncGrp_LocationID -> (maybe (field "MDEntryOriginator" string_decoder)) >>= (fun f_MDIncGrp_MDEntryOriginator -> (maybe (field "TradeCondition" full_enum_tradecondition_decoder)) >>= (fun f_MDIncGrp_TradeCondition -> (maybe (field "QuoteCondition" full_enum_quotecondition_decoder)) >>= (fun f_MDIncGrp_QuoteCondition -> (maybe (field "TradingSessionSubID" string_decoder)) >>= (fun f_MDIncGrp_TradingSessionSubID -> (maybe (field "TradingSessionID" string_decoder)) >>= (fun f_MDIncGrp_TradingSessionID -> (maybe (field "MDMkt" full_enum_exchange_decoder)) >>= (fun f_MDIncGrp_MDMkt -> (maybe (field "TickDirection" full_enum_tickdirection_decoder)) >>= (fun f_MDIncGrp_TickDirection -> (maybe (field "MDEntryTime" utctimeonly_milli_decoder)) >>= (fun f_MDIncGrp_MDEntryTime -> (maybe (field "MDEntryDate" utcdateonly_decoder)) >>= (fun f_MDIncGrp_MDEntryDate -> (maybe (field "MDEntrySize" float_6_decoder)) >>= (fun f_MDIncGrp_MDEntrySize -> (maybe (field "Currency" full_enum_currency_decoder)) >>= (fun f_MDIncGrp_Currency -> (maybe (field "MDEntryPx" float_6_decoder)) >>= (fun f_MDIncGrp_MDEntryPx -> (maybe (field "CorporateAction" full_enum_corporateaction_decoder)) >>= (fun f_MDIncGrp_CorporateAction -> (maybe (field "FinancialStatus" full_enum_financialstatus_decoder)) >>= (fun f_MDIncGrp_FinancialStatus -> (field "InstrmtLegGrp" full_rg_instrmtleggrp_decoder) >>= (fun f_MDIncGrp_InstrmtLegGrp -> (field "UndInstrmtGrp" full_rg_undinstrmtgrp_decoder) >>= (fun f_MDIncGrp_UndInstrmtGrp -> (field "Instrument" full_record_instrument_decoder) >>= (fun f_MDIncGrp_Instrument -> (maybe (field "MDEntryRefID" string_decoder)) >>= (fun f_MDIncGrp_MDEntryRefID -> (maybe (field "MDEntryID" string_decoder)) >>= (fun f_MDIncGrp_MDEntryID -> (maybe (field "MDEntryType" full_enum_mdentrytype_decoder)) >>= (fun f_MDIncGrp_MDEntryType -> (maybe (field "DeleteReason" full_enum_deletereason_decoder)) >>= (fun f_MDIncGrp_DeleteReason -> (maybe (field "MDUpdateAction" full_enum_mdupdateaction_decoder)) >>= (fun f_MDIncGrp_MDUpdateAction -> (maybe (field "NoMDEntries" int_decoder)) >>= (fun f_MDIncGrp_NoMDEntries -> succeed {
        f_MDIncGrp_NoMDEntries = f_MDIncGrp_NoMDEntries;
        f_MDIncGrp_MDUpdateAction = f_MDIncGrp_MDUpdateAction;
        f_MDIncGrp_DeleteReason = f_MDIncGrp_DeleteReason;
        f_MDIncGrp_MDEntryType = f_MDIncGrp_MDEntryType;
        f_MDIncGrp_MDEntryID = f_MDIncGrp_MDEntryID;
        f_MDIncGrp_MDEntryRefID = f_MDIncGrp_MDEntryRefID;
        f_MDIncGrp_Instrument = f_MDIncGrp_Instrument;
        f_MDIncGrp_UndInstrmtGrp = f_MDIncGrp_UndInstrmtGrp;
        f_MDIncGrp_InstrmtLegGrp = f_MDIncGrp_InstrmtLegGrp;
        f_MDIncGrp_FinancialStatus = f_MDIncGrp_FinancialStatus;
        f_MDIncGrp_CorporateAction = f_MDIncGrp_CorporateAction;
        f_MDIncGrp_MDEntryPx = f_MDIncGrp_MDEntryPx;
        f_MDIncGrp_Currency = f_MDIncGrp_Currency;
        f_MDIncGrp_MDEntrySize = f_MDIncGrp_MDEntrySize;
        f_MDIncGrp_MDEntryDate = f_MDIncGrp_MDEntryDate;
        f_MDIncGrp_MDEntryTime = f_MDIncGrp_MDEntryTime;
        f_MDIncGrp_TickDirection = f_MDIncGrp_TickDirection;
        f_MDIncGrp_MDMkt = f_MDIncGrp_MDMkt;
        f_MDIncGrp_TradingSessionID = f_MDIncGrp_TradingSessionID;
        f_MDIncGrp_TradingSessionSubID = f_MDIncGrp_TradingSessionSubID;
        f_MDIncGrp_QuoteCondition = f_MDIncGrp_QuoteCondition;
        f_MDIncGrp_TradeCondition = f_MDIncGrp_TradeCondition;
        f_MDIncGrp_MDEntryOriginator = f_MDIncGrp_MDEntryOriginator;
        f_MDIncGrp_LocationID = f_MDIncGrp_LocationID;
        f_MDIncGrp_DeskID = f_MDIncGrp_DeskID;
        f_MDIncGrp_OpenCloseSettlFlag = f_MDIncGrp_OpenCloseSettlFlag;
        f_MDIncGrp_TimeInForce = f_MDIncGrp_TimeInForce;
        f_MDIncGrp_ExpireDate = f_MDIncGrp_ExpireDate;
        f_MDIncGrp_ExpireTime = f_MDIncGrp_ExpireTime;
        f_MDIncGrp_MinQty = f_MDIncGrp_MinQty;
        f_MDIncGrp_ExecInst = f_MDIncGrp_ExecInst;
        f_MDIncGrp_SellerDays = f_MDIncGrp_SellerDays;
        f_MDIncGrp_OrderID = f_MDIncGrp_OrderID;
        f_MDIncGrp_QuoteEntryID = f_MDIncGrp_QuoteEntryID;
        f_MDIncGrp_MDEntryBuyer = f_MDIncGrp_MDEntryBuyer;
        f_MDIncGrp_MDEntrySeller = f_MDIncGrp_MDEntrySeller;
        f_MDIncGrp_NumberOfOrders = f_MDIncGrp_NumberOfOrders;
        f_MDIncGrp_MDEntryPositionNo = f_MDIncGrp_MDEntryPositionNo;
        f_MDIncGrp_Scope = f_MDIncGrp_Scope;
        f_MDIncGrp_PriceDelta = f_MDIncGrp_PriceDelta;
        f_MDIncGrp_NetChgPrevDay = f_MDIncGrp_NetChgPrevDay;
        f_MDIncGrp_Text = f_MDIncGrp_Text;
        f_MDIncGrp_EncodedTextLen = f_MDIncGrp_EncodedTextLen;
        f_MDIncGrp_EncodedText = f_MDIncGrp_EncodedText
    }
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
;;

let full_rg_mdincgrp_decoder  : fix_rg_mdincgrp decoder =
    list full_rg_inner_MDIncGrp_decoder
;;

let full_rg_inner_QuotReqRjctGrp_decoder  : fix_rg_inner_quotreqrjctgrp decoder =
    (field "Parties" full_rg_parties_decoder) >>= (fun f_QuotReqRjctGrp_Parties -> (field "YieldData" full_record_yielddata_decoder) >>= (fun f_QuotReqRjctGrp_YieldData -> (maybe (field "Price2" float_6_decoder)) >>= (fun f_QuotReqRjctGrp_Price2 -> (maybe (field "Price" float_6_decoder)) >>= (fun f_QuotReqRjctGrp_Price -> (maybe (field "PriceType" full_enum_pricetype_decoder)) >>= (fun f_QuotReqRjctGrp_PriceType -> (field "SpreadOrBenchmarkCurveData" full_record_spreadorbenchmarkcurvedata_decoder) >>= (fun f_QuotReqRjctGrp_SpreadOrBenchmarkCurveData -> (maybe (field "TransactTime" utctimestamp_milli_decoder)) >>= (fun f_QuotReqRjctGrp_TransactTime -> (maybe (field "ExpireTime" utctimestamp_milli_decoder)) >>= (fun f_QuotReqRjctGrp_ExpireTime -> (maybe (field "OrdType" full_enum_ordtype_decoder)) >>= (fun f_QuotReqRjctGrp_OrdType -> (maybe (field "QuotePriceType" full_enum_quotepricetype_decoder)) >>= (fun f_QuotReqRjctGrp_QuotePriceType -> (field "QuotQualGrp" full_rg_quotqualgrp_decoder) >>= (fun f_QuotReqRjctGrp_QuotQualGrp -> (field "QuotReqLegsGrp" full_rg_quotreqlegsgrp_decoder) >>= (fun f_QuotReqRjctGrp_QuotReqLegsGrp -> (maybe (field "AccountType" full_enum_accounttype_decoder)) >>= (fun f_QuotReqRjctGrp_AccountType -> (maybe (field "AcctIDSource" full_enum_acctidsource_decoder)) >>= (fun f_QuotReqRjctGrp_AcctIDSource -> (maybe (field "Account" string_decoder)) >>= (fun f_QuotReqRjctGrp_Account -> (field "Stipulations" full_rg_stipulations_decoder) >>= (fun f_QuotReqRjctGrp_Stipulations -> (maybe (field "Currency" full_enum_currency_decoder)) >>= (fun f_QuotReqRjctGrp_Currency -> (maybe (field "OrderQty2" float_6_decoder)) >>= (fun f_QuotReqRjctGrp_OrderQty2 -> (maybe (field "SettlDate2" localmktdate_decoder)) >>= (fun f_QuotReqRjctGrp_SettlDate2 -> (maybe (field "SettlDate" localmktdate_decoder)) >>= (fun f_QuotReqRjctGrp_SettlDate -> (maybe (field "SettlType" full_enum_settltype_decoder)) >>= (fun f_QuotReqRjctGrp_SettlType -> (field "OrderQtyData" full_record_orderqtydata_decoder) >>= (fun f_QuotReqRjctGrp_OrderQtyData -> (maybe (field "QtyType" full_enum_qtytype_decoder)) >>= (fun f_QuotReqRjctGrp_QtyType -> (maybe (field "Side" full_enum_side_decoder)) >>= (fun f_QuotReqRjctGrp_Side -> (maybe (field "TradeOriginationDate" localmktdate_decoder)) >>= (fun f_QuotReqRjctGrp_TradeOriginationDate -> (maybe (field "TradingSessionSubID" string_decoder)) >>= (fun f_QuotReqRjctGrp_TradingSessionSubID -> (maybe (field "TradingSessionID" string_decoder)) >>= (fun f_QuotReqRjctGrp_TradingSessionID -> (maybe (field "QuoteType" full_enum_quotetype_decoder)) >>= (fun f_QuotReqRjctGrp_QuoteType -> (maybe (field "QuoteRequestType" full_enum_quoterequesttype_decoder)) >>= (fun f_QuotReqRjctGrp_QuoteRequestType -> (maybe (field "PrevClosePx" float_6_decoder)) >>= (fun f_QuotReqRjctGrp_PrevClosePx -> (field "UndInstrmtGrp" full_rg_undinstrmtgrp_decoder) >>= (fun f_QuotReqRjctGrp_UndInstrmtGrp -> (field "FinancingDetails" full_record_financingdetails_decoder) >>= (fun f_QuotReqRjctGrp_FinancingDetails -> (field "Instrument" full_record_instrument_decoder) >>= (fun f_QuotReqRjctGrp_Instrument -> (maybe (field "NoRelatedSym" int_decoder)) >>= (fun f_QuotReqRjctGrp_NoRelatedSym -> succeed {
        f_QuotReqRjctGrp_NoRelatedSym = f_QuotReqRjctGrp_NoRelatedSym;
        f_QuotReqRjctGrp_Instrument = f_QuotReqRjctGrp_Instrument;
        f_QuotReqRjctGrp_FinancingDetails = f_QuotReqRjctGrp_FinancingDetails;
        f_QuotReqRjctGrp_UndInstrmtGrp = f_QuotReqRjctGrp_UndInstrmtGrp;
        f_QuotReqRjctGrp_PrevClosePx = f_QuotReqRjctGrp_PrevClosePx;
        f_QuotReqRjctGrp_QuoteRequestType = f_QuotReqRjctGrp_QuoteRequestType;
        f_QuotReqRjctGrp_QuoteType = f_QuotReqRjctGrp_QuoteType;
        f_QuotReqRjctGrp_TradingSessionID = f_QuotReqRjctGrp_TradingSessionID;
        f_QuotReqRjctGrp_TradingSessionSubID = f_QuotReqRjctGrp_TradingSessionSubID;
        f_QuotReqRjctGrp_TradeOriginationDate = f_QuotReqRjctGrp_TradeOriginationDate;
        f_QuotReqRjctGrp_Side = f_QuotReqRjctGrp_Side;
        f_QuotReqRjctGrp_QtyType = f_QuotReqRjctGrp_QtyType;
        f_QuotReqRjctGrp_OrderQtyData = f_QuotReqRjctGrp_OrderQtyData;
        f_QuotReqRjctGrp_SettlType = f_QuotReqRjctGrp_SettlType;
        f_QuotReqRjctGrp_SettlDate = f_QuotReqRjctGrp_SettlDate;
        f_QuotReqRjctGrp_SettlDate2 = f_QuotReqRjctGrp_SettlDate2;
        f_QuotReqRjctGrp_OrderQty2 = f_QuotReqRjctGrp_OrderQty2;
        f_QuotReqRjctGrp_Currency = f_QuotReqRjctGrp_Currency;
        f_QuotReqRjctGrp_Stipulations = f_QuotReqRjctGrp_Stipulations;
        f_QuotReqRjctGrp_Account = f_QuotReqRjctGrp_Account;
        f_QuotReqRjctGrp_AcctIDSource = f_QuotReqRjctGrp_AcctIDSource;
        f_QuotReqRjctGrp_AccountType = f_QuotReqRjctGrp_AccountType;
        f_QuotReqRjctGrp_QuotReqLegsGrp = f_QuotReqRjctGrp_QuotReqLegsGrp;
        f_QuotReqRjctGrp_QuotQualGrp = f_QuotReqRjctGrp_QuotQualGrp;
        f_QuotReqRjctGrp_QuotePriceType = f_QuotReqRjctGrp_QuotePriceType;
        f_QuotReqRjctGrp_OrdType = f_QuotReqRjctGrp_OrdType;
        f_QuotReqRjctGrp_ExpireTime = f_QuotReqRjctGrp_ExpireTime;
        f_QuotReqRjctGrp_TransactTime = f_QuotReqRjctGrp_TransactTime;
        f_QuotReqRjctGrp_SpreadOrBenchmarkCurveData = f_QuotReqRjctGrp_SpreadOrBenchmarkCurveData;
        f_QuotReqRjctGrp_PriceType = f_QuotReqRjctGrp_PriceType;
        f_QuotReqRjctGrp_Price = f_QuotReqRjctGrp_Price;
        f_QuotReqRjctGrp_Price2 = f_QuotReqRjctGrp_Price2;
        f_QuotReqRjctGrp_YieldData = f_QuotReqRjctGrp_YieldData;
        f_QuotReqRjctGrp_Parties = f_QuotReqRjctGrp_Parties
    }
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
;;

let full_rg_quotreqrjctgrp_decoder  : fix_rg_quotreqrjctgrp decoder =
    list full_rg_inner_QuotReqRjctGrp_decoder
;;

let full_rg_inner_ListOrdGrp_decoder  : fix_rg_inner_listordgrp decoder =
    (maybe (field "Designation" string_decoder)) >>= (fun f_ListOrdGrp_Designation -> (maybe (field "ParticipationRate" float_6_decoder)) >>= (fun f_ListOrdGrp_ParticipationRate -> (maybe (field "TargetStrategyParameters" string_decoder)) >>= (fun f_ListOrdGrp_TargetStrategyParameters -> (maybe (field "TargetStrategy" full_enum_targetstrategy_decoder)) >>= (fun f_ListOrdGrp_TargetStrategy -> (field "DiscretionInstructions" full_record_discretioninstructions_decoder) >>= (fun f_ListOrdGrp_DiscretionInstructions -> (field "PegInstructions" full_record_peginstructions_decoder) >>= (fun f_ListOrdGrp_PegInstructions -> (maybe (field "MaxShow" float_6_decoder)) >>= (fun f_ListOrdGrp_MaxShow -> (maybe (field "CoveredOrUncovered" full_enum_coveredoruncovered_decoder)) >>= (fun f_ListOrdGrp_CoveredOrUncovered -> (maybe (field "PositionEffect" full_enum_positioneffect_decoder)) >>= (fun f_ListOrdGrp_PositionEffect -> (maybe (field "Price2" float_6_decoder)) >>= (fun f_ListOrdGrp_Price2 -> (maybe (field "OrderQty2" float_6_decoder)) >>= (fun f_ListOrdGrp_OrderQty2 -> (maybe (field "SettlDate2" localmktdate_decoder)) >>= (fun f_ListOrdGrp_SettlDate2 -> (maybe (field "EncodedText" string_decoder)) >>= (fun f_ListOrdGrp_EncodedText -> (maybe (field "EncodedTextLen" int_decoder)) >>= (fun f_ListOrdGrp_EncodedTextLen -> (maybe (field "Text" string_decoder)) >>= (fun f_ListOrdGrp_Text -> (maybe (field "BookingType" full_enum_bookingtype_decoder)) >>= (fun f_ListOrdGrp_BookingType -> (maybe (field "SettlCurrency" full_enum_currency_decoder)) >>= (fun f_ListOrdGrp_SettlCurrency -> (maybe (field "ForexReq" full_enum_forexreq_decoder)) >>= (fun f_ListOrdGrp_ForexReq -> (maybe (field "CustOrderCapacity" full_enum_custordercapacity_decoder)) >>= (fun f_ListOrdGrp_CustOrderCapacity -> (maybe (field "OrderRestrictions" full_enum_orderrestrictions_decoder)) >>= (fun f_ListOrdGrp_OrderRestrictions -> (maybe (field "OrderCapacity" full_enum_ordercapacity_decoder)) >>= (fun f_ListOrdGrp_OrderCapacity -> (field "CommissionData" full_record_commissiondata_decoder) >>= (fun f_ListOrdGrp_CommissionData -> (maybe (field "GTBookingInst" full_enum_gtbookinginst_decoder)) >>= (fun f_ListOrdGrp_GTBookingInst -> (maybe (field "ExpireTime" utctimestamp_milli_decoder)) >>= (fun f_ListOrdGrp_ExpireTime -> (maybe (field "ExpireDate" localmktdate_decoder)) >>= (fun f_ListOrdGrp_ExpireDate -> (maybe (field "EffectiveTime" utctimestamp_milli_decoder)) >>= (fun f_ListOrdGrp_EffectiveTime -> (maybe (field "TimeInForce" full_enum_timeinforce_decoder)) >>= (fun f_ListOrdGrp_TimeInForce -> (maybe (field "QuoteID" string_decoder)) >>= (fun f_ListOrdGrp_QuoteID -> (maybe (field "IOIID" string_decoder)) >>= (fun f_ListOrdGrp_IOIID -> (maybe (field "SolicitedFlag" full_enum_solicitedflag_decoder)) >>= (fun f_ListOrdGrp_SolicitedFlag -> (maybe (field "ComplianceID" string_decoder)) >>= (fun f_ListOrdGrp_ComplianceID -> (maybe (field "Currency" full_enum_currency_decoder)) >>= (fun f_ListOrdGrp_Currency -> (field "YieldData" full_record_yielddata_decoder) >>= (fun f_ListOrdGrp_YieldData -> (field "SpreadOrBenchmarkCurveData" full_record_spreadorbenchmarkcurvedata_decoder) >>= (fun f_ListOrdGrp_SpreadOrBenchmarkCurveData -> (maybe (field "StopPx" float_6_decoder)) >>= (fun f_ListOrdGrp_StopPx -> (maybe (field "Price" float_6_decoder)) >>= (fun f_ListOrdGrp_Price -> (maybe (field "PriceType" full_enum_pricetype_decoder)) >>= (fun f_ListOrdGrp_PriceType -> (maybe (field "OrdType" full_enum_ordtype_decoder)) >>= (fun f_ListOrdGrp_OrdType -> (field "OrderQtyData" full_record_orderqtydata_decoder) >>= (fun f_ListOrdGrp_OrderQtyData -> (maybe (field "QtyType" full_enum_qtytype_decoder)) >>= (fun f_ListOrdGrp_QtyType -> (field "Stipulations" full_rg_stipulations_decoder) >>= (fun f_ListOrdGrp_Stipulations -> (maybe (field "TransactTime" utctimestamp_milli_decoder)) >>= (fun f_ListOrdGrp_TransactTime -> (maybe (field "LocateReqd" full_enum_locatereqd_decoder)) >>= (fun f_ListOrdGrp_LocateReqd -> (maybe (field "SideValueInd" full_enum_sidevalueind_decoder)) >>= (fun f_ListOrdGrp_SideValueInd -> (maybe (field "Side" full_enum_side_decoder)) >>= (fun f_ListOrdGrp_Side -> (maybe (field "PrevClosePx" float_6_decoder)) >>= (fun f_ListOrdGrp_PrevClosePx -> (field "UndInstrmtGrp" full_rg_undinstrmtgrp_decoder) >>= (fun f_ListOrdGrp_UndInstrmtGrp -> (field "Instrument" full_record_instrument_decoder) >>= (fun f_ListOrdGrp_Instrument -> (maybe (field "ProcessCode" full_enum_processcode_decoder)) >>= (fun f_ListOrdGrp_ProcessCode -> (field "TrdgSesGrp" full_rg_trdgsesgrp_decoder) >>= (fun f_ListOrdGrp_TrdgSesGrp -> (maybe (field "ExDestination" full_enum_exchange_decoder)) >>= (fun f_ListOrdGrp_ExDestination -> (maybe (field "MaxFloor" float_6_decoder)) >>= (fun f_ListOrdGrp_MaxFloor -> (maybe (field "MinQty" float_6_decoder)) >>= (fun f_ListOrdGrp_MinQty -> (maybe (field "ExecInst" full_enum_execinst_decoder)) >>= (fun f_ListOrdGrp_ExecInst -> (maybe (field "HandlInst" full_enum_handlinst_decoder)) >>= (fun f_ListOrdGrp_HandlInst -> (maybe (field "ClearingFeeIndicator" full_enum_clearingfeeindicator_decoder)) >>= (fun f_ListOrdGrp_ClearingFeeIndicator -> (maybe (field "CashMargin" full_enum_cashmargin_decoder)) >>= (fun f_ListOrdGrp_CashMargin -> (maybe (field "SettlDate" localmktdate_decoder)) >>= (fun f_ListOrdGrp_SettlDate -> (maybe (field "SettlType" full_enum_settltype_decoder)) >>= (fun f_ListOrdGrp_SettlType -> (field "PreAllocGrp" full_rg_preallocgrp_decoder) >>= (fun f_ListOrdGrp_PreAllocGrp -> (maybe (field "PreallocMethod" full_enum_preallocmethod_decoder)) >>= (fun f_ListOrdGrp_PreallocMethod -> (maybe (field "AllocID" string_decoder)) >>= (fun f_ListOrdGrp_AllocID -> (maybe (field "BookingUnit" full_enum_bookingunit_decoder)) >>= (fun f_ListOrdGrp_BookingUnit -> (maybe (field "DayBookingInst" full_enum_daybookinginst_decoder)) >>= (fun f_ListOrdGrp_DayBookingInst -> (maybe (field "AccountType" full_enum_accounttype_decoder)) >>= (fun f_ListOrdGrp_AccountType -> (maybe (field "AcctIDSource" full_enum_acctidsource_decoder)) >>= (fun f_ListOrdGrp_AcctIDSource -> (maybe (field "Account" string_decoder)) >>= (fun f_ListOrdGrp_Account -> (maybe (field "TradeDate" localmktdate_decoder)) >>= (fun f_ListOrdGrp_TradeDate -> (maybe (field "TradeOriginationDate" localmktdate_decoder)) >>= (fun f_ListOrdGrp_TradeOriginationDate -> (field "Parties" full_rg_parties_decoder) >>= (fun f_ListOrdGrp_Parties -> (maybe (field "SettlInstMode" full_enum_settlinstmode_decoder)) >>= (fun f_ListOrdGrp_SettlInstMode -> (maybe (field "ClOrdLinkID" string_decoder)) >>= (fun f_ListOrdGrp_ClOrdLinkID -> (maybe (field "ListSeqNo" int_decoder)) >>= (fun f_ListOrdGrp_ListSeqNo -> (maybe (field "SecondaryClOrdID" string_decoder)) >>= (fun f_ListOrdGrp_SecondaryClOrdID -> (maybe (field "ClOrdID" string_decoder)) >>= (fun f_ListOrdGrp_ClOrdID -> (maybe (field "NoOrders" int_decoder)) >>= (fun f_ListOrdGrp_NoOrders -> succeed {
        f_ListOrdGrp_NoOrders = f_ListOrdGrp_NoOrders;
        f_ListOrdGrp_ClOrdID = f_ListOrdGrp_ClOrdID;
        f_ListOrdGrp_SecondaryClOrdID = f_ListOrdGrp_SecondaryClOrdID;
        f_ListOrdGrp_ListSeqNo = f_ListOrdGrp_ListSeqNo;
        f_ListOrdGrp_ClOrdLinkID = f_ListOrdGrp_ClOrdLinkID;
        f_ListOrdGrp_SettlInstMode = f_ListOrdGrp_SettlInstMode;
        f_ListOrdGrp_Parties = f_ListOrdGrp_Parties;
        f_ListOrdGrp_TradeOriginationDate = f_ListOrdGrp_TradeOriginationDate;
        f_ListOrdGrp_TradeDate = f_ListOrdGrp_TradeDate;
        f_ListOrdGrp_Account = f_ListOrdGrp_Account;
        f_ListOrdGrp_AcctIDSource = f_ListOrdGrp_AcctIDSource;
        f_ListOrdGrp_AccountType = f_ListOrdGrp_AccountType;
        f_ListOrdGrp_DayBookingInst = f_ListOrdGrp_DayBookingInst;
        f_ListOrdGrp_BookingUnit = f_ListOrdGrp_BookingUnit;
        f_ListOrdGrp_AllocID = f_ListOrdGrp_AllocID;
        f_ListOrdGrp_PreallocMethod = f_ListOrdGrp_PreallocMethod;
        f_ListOrdGrp_PreAllocGrp = f_ListOrdGrp_PreAllocGrp;
        f_ListOrdGrp_SettlType = f_ListOrdGrp_SettlType;
        f_ListOrdGrp_SettlDate = f_ListOrdGrp_SettlDate;
        f_ListOrdGrp_CashMargin = f_ListOrdGrp_CashMargin;
        f_ListOrdGrp_ClearingFeeIndicator = f_ListOrdGrp_ClearingFeeIndicator;
        f_ListOrdGrp_HandlInst = f_ListOrdGrp_HandlInst;
        f_ListOrdGrp_ExecInst = f_ListOrdGrp_ExecInst;
        f_ListOrdGrp_MinQty = f_ListOrdGrp_MinQty;
        f_ListOrdGrp_MaxFloor = f_ListOrdGrp_MaxFloor;
        f_ListOrdGrp_ExDestination = f_ListOrdGrp_ExDestination;
        f_ListOrdGrp_TrdgSesGrp = f_ListOrdGrp_TrdgSesGrp;
        f_ListOrdGrp_ProcessCode = f_ListOrdGrp_ProcessCode;
        f_ListOrdGrp_Instrument = f_ListOrdGrp_Instrument;
        f_ListOrdGrp_UndInstrmtGrp = f_ListOrdGrp_UndInstrmtGrp;
        f_ListOrdGrp_PrevClosePx = f_ListOrdGrp_PrevClosePx;
        f_ListOrdGrp_Side = f_ListOrdGrp_Side;
        f_ListOrdGrp_SideValueInd = f_ListOrdGrp_SideValueInd;
        f_ListOrdGrp_LocateReqd = f_ListOrdGrp_LocateReqd;
        f_ListOrdGrp_TransactTime = f_ListOrdGrp_TransactTime;
        f_ListOrdGrp_Stipulations = f_ListOrdGrp_Stipulations;
        f_ListOrdGrp_QtyType = f_ListOrdGrp_QtyType;
        f_ListOrdGrp_OrderQtyData = f_ListOrdGrp_OrderQtyData;
        f_ListOrdGrp_OrdType = f_ListOrdGrp_OrdType;
        f_ListOrdGrp_PriceType = f_ListOrdGrp_PriceType;
        f_ListOrdGrp_Price = f_ListOrdGrp_Price;
        f_ListOrdGrp_StopPx = f_ListOrdGrp_StopPx;
        f_ListOrdGrp_SpreadOrBenchmarkCurveData = f_ListOrdGrp_SpreadOrBenchmarkCurveData;
        f_ListOrdGrp_YieldData = f_ListOrdGrp_YieldData;
        f_ListOrdGrp_Currency = f_ListOrdGrp_Currency;
        f_ListOrdGrp_ComplianceID = f_ListOrdGrp_ComplianceID;
        f_ListOrdGrp_SolicitedFlag = f_ListOrdGrp_SolicitedFlag;
        f_ListOrdGrp_IOIID = f_ListOrdGrp_IOIID;
        f_ListOrdGrp_QuoteID = f_ListOrdGrp_QuoteID;
        f_ListOrdGrp_TimeInForce = f_ListOrdGrp_TimeInForce;
        f_ListOrdGrp_EffectiveTime = f_ListOrdGrp_EffectiveTime;
        f_ListOrdGrp_ExpireDate = f_ListOrdGrp_ExpireDate;
        f_ListOrdGrp_ExpireTime = f_ListOrdGrp_ExpireTime;
        f_ListOrdGrp_GTBookingInst = f_ListOrdGrp_GTBookingInst;
        f_ListOrdGrp_CommissionData = f_ListOrdGrp_CommissionData;
        f_ListOrdGrp_OrderCapacity = f_ListOrdGrp_OrderCapacity;
        f_ListOrdGrp_OrderRestrictions = f_ListOrdGrp_OrderRestrictions;
        f_ListOrdGrp_CustOrderCapacity = f_ListOrdGrp_CustOrderCapacity;
        f_ListOrdGrp_ForexReq = f_ListOrdGrp_ForexReq;
        f_ListOrdGrp_SettlCurrency = f_ListOrdGrp_SettlCurrency;
        f_ListOrdGrp_BookingType = f_ListOrdGrp_BookingType;
        f_ListOrdGrp_Text = f_ListOrdGrp_Text;
        f_ListOrdGrp_EncodedTextLen = f_ListOrdGrp_EncodedTextLen;
        f_ListOrdGrp_EncodedText = f_ListOrdGrp_EncodedText;
        f_ListOrdGrp_SettlDate2 = f_ListOrdGrp_SettlDate2;
        f_ListOrdGrp_OrderQty2 = f_ListOrdGrp_OrderQty2;
        f_ListOrdGrp_Price2 = f_ListOrdGrp_Price2;
        f_ListOrdGrp_PositionEffect = f_ListOrdGrp_PositionEffect;
        f_ListOrdGrp_CoveredOrUncovered = f_ListOrdGrp_CoveredOrUncovered;
        f_ListOrdGrp_MaxShow = f_ListOrdGrp_MaxShow;
        f_ListOrdGrp_PegInstructions = f_ListOrdGrp_PegInstructions;
        f_ListOrdGrp_DiscretionInstructions = f_ListOrdGrp_DiscretionInstructions;
        f_ListOrdGrp_TargetStrategy = f_ListOrdGrp_TargetStrategy;
        f_ListOrdGrp_TargetStrategyParameters = f_ListOrdGrp_TargetStrategyParameters;
        f_ListOrdGrp_ParticipationRate = f_ListOrdGrp_ParticipationRate;
        f_ListOrdGrp_Designation = f_ListOrdGrp_Designation
    }
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
;;

let full_rg_listordgrp_decoder  : fix_rg_listordgrp decoder =
    list full_rg_inner_ListOrdGrp_decoder
;;

let full_rg_inner_SettlInstGrp_decoder  : fix_rg_inner_settlinstgrp decoder =
    (maybe (field "PaymentRemitterID" string_decoder)) >>= (fun f_SettlInstGrp_PaymentRemitterID -> (maybe (field "PaymentDate" localmktdate_decoder)) >>= (fun f_SettlInstGrp_PaymentDate -> (maybe (field "CardIssNum" string_decoder)) >>= (fun f_SettlInstGrp_CardIssNum -> (maybe (field "CardExpDate" localmktdate_decoder)) >>= (fun f_SettlInstGrp_CardExpDate -> (maybe (field "CardStartDate" localmktdate_decoder)) >>= (fun f_SettlInstGrp_CardStartDate -> (maybe (field "CardNumber" string_decoder)) >>= (fun f_SettlInstGrp_CardNumber -> (maybe (field "CardHolderName" string_decoder)) >>= (fun f_SettlInstGrp_CardHolderName -> (maybe (field "PaymentRef" string_decoder)) >>= (fun f_SettlInstGrp_PaymentRef -> (maybe (field "PaymentMethod" full_enum_paymentmethod_decoder)) >>= (fun f_SettlInstGrp_PaymentMethod -> (field "SettlInstructionsData" full_record_settlinstructionsdata_decoder) >>= (fun f_SettlInstGrp_SettlInstructionsData -> (maybe (field "LastUpdateTime" utctimestamp_milli_decoder)) >>= (fun f_SettlInstGrp_LastUpdateTime -> (maybe (field "ExpireTime" utctimestamp_milli_decoder)) >>= (fun f_SettlInstGrp_ExpireTime -> (maybe (field "EffectiveTime" utctimestamp_milli_decoder)) >>= (fun f_SettlInstGrp_EffectiveTime -> (maybe (field "CFICode" string_decoder)) >>= (fun f_SettlInstGrp_CFICode -> (maybe (field "SecurityType" full_enum_securitytype_decoder)) >>= (fun f_SettlInstGrp_SecurityType -> (maybe (field "Product" full_enum_product_decoder)) >>= (fun f_SettlInstGrp_Product -> (maybe (field "Side" full_enum_side_decoder)) >>= (fun f_SettlInstGrp_Side -> (field "Parties" full_rg_parties_decoder) >>= (fun f_SettlInstGrp_Parties -> (maybe (field "SettlInstRefID" string_decoder)) >>= (fun f_SettlInstGrp_SettlInstRefID -> (maybe (field "SettlInstTransType" full_enum_settlinsttranstype_decoder)) >>= (fun f_SettlInstGrp_SettlInstTransType -> (maybe (field "SettlInstID" string_decoder)) >>= (fun f_SettlInstGrp_SettlInstID -> (maybe (field "NoSettlInst" int_decoder)) >>= (fun f_SettlInstGrp_NoSettlInst -> succeed {
        f_SettlInstGrp_NoSettlInst = f_SettlInstGrp_NoSettlInst;
        f_SettlInstGrp_SettlInstID = f_SettlInstGrp_SettlInstID;
        f_SettlInstGrp_SettlInstTransType = f_SettlInstGrp_SettlInstTransType;
        f_SettlInstGrp_SettlInstRefID = f_SettlInstGrp_SettlInstRefID;
        f_SettlInstGrp_Parties = f_SettlInstGrp_Parties;
        f_SettlInstGrp_Side = f_SettlInstGrp_Side;
        f_SettlInstGrp_Product = f_SettlInstGrp_Product;
        f_SettlInstGrp_SecurityType = f_SettlInstGrp_SecurityType;
        f_SettlInstGrp_CFICode = f_SettlInstGrp_CFICode;
        f_SettlInstGrp_EffectiveTime = f_SettlInstGrp_EffectiveTime;
        f_SettlInstGrp_ExpireTime = f_SettlInstGrp_ExpireTime;
        f_SettlInstGrp_LastUpdateTime = f_SettlInstGrp_LastUpdateTime;
        f_SettlInstGrp_SettlInstructionsData = f_SettlInstGrp_SettlInstructionsData;
        f_SettlInstGrp_PaymentMethod = f_SettlInstGrp_PaymentMethod;
        f_SettlInstGrp_PaymentRef = f_SettlInstGrp_PaymentRef;
        f_SettlInstGrp_CardHolderName = f_SettlInstGrp_CardHolderName;
        f_SettlInstGrp_CardNumber = f_SettlInstGrp_CardNumber;
        f_SettlInstGrp_CardStartDate = f_SettlInstGrp_CardStartDate;
        f_SettlInstGrp_CardExpDate = f_SettlInstGrp_CardExpDate;
        f_SettlInstGrp_CardIssNum = f_SettlInstGrp_CardIssNum;
        f_SettlInstGrp_PaymentDate = f_SettlInstGrp_PaymentDate;
        f_SettlInstGrp_PaymentRemitterID = f_SettlInstGrp_PaymentRemitterID
    }
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
;;

let full_rg_settlinstgrp_decoder  : fix_rg_settlinstgrp decoder =
    list full_rg_inner_SettlInstGrp_decoder
;;

let full_rg_inner_AllocGrp_decoder  : fix_rg_inner_allocgrp decoder =
    (field "SettlInstructionsData" full_record_settlinstructionsdata_decoder) >>= (fun f_AllocGrp_SettlInstructionsData -> (maybe (field "AllocSettlInstType" full_enum_allocsettlinsttype_decoder)) >>= (fun f_AllocGrp_AllocSettlInstType -> (field "ClrInstGrp" full_rg_clrinstgrp_decoder) >>= (fun f_AllocGrp_ClrInstGrp -> (field "MiscFeesGrp" full_rg_miscfeesgrp_decoder) >>= (fun f_AllocGrp_MiscFeesGrp -> (maybe (field "AllocInterestAtMaturity" float_6_decoder)) >>= (fun f_AllocGrp_AllocInterestAtMaturity -> (maybe (field "AllocAccruedInterestAmt" float_6_decoder)) >>= (fun f_AllocGrp_AllocAccruedInterestAmt -> (maybe (field "SettlCurrFxRateCalc" full_enum_settlcurrfxratecalc_decoder)) >>= (fun f_AllocGrp_SettlCurrFxRateCalc -> (maybe (field "SettlCurrFxRate" float_decoder)) >>= (fun f_AllocGrp_SettlCurrFxRate -> (maybe (field "AllocSettlCurrency" full_enum_currency_decoder)) >>= (fun f_AllocGrp_AllocSettlCurrency -> (maybe (field "SettlCurrency" full_enum_currency_decoder)) >>= (fun f_AllocGrp_SettlCurrency -> (maybe (field "AllocSettlCurrAmt" float_6_decoder)) >>= (fun f_AllocGrp_AllocSettlCurrAmt -> (maybe (field "SettlCurrAmt" float_6_decoder)) >>= (fun f_AllocGrp_SettlCurrAmt -> (maybe (field "AllocNetMoney" float_6_decoder)) >>= (fun f_AllocGrp_AllocNetMoney -> (maybe (field "AllocAvgPx" float_6_decoder)) >>= (fun f_AllocGrp_AllocAvgPx -> (field "CommissionData" full_record_commissiondata_decoder) >>= (fun f_AllocGrp_CommissionData -> (maybe (field "EncodedAllocText" string_decoder)) >>= (fun f_AllocGrp_EncodedAllocText -> (maybe (field "EncodedAllocTextLen" int_decoder)) >>= (fun f_AllocGrp_EncodedAllocTextLen -> (maybe (field "AllocText" string_decoder)) >>= (fun f_AllocGrp_AllocText -> (maybe (field "AllocHandlInst" full_enum_allochandlinst_decoder)) >>= (fun f_AllocGrp_AllocHandlInst -> (maybe (field "NotifyBrokerOfCredit" full_enum_notifybrokerofcredit_decoder)) >>= (fun f_AllocGrp_NotifyBrokerOfCredit -> (field "NestedParties" full_rg_nestedparties_decoder) >>= (fun f_AllocGrp_NestedParties -> (maybe (field "ProcessCode" full_enum_processcode_decoder)) >>= (fun f_AllocGrp_ProcessCode -> (maybe (field "IndividualAllocID" string_decoder)) >>= (fun f_AllocGrp_IndividualAllocID -> (maybe (field "AllocQty" float_6_decoder)) >>= (fun f_AllocGrp_AllocQty -> (maybe (field "AllocPrice" float_6_decoder)) >>= (fun f_AllocGrp_AllocPrice -> (maybe (field "MatchStatus" full_enum_matchstatus_decoder)) >>= (fun f_AllocGrp_MatchStatus -> (maybe (field "AllocAcctIDSource" int_decoder)) >>= (fun f_AllocGrp_AllocAcctIDSource -> (maybe (field "AllocAccount" string_decoder)) >>= (fun f_AllocGrp_AllocAccount -> (maybe (field "NoAllocs" int_decoder)) >>= (fun f_AllocGrp_NoAllocs -> succeed {
        f_AllocGrp_NoAllocs = f_AllocGrp_NoAllocs;
        f_AllocGrp_AllocAccount = f_AllocGrp_AllocAccount;
        f_AllocGrp_AllocAcctIDSource = f_AllocGrp_AllocAcctIDSource;
        f_AllocGrp_MatchStatus = f_AllocGrp_MatchStatus;
        f_AllocGrp_AllocPrice = f_AllocGrp_AllocPrice;
        f_AllocGrp_AllocQty = f_AllocGrp_AllocQty;
        f_AllocGrp_IndividualAllocID = f_AllocGrp_IndividualAllocID;
        f_AllocGrp_ProcessCode = f_AllocGrp_ProcessCode;
        f_AllocGrp_NestedParties = f_AllocGrp_NestedParties;
        f_AllocGrp_NotifyBrokerOfCredit = f_AllocGrp_NotifyBrokerOfCredit;
        f_AllocGrp_AllocHandlInst = f_AllocGrp_AllocHandlInst;
        f_AllocGrp_AllocText = f_AllocGrp_AllocText;
        f_AllocGrp_EncodedAllocTextLen = f_AllocGrp_EncodedAllocTextLen;
        f_AllocGrp_EncodedAllocText = f_AllocGrp_EncodedAllocText;
        f_AllocGrp_CommissionData = f_AllocGrp_CommissionData;
        f_AllocGrp_AllocAvgPx = f_AllocGrp_AllocAvgPx;
        f_AllocGrp_AllocNetMoney = f_AllocGrp_AllocNetMoney;
        f_AllocGrp_SettlCurrAmt = f_AllocGrp_SettlCurrAmt;
        f_AllocGrp_AllocSettlCurrAmt = f_AllocGrp_AllocSettlCurrAmt;
        f_AllocGrp_SettlCurrency = f_AllocGrp_SettlCurrency;
        f_AllocGrp_AllocSettlCurrency = f_AllocGrp_AllocSettlCurrency;
        f_AllocGrp_SettlCurrFxRate = f_AllocGrp_SettlCurrFxRate;
        f_AllocGrp_SettlCurrFxRateCalc = f_AllocGrp_SettlCurrFxRateCalc;
        f_AllocGrp_AllocAccruedInterestAmt = f_AllocGrp_AllocAccruedInterestAmt;
        f_AllocGrp_AllocInterestAtMaturity = f_AllocGrp_AllocInterestAtMaturity;
        f_AllocGrp_MiscFeesGrp = f_AllocGrp_MiscFeesGrp;
        f_AllocGrp_ClrInstGrp = f_AllocGrp_ClrInstGrp;
        f_AllocGrp_AllocSettlInstType = f_AllocGrp_AllocSettlInstType;
        f_AllocGrp_SettlInstructionsData = f_AllocGrp_SettlInstructionsData
    }
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
;;

let full_rg_allocgrp_decoder  : fix_rg_allocgrp decoder =
    list full_rg_inner_AllocGrp_decoder
;;

let full_rg_inner_QuotSetGrp_decoder  : fix_rg_inner_quotsetgrp decoder =
    (field "QuotEntryGrp" full_rg_quotentrygrp_decoder) >>= (fun f_QuotSetGrp_QuotEntryGrp -> (maybe (field "LastFragment" full_enum_lastfragment_decoder)) >>= (fun f_QuotSetGrp_LastFragment -> (maybe (field "TotNoQuoteEntries" int_decoder)) >>= (fun f_QuotSetGrp_TotNoQuoteEntries -> (maybe (field "QuoteSetValidUntilTime" utctimestamp_milli_decoder)) >>= (fun f_QuotSetGrp_QuoteSetValidUntilTime -> (field "UnderlyingInstrument" full_record_underlyinginstrument_decoder) >>= (fun f_QuotSetGrp_UnderlyingInstrument -> (maybe (field "QuoteSetID" string_decoder)) >>= (fun f_QuotSetGrp_QuoteSetID -> (maybe (field "NoQuoteSets" int_decoder)) >>= (fun f_QuotSetGrp_NoQuoteSets -> succeed {
        f_QuotSetGrp_NoQuoteSets = f_QuotSetGrp_NoQuoteSets;
        f_QuotSetGrp_QuoteSetID = f_QuotSetGrp_QuoteSetID;
        f_QuotSetGrp_UnderlyingInstrument = f_QuotSetGrp_UnderlyingInstrument;
        f_QuotSetGrp_QuoteSetValidUntilTime = f_QuotSetGrp_QuoteSetValidUntilTime;
        f_QuotSetGrp_TotNoQuoteEntries = f_QuotSetGrp_TotNoQuoteEntries;
        f_QuotSetGrp_LastFragment = f_QuotSetGrp_LastFragment;
        f_QuotSetGrp_QuotEntryGrp = f_QuotSetGrp_QuotEntryGrp
    }
    )
    )
    )
    )
    )
    )
    )
;;

let full_rg_quotsetgrp_decoder  : fix_rg_quotsetgrp decoder =
    list full_rg_inner_QuotSetGrp_decoder
;;

let full_rg_inner_QuotSetAckGrp_decoder  : fix_rg_inner_quotsetackgrp decoder =
    (field "QuotEntryAckGrp" full_rg_quotentryackgrp_decoder) >>= (fun f_QuotSetAckGrp_QuotEntryAckGrp -> (maybe (field "LastFragment" full_enum_lastfragment_decoder)) >>= (fun f_QuotSetAckGrp_LastFragment -> (maybe (field "TotNoQuoteEntries" int_decoder)) >>= (fun f_QuotSetAckGrp_TotNoQuoteEntries -> (field "UnderlyingInstrument" full_record_underlyinginstrument_decoder) >>= (fun f_QuotSetAckGrp_UnderlyingInstrument -> (maybe (field "QuoteSetID" string_decoder)) >>= (fun f_QuotSetAckGrp_QuoteSetID -> (maybe (field "NoQuoteSets" int_decoder)) >>= (fun f_QuotSetAckGrp_NoQuoteSets -> succeed {
        f_QuotSetAckGrp_NoQuoteSets = f_QuotSetAckGrp_NoQuoteSets;
        f_QuotSetAckGrp_QuoteSetID = f_QuotSetAckGrp_QuoteSetID;
        f_QuotSetAckGrp_UnderlyingInstrument = f_QuotSetAckGrp_UnderlyingInstrument;
        f_QuotSetAckGrp_TotNoQuoteEntries = f_QuotSetAckGrp_TotNoQuoteEntries;
        f_QuotSetAckGrp_LastFragment = f_QuotSetAckGrp_LastFragment;
        f_QuotSetAckGrp_QuotEntryAckGrp = f_QuotSetAckGrp_QuotEntryAckGrp
    }
    )
    )
    )
    )
    )
    )
;;

let full_rg_quotsetackgrp_decoder  : fix_rg_quotsetackgrp decoder =
    list full_rg_inner_QuotSetAckGrp_decoder
;;

[@@@logic]
