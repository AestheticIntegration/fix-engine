(* Aesthetic Integration copyright 2019 *)
open Full_app_enums;;

let parse_PartyIDSource (str)  =
    (match str with
        | "B" -> (Some (FIX_PartyIDSource_BIC_code))
        | "C" -> (Some (FIX_PartyIDSource_Generally_accepted_market_participant_identifier__e_g__e_mail_address_))
        | "D" -> (Some (FIX_PartyIDSource_Proprietary_code))
        | "G" -> (Some (FIX_PartyIDSource_MIC))
        | "N" -> (Some (FIX_PartyIDSource_Legal_entity_identifier))
        | "P" -> (Some (FIX_PartyIDSource_Short_code))
        | _ -> (None)
    )
;;

let parse_PartyRole (str)  =
    (match str with
        | "1" -> (Some (FIX_PartyRole_Executing_Firm))
        | "3" -> (Some (FIX_PartyRole_ClientID))
        | "11" -> (Some (FIX_PartyRole_Order_origination_trader__associated_with_order_origination_firm__e_g_g__trader_who_initiates___submits_the_order_))
        | "12" -> (Some (FIX_PartyRole_Executing_Trader))
        | "13" -> (Some (FIX_PartyRole_Order_origination_firm__e_g__Buy_side_firm_))
        | "73" -> (Some (FIX_PartyRole_Execution_venue))
        | "122" -> (Some (FIX_PartyRole_Investment_Decision_Maker__MIFID_II_Clients_))
        | _ -> (None)
    )
;;

let parse_Algorithm (str)  =
    (match str with
        | "22" -> (Some (FIX_Algorithm_Algorithm))
        | _ -> (None)
    )
;;

let parse_PartySubIDType (str)  =
    (match str with
        | "17" -> (Some (FIX_PartySubIDType_CSD_participant_code__DTCC_))
        | _ -> (None)
    )
;;

let parse_SecurityIDSource (str)  =
    (match str with
        | "1" -> (Some (FIX_SecurityIDSource_CUSIP))
        | "4" -> (Some (FIX_SecurityIDSource_ISIN))
        | "101" -> (Some (FIX_SecurityIDSource_Dummy_CUSIP))
        | "0" -> (Some (FIX_SecurityIDSource_WKN))
        | _ -> (None)
    )
;;

let parse_Product (str)  =
    (match str with
        | "3" -> (Some (FIX_Product_Corporate))
        | "5" -> (Some (FIX_Product_Preferred))
        | "6" -> (Some (FIX_Product_Government))
        | "11" -> (Some (FIX_Product_Municipal))
        | "12" -> (Some (FIX_Product_Other))
        | _ -> (None)
    )
;;

let parse_SecurityAltIDSource (str)  =
    (match str with
        | "1" -> (Some (FIX_SecurityAltIDSource_CUSIP))
        | "4" -> (Some (FIX_SecurityAltIDSource_ISIN))
        | "101" -> (Some (FIX_SecurityAltIDSource_TRAX_ICMA_Number))
        | "B" -> (Some (FIX_SecurityAltIDSource_WKN))
        | _ -> (None)
    )
;;

let parse_BenchmarkCurveName (str)  =
    (match str with
        | "EDSF" -> (Some (FIX_BenchmarkCurveName_EDSF))
        | "LIBOR" -> (Some (FIX_BenchmarkCurveName_LIBOR__London_Inter_Bank_Offers_))
        | "SWAP" -> (Some (FIX_BenchmarkCurveName_SWAP))
        | _ -> (None)
    )
;;

let parse_BenchmarkPriceType (str)  =
    (match str with
        | "1" -> (Some (FIX_BenchmarkPriceType_percent_of_par))
        | _ -> (None)
    )
;;

let parse_BenchmarkSecurityIDSource (str)  =
    (match str with
        | "1" -> (Some (FIX_BenchmarkSecurityIDSource_CUSIP))
        | "4" -> (Some (FIX_BenchmarkSecurityIDSource_ISIN))
        | "B" -> (Some (FIX_BenchmarkSecurityIDSource_WKN))
        | _ -> (None)
    )
;;

let parse_LegSecurityIDSource (str)  =
    (match str with
        | "1" -> (Some (FIX_LegSecurityIDSource_CUSIP))
        | "4" -> (Some (FIX_LegSecurityIDSource_ISIN))
        | "101" -> (Some (FIX_LegSecurityIDSource_MA_Dummy_CUSIP))
        | "B" -> (Some (FIX_LegSecurityIDSource_WKN))
        | _ -> (None)
    )
;;

let parse_LegProduct (str)  =
    (match str with
        | "1" -> (Some (FIX_LegProduct_AGENCY))
        | "2" -> (Some (FIX_LegProduct_COMMODITY))
        | "3" -> (Some (FIX_LegProduct_Corporate))
        | "4" -> (Some (FIX_LegProduct_CURRENCY))
        | "5" -> (Some (FIX_LegProduct_EQUITY))
        | "6" -> (Some (FIX_LegProduct_Government))
        | "7" -> (Some (FIX_LegProduct_INDEX))
        | "8" -> (Some (FIX_LegProduct_LOAN))
        | "9" -> (Some (FIX_LegProduct_MONEYMARKET))
        | "10" -> (Some (FIX_LegProduct_MORTGAGE))
        | "11" -> (Some (FIX_LegProduct_MUNICIPAL))
        | "12" -> (Some (FIX_LegProduct_OTHER))
        | "13" -> (Some (FIX_LegProduct_FINANCING))
        | _ -> (None)
    )
;;

let parse_LegSide (str)  =
    (match str with
        | "1" -> (Some (FIX_LegSide_buy))
        | "2" -> (Some (FIX_LegSide_sell))
        | "C" -> (Some (FIX_LegSide_Opposite))
        | _ -> (None)
    )
;;

let parse_HandlInst (str)  =
    (match str with
        | "1" -> (Some (FIX_HandlInst_Automated_execution_order))
        | "3" -> (Some (FIX_HandlInst_Manual_Order__best_execution))
        | _ -> (None)
    )
;;

let parse_ExecInst (str)  =
    (match str with
        | "2" -> (Some (FIX_ExecInst_WORK))
        | _ -> (None)
    )
;;

let parse_SettlType (str)  =
    (match str with
        | "0" -> (Some (FIX_SettlType_Regular))
        | "1" -> (Some (FIX_SettlType_Cash))
        | "2" -> (Some (FIX_SettlType_T_Plus_1__next_day_))
        | "3" -> (Some (FIX_SettlType_T_Plus_2))
        | "4" -> (Some (FIX_SettlType_T_Plus_3))
        | "5" -> (Some (FIX_SettlType_T_Plus_4))
        | "6" -> (Some (FIX_SettlType_Future))
        | "7" -> (Some (FIX_SettlType_When_and_if_issued))
        | "8" -> (Some (FIX_SettlType_Sellers_Option))
        | "9" -> (Some (FIX_SettlType_T_Plus_5))
        | _ -> (None)
    )
;;

let parse_OrderCapacity (str)  =
    (match str with
        | "A" -> (Some (FIX_OrderCapacity_Any_Other_Trading_Capacity__AOTC_))
        | "P" -> (Some (FIX_OrderCapacity_Own_Account))
        | "R" -> (Some (FIX_OrderCapacity_Matched_Principal))
        | _ -> (None)
    )
;;

let parse_QtyType (str)  =
    (match str with
        | "0" -> (Some (FIX_QtyType_units__shares__par__currency___Always_interpreted_as_par_by_MarketAxess_))
        | "1" -> (Some (FIX_QtyType_Contracts))
        | _ -> (None)
    )
;;

let parse_ForexReq (str)  =
    (match str with
        | "N" -> (Some (FIX_ForexReq_No))
        | "Y" -> (Some (FIX_ForexReq_Yes))
        | _ -> (None)
    )
;;

let parse_IncludeDealers (str)  =
    (match str with
        | "1" -> (Some (FIX_IncludeDealers_Include_Only_Send_to_only_the_dealers))
        | "2" -> (Some (FIX_IncludeDealers_Include_at_Least__Send_to_dealers))
        | _ -> (None)
    )
;;

let parse_DealerIDSource (str)  =
    (match str with
        | "B" -> (Some (FIX_DealerIDSource_BIC_code))
        | "C" -> (Some (FIX_DealerIDSource_Generally_accepted_market_participant_identifier))
        | "D" -> (Some (FIX_DealerIDSource_Proprietary_code))
        | _ -> (None)
    )
;;

let parse_Exclude (str)  =
    (match str with
        | "N" -> (Some (FIX_Exclude_No__include_dealer_))
        | "Y" -> (Some (FIX_Exclude_Yes__exclude_dealer_))
        | _ -> (None)
    )
;;

let parse_TradingProtocol (str)  =
    (match str with
        | "DM" -> (Some (FIX_TradingProtocol_DM))
        | "EU Price" -> (Some (FIX_TradingProtocol_EU_Price))
        | "LMPrice" -> (Some (FIX_TradingProtocol_LMPrice))
        | "Price" -> (Some (FIX_TradingProtocol_Price))
        | "Spread" -> (Some (FIX_TradingProtocol_Spread))
        | "USDPrice" -> (Some (FIX_TradingProtocol_USDPrice))
        | "Yield" -> (Some (FIX_TradingProtocol_Yield))
        | "PFDS Price" -> (Some (FIX_TradingProtocol_PFDS_Price))
        | _ -> (None)
    )
;;

let parse_MKTXPricingProcess (str)  =
    (match str with
        | "1" -> (Some (FIX_MKTXPricingProcess_Manual))
        | "2" -> (Some (FIX_MKTXPricingProcess_Phone_Spot))
        | "3" -> (Some (FIX_MKTXPricingProcess_Auto))
        | "4" -> (Some (FIX_MKTXPricingProcess_OneStep))
        | "5" -> (Some (FIX_MKTXPricingProcess_Standard))
        | "6" -> (Some (FIX_MKTXPricingProcess_Delayed_Spot))
        | _ -> (None)
    )
;;

let parse_MKTXRTSPurpose (str)  =
    (match str with
        | "FundCrossing" -> (Some (FIX_MKTXRTSPurpose_FundCrossing))
        | _ -> (None)
    )
;;

let parse_PriceType (str)  =
    (match str with
        | "1" -> (Some (FIX_PriceType_Percentage))
        | "6" -> (Some (FIX_PriceType_Spread))
        | "9" -> (Some (FIX_PriceType_Yield))
        | "97" -> (Some (FIX_PriceType_NEGATIVE_YIELD))
        | "98" -> (Some (FIX_PriceType_DECIMAL_UNIT_PRICE))
        | _ -> (None)
    )
;;

let parse_LegSwapType (str)  =
    (match str with
        | "1" -> (Some (FIX_LegSwapType_Par_for_Par))
        | "2" -> (Some (FIX_LegSwapType_Modified_Duration))
        | _ -> (None)
    )
;;

let parse_MKTXListType (str)  =
    (match str with
        | "Portfolio" -> (Some (FIX_MKTXListType_Portfolio))
        | _ -> (None)
    )
;;

let parse_OrdStatus (str)  =
    (match str with
        | "0" -> (Some (FIX_OrdStatus_New_))
        | "1" -> (Some (FIX_OrdStatus_Partially_filled))
        | "2" -> (Some (FIX_OrdStatus_Filled_))
        | "4" -> (Some (FIX_OrdStatus_Cancelled))
        | "8" -> (Some (FIX_OrdStatus_Rejected))
        | "A" -> (Some (FIX_OrdStatus_Pending_New))
        | "D" -> (Some (FIX_OrdStatus_Accepted_for_bidding))
        | _ -> (None)
    )
;;

let parse_CxlRejResponseTo (str)  =
    (match str with
        | "1" -> (Some (FIX_CxlRejResponseTo_Order_Cancel_Request_))
        | _ -> (None)
    )
;;

let parse_CxlRejReason (str)  =
    (match str with
        | "0" -> (Some (FIX_CxlRejReason_All_cases_where_it_is_too_late_to_cancel))
        | "1" -> (Some (FIX_CxlRejReason_Unknown_Order))
        | _ -> (None)
    )
;;

let parse_BusinessRejectReason (str)  =
    (match str with
        | "0" -> (Some (FIX_BusinessRejectReason_Other))
        | "1" -> (Some (FIX_BusinessRejectReason_Unknown))
        | "2" -> (Some (FIX_BusinessRejectReason_Unknown_Security))
        | "3" -> (Some (FIX_BusinessRejectReason_Unsupported_Message))
        | "4" -> (Some (FIX_BusinessRejectReason_Application_Not_Available))
        | "5" -> (Some (FIX_BusinessRejectReason_Conditionally_required_field_missing))
        | _ -> (None)
    )
;;

let parse_AllocTransType (str)  =
    (match str with
        | "0" -> (Some (FIX_AllocTransType_New))
        | "1" -> (Some (FIX_AllocTransType_Replace))
        | "2" -> (Some (FIX_AllocTransType_Cancel))
        | "3" -> (Some (FIX_AllocTransType_Preliminary))
        | "4" -> (Some (FIX_AllocTransType_Calculated))
        | _ -> (None)
    )
;;

let parse_AllocCancReplaceReason (str)  =
    (match str with
        | "99" -> (Some (FIX_AllocCancReplaceReason_Other))
        | "1" -> (Some (FIX_AllocCancReplaceReason_Original_details_incomplete___incorrect))
        | _ -> (None)
    )
;;

let parse_AllocReportType (str)  =
    (match str with
        | "3" -> (Some (FIX_AllocReportType_Sellside_calculated_using_preliminary))
        | "4" -> (Some (FIX_AllocReportType_Sellside_calculated_without_preliminary))
        | _ -> (None)
    )
;;

let parse_AllocStatus (str)  =
    (match str with
        | "0" -> (Some (FIX_AllocStatus_Accepted))
        | "3" -> (Some (FIX_AllocStatus_received__not_yet_processed_))
        | "1" -> (Some (FIX_AllocStatus_block_level_reject))
        | _ -> (None)
    )
;;

let parse_AllocNoOrdersType (str)  =
    (match str with
        | "0" -> (Some (FIX_AllocNoOrdersType_Not_specified))
        | "1" -> (Some (FIX_AllocNoOrdersType_Explicit_list_provided))
        | _ -> (None)
    )
;;

let parse_YieldType (str)  =
    (match str with
        | "CALL" -> (Some (FIX_YieldType_CALL))
        | "MATURITY" -> (Some (FIX_YieldType_MATURITY))
        | "PUT" -> (Some (FIX_YieldType_PUT))
        | _ -> (None)
    )
;;

let parse_AllocRejCode (str)  =
    (match str with
        | "0" -> (Some (FIX_AllocRejCode_Unknown_account_s_))
        | "1" -> (Some (FIX_AllocRejCode_Incorrect_quantity))
        | "3" -> (Some (FIX_AllocRejCode_Unknown_executing_broker__dealer_))
        | "5" -> (Some (FIX_AllocRejCode_unknown_OrderID))
        | "6" -> (Some (FIX_AllocRejCode_Unknown_ListID))
        | "7" -> (Some (FIX_AllocRejCode_Other))
        | "8" -> (Some (FIX_AllocRejCode_Incorrect_allocated_quantity))
        | "9" -> (Some (FIX_AllocRejCode_calculation_difference))
        | "10" -> (Some (FIX_AllocRejCode_unknown_or_stale_ExecID))
        | "11" -> (Some (FIX_AllocRejCode_mismatched_data_value))
        | "12" -> (Some (FIX_AllocRejCode_Unknown_ClOrdID))
        | _ -> (None)
    )
;;

let parse_AllocType (str)  =
    (match str with
        | "2" -> (Some (FIX_AllocType_Buyside_preliminary))
        | _ -> (None)
    )
;;

let parse_SessionRejectReason (str)  =
    (match str with
        | "0" -> (Some (FIX_SessionRejectReason_Invalid_Tag_number))
        | "1" -> (Some (FIX_SessionRejectReason_Required_Tag_missing))
        | "2" -> (Some (FIX_SessionRejectReason_Tag_not_defined_for_this_message_type))
        | "3" -> (Some (FIX_SessionRejectReason_Undefined_Tag))
        | "4" -> (Some (FIX_SessionRejectReason_Tag_specified_without_a_value))
        | "5" -> (Some (FIX_SessionRejectReason_Value_is_incorrect__out_of_range__for_this_Tag))
        | "6" -> (Some (FIX_SessionRejectReason_Incorrect_data_format_for_value))
        | "7" -> (Some (FIX_SessionRejectReason_Decryption_problem))
        | "8" -> (Some (FIX_SessionRejectReason_Signature_problem))
        | "9" -> (Some (FIX_SessionRejectReason_CompID_problem))
        | "10" -> (Some (FIX_SessionRejectReason_SendingTime_accuracy_problem))
        | "11" -> (Some (FIX_SessionRejectReason_Invalid_MsgType))
        | "12" -> (Some (FIX_SessionRejectReason_XML_Validation_error))
        | "13" -> (Some (FIX_SessionRejectReason_Tag_appears_more_than_once))
        | "14" -> (Some (FIX_SessionRejectReason_Tag_specified_out_of_required_order))
        | "15" -> (Some (FIX_SessionRejectReason_Repeating_group_fields_out_of_order))
        | "16" -> (Some (FIX_SessionRejectReason_Incorrect_NumInGroup_count_for_repeating_group))
        | "17" -> (Some (FIX_SessionRejectReason_Non_data_value_includes_field_delimiter__SOH_character_))
        | "99" -> (Some (FIX_SessionRejectReason_Other))
        | _ -> (None)
    )
;;

let parse_GapFillFlag (str)  =
    (match str with
        | "N" -> (Some (FIX_GapFillFlag_Sequence_Reset))
        | "Y" -> (Some (FIX_GapFillFlag_Gap_Fill_Messages))
        | _ -> (None)
    )
;;

let parse_MKTXTrdRegPublicationReason (str)  =
    (match str with
        | "6" -> (Some (FIX_MKTXTrdRegPublicationReason_LRGS))
        | "7" -> (Some (FIX_MKTXTrdRegPublicationReason_ILQD))
        | "8" -> (Some (FIX_MKTXTrdRegPublicationReason_SIZE))
        | _ -> (None)
    )
;;

let parse_TrdRegPublicationType (str)  =
    (match str with
        | "0" -> (Some (FIX_TrdRegPublicationType_Pretrade_Transparency_Waiver))
        | "1" -> (Some (FIX_TrdRegPublicationType_Exempt_From_Publication))
        | _ -> (None)
    )
;;

let parse_TrdRegPublicationReason (str)  =
    (match str with
        | "0" -> (Some (FIX_TrdRegPublicationReason_NLIQ))
        | "1" -> (Some (FIX_TrdRegPublicationReason_OLIQ))
        | "2" -> (Some (FIX_TrdRegPublicationReason_PRIC))
        | "3" -> (Some (FIX_TrdRegPublicationReason_RFPT))
        | "4" -> (Some (FIX_TrdRegPublicationReason_ILQD))
        | "5" -> (Some (FIX_TrdRegPublicationReason_SIZE))
        | "6" -> (Some (FIX_TrdRegPublicationReason_LRGS))
        | "7" -> (Some (FIX_TrdRegPublicationReason_ILQD_2))
        | "8" -> (Some (FIX_TrdRegPublicationReason_SIZE_2))
        | _ -> (None)
    )
;;

let parse_MKTXESCBStblty (str)  =
    (match str with
        | "I" -> (Some (FIX_MKTXESCBStblty_Investment_Operations))
        | "S" -> (Some (FIX_MKTXESCBStblty_Stability_Operations))
        | _ -> (None)
    )
;;

let parse_PreTradeWaiver (str)  =
    (match str with
        | "6" -> (Some (FIX_PreTradeWaiver_LRGS))
        | "7" -> (Some (FIX_PreTradeWaiver_ILQD))
        | "8" -> (Some (FIX_PreTradeWaiver_SIZE))
        | _ -> (None)
    )
;;

let parse_MKTXTradeReportingInd (str)  =
    (match str with
        | "0" -> (Some (FIX_MKTXTradeReportingInd_Trade_not_yet_reported))
        | "1" -> (Some (FIX_MKTXTradeReportingInd_Trade_reported_on_book))
        | "2" -> (Some (FIX_MKTXTradeReportingInd_Trade_reported_as_systematic_internaliser))
        | "3" -> (Some (FIX_MKTXTradeReportingInd_Trade_reported_as_nonsystematic_internaliser))
        | "4" -> (Some (FIX_MKTXTradeReportingInd_Trade_reported_under_sub_delegation_arrangement))
        | _ -> (None)
    )
;;

let parse_TradeReportingIndicator (str)  =
    (match str with
        | "0" -> (Some (FIX_TradeReportingIndicator_Trade_has_not_been_reported))
        | "1" -> (Some (FIX_TradeReportingIndicator_Trade_has_been_reported_by_a_trading_venue_as_an_On_book_trade))
        | "2" -> (Some (FIX_TradeReportingIndicator_Trade_has_been_reported_as_a_systematic_internaliser_seller_trade))
        | "3" -> (Some (FIX_TradeReportingIndicator_Trade_has_been_reported_as_a_systematic_internaliser_buyer_trade))
        | "4" -> (Some (FIX_TradeReportingIndicator_Trade_has_been_reported_as_a_nonsystematic_internaliser_seller_trade))
        | _ -> (None)
    )
;;

let parse_InternalCrossingFlag (str)  =
    (match str with
        | "FundCrossing" -> (Some (FIX_InternalCrossingFlag_FundCrossing))
        | _ -> (None)
    )
;;

let parse_RegulatoryTradeIDType (str)  =
    (match str with
        | "5" -> (Some (FIX_RegulatoryTradeIDType_Trading_venue_transaction_identifier))
        | _ -> (None)
    )
;;

let parse_ExecType (str)  =
    (match str with
        | "0" -> (Some (FIX_ExecType_New))
        | "4" -> (Some (FIX_ExecType_Cancelled))
        | "8" -> (Some (FIX_ExecType_Rejected))
        | "F" -> (Some (FIX_ExecType_Trade__partial_fill_or_fill_))
        | "G" -> (Some (FIX_ExecType_Trade_Correct))
        | "H" -> (Some (FIX_ExecType_Trade_Cancel))
        | _ -> (None)
    )
;;

let parse_OrdRejReason (str)  =
    (match str with
        | "1" -> (Some (FIX_OrdRejReason_Unknown_symbol))
        | "6" -> (Some (FIX_OrdRejReason_Duplicate_order))
        | "11" -> (Some (FIX_OrdRejReason_Unsupported_order_characteristic))
        | "13" -> (Some (FIX_OrdRejReason_Incorrect_quantity))
        | "99" -> (Some (FIX_OrdRejReason_Other))
        | _ -> (None)
    )
;;

let parse_CompetitiveStatus (str)  =
    (match str with
        | "Client Passed" -> (Some (FIX_CompetitiveStatus_Client_Passed))
        | "Covered" -> (Some (FIX_CompetitiveStatus_second_best))
        | "DNT" -> (Some (FIX_CompetitiveStatus_Did_not_trade))
        | "Done" -> (Some (FIX_CompetitiveStatus_Traded___Amended))
        | "Done-ABC" -> (Some (FIX_CompetitiveStatus_Done_Awaiting_Book_Confirmation))
        | "Done-ASC" -> (Some (FIX_CompetitiveStatus_Done_Awaiting_Spot_Confirmation))
        | "EXP-DNQ" -> (Some (FIX_CompetitiveStatus_Dealer_did_not_respond_to_enquiry_before_client_traded))
        | "EXP-Price" -> (Some (FIX_CompetitiveStatus_price_expired))
        | "Missed" -> (Some (FIX_CompetitiveStatus_third_best__or_worse))
        | "Passed" -> (Some (FIX_CompetitiveStatus_Dealer_passed))
        | "Tied" -> (Some (FIX_CompetitiveStatus_For_Covered_or_Best))
        | "Tied for Cover" -> (Some (FIX_CompetitiveStatus_Tied_for_Cover))
        | "Timed Out" -> (Some (FIX_CompetitiveStatus_No_response_from_dealer))
        | "Timed Out (R)" -> (Some (FIX_CompetitiveStatus_Timed_Out__R_))
        | "Traded" -> (Some (FIX_CompetitiveStatus_Traded))
        | _ -> (None)
    )
;;

let parse_MKTXAnalysisTo (str)  =
    (match str with
        | "Avg" -> (Some (FIX_MKTXAnalysisTo_Avg))
        | "BondTicker" -> (Some (FIX_MKTXAnalysisTo_BondTicker))
        | "CompositeClose" -> (Some (FIX_MKTXAnalysisTo_CompositeClose))
        | "CompositeMid" -> (Some (FIX_MKTXAnalysisTo_CompositeMid))
        | "Cover" -> (Some (FIX_MKTXAnalysisTo_Cover))
        | "Internal Target" -> (Some (FIX_MKTXAnalysisTo_Internal_Target))
        | _ -> (None)
    )
;;

let parse_LastCapacity (str)  =
    (match str with
        | "1" -> (Some (FIX_LastCapacity_Agent))
        | "2" -> (Some (FIX_LastCapacity_Cross_as_Agent))
        | "3" -> (Some (FIX_LastCapacity_Cross_as_Principal))
        | "4" -> (Some (FIX_LastCapacity_Principal))
        | "5" -> (Some (FIX_LastCapacity_Matched_Principal))
        | _ -> (None)
    )
;;

let parse_MKTXTradeStyle (str)  =
    (match str with
        | "0" -> (Some (FIX_MKTXTradeStyle_Portfolio))
        | _ -> (None)
    )
;;

let parse_MKTXAutoExType (str)  =
    (match str with
        | "A" -> (Some (FIX_MKTXAutoExType_If_the_inquiry_is_submitted_for_auto_ex_via_auto_submit_))
        | "M" -> (Some (FIX_MKTXAutoExType_If_the_inquiry_is_submitted_for_auto_ex_from_manual_workstation))
        | _ -> (None)
    )
;;

let parse_MKTXAutoExStatus (str)  =
    (match str with
        | "Auto-Executed" -> (Some (FIX_MKTXAutoExStatus_If_the_inquiry_was_auto_executed_))
        | "DNT" -> (Some (FIX_MKTXAutoExStatus_If_the_inquiry_did_not_execute_either_manually_or_through_auto_ex_process_))
        | "Manually Executed" -> (Some (FIX_MKTXAutoExStatus_If_the_inquiry_fail_to_auto_execute_but_was_later_executed_manually_))
        | _ -> (None)
    )
;;

let parse_MKTXAutoExRefLevelType (str)  =
    (match str with
        | "Client Limit" -> (Some (FIX_MKTXAutoExRefLevelType_Level_was_provided_on_the_RTS_message_or_manually_entered_in_the_Limit_column_on_the_Workstation_))
        | "Composite+" -> (Some (FIX_MKTXAutoExRefLevelType_Composite_Plus_value_is_being_used_as_Execution_reference_))
        | "Manual" -> (Some (FIX_MKTXAutoExRefLevelType_Level_was_manually_entered_in_the_Execution_Reference_column_on_the_Workstation_))
        | _ -> (None)
    )
;;

let parse_DKReason (str)  =
    (match str with
        | "A" -> (Some (FIX_DKReason_unknown_symbol__unknown_security_))
        | "B" -> (Some (FIX_DKReason_wrong_side))
        | "C" -> (Some (FIX_DKReason_quantity_exceeds_order))
        | "D" -> (Some (FIX_DKReason_no_matching_order))
        | "E" -> (Some (FIX_DKReason_Price_exceeds_limit))
        | "F" -> (Some (FIX_DKReason_calculation_difference))
        | "Z" -> (Some (FIX_DKReason_other))
        | _ -> (None)
    )
;;

let parse_Side (str)  =
    (match str with
        | "1" -> (Some (FIX_Side_Buy))
        | "2" -> (Some (FIX_Side_Sell))
        | "B" -> (Some (FIX_Side_As_Defined__for_multi_legs_))
        | "H" -> (Some (FIX_Side_Sell_Undisclosed))
        | _ -> (None)
    )
;;

let parse_week (str)  =
    (match str with
        | "noweek" -> (Some (FIX_week_noweek))
        | "w1" -> (Some (FIX_week_w1))
        | "w2" -> (Some (FIX_week_w2))
        | "w3" -> (Some (FIX_week_w3))
        | "w4" -> (Some (FIX_week_w4))
        | "w5" -> (Some (FIX_week_w5))
        | _ -> (None)
    )
;;
