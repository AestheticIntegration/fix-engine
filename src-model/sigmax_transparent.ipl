//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Aesthetic Integration Limited
//  Copyright (c) 2014 - 2017
//
//  Model of GS SigmaX dark pool FIX 4.2 specification
//
//////////////////////////////////////////////////////////////////////////////////////////////////
import FIX_4_2
import FIX_4_4

// Set the precision to be 4 decimal places
precision (Price, 4)
//////////////////////////////////////////////////////////////////////////////////////////////////
// 
// Declare new and extend existing enums
//
//////////////////////////////////////////////////////////////////////////////////////////////////
// Execution instruction field

@encoding: char
extend enum ExecInst {
    BestBidPeg "x"
    BestOfferPeg "z"
    HalfSweep "h"
    FullSweep "f"
}

@encoding: char
extend enum OrdRejReason {
    DVC_ProactivelyHaltedInstrument "P"
    DVC_ThresholdBreached "T"
    OtherRejectReason "O"
}

// Used to further qualify the value of PartyRole (42)
@encoding: int 
declare enum PartyRoleQualifier {
    Algorithm "22"
    FirmOrLegalEntity "23"
    NaturalPerson "24"
}

// Effect indicator on liquidity. It indicates whether a trade adds liquidity (A) or removes
// liquidity (R) from the marketplace.
@encoding: char 
declare enum LiquidityIndicator {
    AddLiquidity "A"
    RemoveLiquidity "R"
    PeriodicAuction "P"
}

// Consent of order routing. 
// This routing indicator allows the order isser specifying whether the order can be routed to
// other venues. Actual order routing depends on the market and other rules.
@encoding: int 
declare enum Routing {
    NoOrderRouting "0"
    OrderRoutingApproved "1"
}

// Order technical origin. Indicates the nature of the order issuer; for example, it can be a manual
// entry, or an order coming from a Program Trading system.
@encoding: char 
declare enum TechnicalOrdType {
    IndexArbitrage "I"
    PortfolioStrategy "P"
    UnwindOrder "U"
    OtherOrders "A"
    CrossMargining "C"
}
    
// The presence of a supported value indicates that condition applies to the order.
@encoding: int 
declare enum OrderAttributeTypes {
    LiquidityProvisionActivity "2"
    AlgorithmicOrder "4"
}

// ClearingHandlingType
@encoding: int 
declare enum ClearingHandlingType {
    ManualMode "0"
    AutomaticExtraction "1"
    AutomaticAllocation "2"
}

// Order entry allowed indicator. 
@encoding: int 
declare enum OrderEntryAllowed {
    OrderEntryForbidden "0"
    OrderEntryAllowed "1"
}

// Hit collar (high or low) in case of order rejection due to collar breach.
@encoding: char 
declare enum CollareRejType { 
    LowCollar "L"
    HighCollar "H"
}

// Field used to identify the order book - Auction or RPW
@encoding: char 
declare enum BookIndicator {
    Auction "A"
    RPW "R"
}

// Field used to identify if Broker Prioritization is activated.
@encoding: int 
declare enum BrokerPrioritization {
    WithoutBrokerPriotization "0"
    WithBrokerPrioritization "1"
}

// Represents the current market trading phase for instruments belonging to that class and whose 
// status is inherited.
@encoding: string 
declare enum ClassStatus {
    EarlyMonitoring "EAMO"
    SPContinuous "SPCO"
    ClosingCall "CLCA"
    LateMonitoring "LAMO"
    Halted "HALT"
    Closed "CLSD"
}

// Extending TimeInForce Enum
@encoding: char 
extend enum TimeInForce {
    GoodForAuction "B"
}

@encoding: char 
extend enum CrossType {
    NotSignificant "0"
    StandardCross "P" 
}

//////////////////////////////////////////////////////////////////////////////////////////////////
// 
// Extend the messages to include those new enums
//
//////////////////////////////////////////////////////////////////////////////////////////////////
extend message OrderSingle {
    TechnicalOrdType     "9941" : TechnicalOrdType
    BookIndicator       "10078" :? BookIndicator 
    MIC                  "9949" : string
    BrokerPrioritization "10079": BrokerPrioritization
    DEAIndicator        "21017" : int
    OrderAttributeTypes "8015"  : OrderAttributeTypes
    Parties                     : Parties
    ClearingEntries             : ClearingEntries
}

extend message OrderCancelRequest {
    MIC                  "9949" :? string
    Currency               "15" :? Currency
}

extend message OrderCancelReplaceRequest {
    TechnicalOrdType     "9941" : TechnicalOrdType
    FreeText             "9952" : string
    ClearingHandlingType "9938" : ClearingHandlingType
    MIC                  "9949" : string
    DEAIndicator        "21017" :? int
    Parties                     : Parties
}

extend message TradingSessionStatus {
    ClassID              "9945" :? string
    ClassStatus          "9947" :? ClassStatus
    MktPhaseChgTime      "9977" :? UTCTimestamp
    OrderEntryAllowed    "9948" :? OrderEntryAllowed
}

extend message ExecutionReport {
    CrossType              "549" :? CrossType
    TechnicalOrdType      "9941" :? TechnicalOrdType
    FreeText              "9952" :? string
    ClearingHandlingType  "9938" :? ClearingHandlingType
    UTPExID               "9731" :? int
    LiquidityIndicator    "9730" :? LiquidityIndicator
    ErrorCode             "9955" :? int
    MIC                   "9949" :? string
    BookIndicator        "10078" :? BookIndicator
    BrokerPrioritization "10079" :? BrokerPrioritization
    IMPTimestamp         "10080" :? UTCTimeOnly
    DEAIndicator         "21017" :? int
    OrderAttributeTypes   "8015" :? OrderAttributeTypes
    Parties : Parties
    ContraGrp: ContraGrp
}

extend message OrderCancelReject {
    ErrorCode            "9955" : int
    Symbol                 "55" : string
    ExecInst               "18" :? ExecInst
}

extend message FIX_4_4.OrderMassCancelRequest {
    Account "1" :? string
    Symbol "55" :? string
    ClassID "9945" :? string
    TechnicalOrdType "9941" :? TechnicalOrdType
    Rule80A "47" :? Rule80A
    CancelByLocationID "9960" :? string
}

extend message FIX_4_4.OrderMassCancelReport {
    Symbol "55" :? string
    ClassID "9945" :? string
    TechnicalOrdType "9941" :? TechnicalOrdType
    Rule80A "47" :? Rule80A
    Account "1" :? string
    CancelByLocationID "9960" :? string
    MIC "9949" :? string
}

extend record Parties {
    PartyRoleQualifier "2376":? PartyRoleQualifier
}

extend enum PartyRole {
	InvestmentDecisionMaker "112"
}

extend enum PartyIDSource {
    ShortCodeIdentifier "P"
}

declare repeating record ClearingEntries {
    NoClearingEntries "9933" :? NumInGroup
    Rule80A "47" :? Rule80A
    Account "1" :? string
    ClientID "109" :? string
    FreeText "9952" :? string
    ClearingFirm "439" :? string
    OpenClose "77" :? OpenClose
    ClearingHandlingType "9938" :? ClearingHandlingType
}

extend enum Rule80A {
    Client "1"
    House "2"
    RisklessPrincipal "3"
}

/////////////////////////
//
// New Order message and action 
//
/////////////////////////////
outbound message OrderSingle {
    req ClOrdID
    req Symbol
    req Side         
    req OrdType      
    opt TimeInForce  
    opt ExecInst 
    opt Price
    req OrderQty 
    opt BookIndicator 
    opt MinQty      
    opt PegDifference  
    req TransactTime
    opt Currency
    req HandlInst
    req TechnicalOrdType
    req MIC
    req BrokerPrioritization
    req DEAIndicator
    req Parties 
    req ClearingEntries
    opt OrderAttributeTypes
}

action neworder {
    ClOrdID               : string
    Symbol                : string
    Side                  : Side
    OrdType               : OrdType
    TimeInForce           :? TimeInForce
    ExecInst              :? ExecInst
    Price                 :? Price
    OrderQty              : Qty
    BookIndicator         :? BookIndicator
    MinQty                :? Qty
    PegDifference         :? float
    TransactTime          : UTCTimestamp
    Currency              :? Currency
    HandlInst             : HandlInst
    TechnicalOrdType      : TechnicalOrdType
    MIC                   : string
    BrokerPrioritization  : BrokerPrioritization
    DEAIndicator          : int
    Parties               : Parties
    ClearingEntries       : ClearingEntries
    OrderAttributeTypes   :? OrderAttributeTypes
} 

receive (x : neworder) {
    let dummy = "314159" 
    send OrderSingle with {
        ClOrdID              = x.ClOrdID               ;    
        Symbol               = x.Symbol                ;
        Side                 = x.Side                  ;
        OrdType              = x.OrdType               ;
        TimeInForce          = x.TimeInForce           ;
        ExecInst             = x.ExecInst              ;
        Price                = x.Price                 ;
        OrderQty             = x.OrderQty              ;
        BookIndicator        = x.BookIndicator         ;
        MinQty               = x.MinQty                ;
        PegDifference        = x.PegDifference         ;
        TransactTime         = x.TransactTime          ;
        Currency             = x.Currency              ;
        HandlInst            = x.HandlInst             ;
        TechnicalOrdType     = x.TechnicalOrdType      ;
        MIC                  = x.MIC                   ;
        BrokerPrioritization = x.BrokerPrioritization  ;
        DEAIndicator         = x.DEAIndicator          ;
        Parties              = x.Parties               ;
        ClearingEntries      = x.ClearingEntries       ;
        OrderAttributeTypes  = x.OrderAttributeTypes   ;
    }
}
/////////////////////////
//
// Order Cancel Replace message and action 
//
/////////////////////////////

action cancelreplace {
    OrderID               :? string
    ClOrdID               :  string
    OrigClOrdID           :  string
    Symbol                :  string
    Side                  :  Side
    OrdType               :  OrdType
    TimeInForce           :? TimeInForce
    ExecInst              :? ExecInst
    Price                 :? Price
    OrderQty              :  Qty
    PegDifference         :? float
    TechnicalOrdType      :? TechnicalOrdType
    Rule80A               :  Rule80A
    Account               :? string
    ClientID              :? string
    FreeText              :? string
    ClearingFirm          :? string
    OpenClose             :? OpenClose
    ClearingHandlingType  :? ClearingHandlingType
    MIC                   :? string
    Currency              :? Currency
}

outbound message OrderCancelReplaceRequest {
    opt OrderID         
    req ClOrdID
    req OrigClOrdID 
    req Symbol
    req Side         
    req OrdType      
    opt TimeInForce  
    opt ExecInst 
    opt Price
    req OrderQty 
    opt PegDifference  
    opt TechnicalOrdType
    req Rule80A
    opt Account
    opt ClientID
    opt FreeText
    opt ClearingFirm
    opt OpenClose
    opt ClearingHandlingType
    opt MIC
    opt Currency                  
}

receive(x : cancelreplace) {
    send OrderCancelReplaceRequest with {
        OrderID              = x.OrderID              ;
        ClOrdID              = x.ClOrdID              ;
        OrigClOrdID          = x.OrigClOrdID          ;
        Symbol               = x.Symbol               ;
        Side                 = x.Side                 ;
        OrdType              = x.OrdType              ;
        TimeInForce          = x.TimeInForce          ;
        ExecInst             = x.ExecInst             ;
        Price                = x.Price                ;
        OrderQty             = x.OrderQty             ;
        PegDifference        = x.PegDifference        ;
        TechnicalOrdType     = x.TechnicalOrdType     ;
        Rule80A              = x.Rule80A              ;
        Account              = x.Account              ;
        ClientID             = x.ClientID             ;
        FreeText             = x.FreeText             ;
        ClearingFirm         = x.ClearingFirm         ;
        OpenClose            = x.OpenClose            ;
        ClearingHandlingType = x.ClearingHandlingType ;
        MIC                  = x.MIC                  ;
        Currency             = x.Currency             ; 
    }
}
/////////////////////////
//
// Cancel Request message and action 
//
/////////////////////////////

action cancel {
    OrderID        :? string
    ClOrdID        :  string
    OrigClOrdID    :  string  
    Symbol         :  string
    OrderQty       :? Qty  
    TransactTime   :? UTCTimestamp  
    MIC            :? string           
    Currency       :? Currency      
} 

outbound message OrderCancelRequest {
    opt OrderID         
    req ClOrdID            
    req OrigClOrdID             
    req Symbol            
    opt OrderQty            
    opt TransactTime            
    opt MIC            
    opt Currency            
}

receive (x : cancel ) {
    send OrderCancelRequest with {
        OrderID      = x.OrderID      ; 
        ClOrdID      = x.ClOrdID      ; 
        OrigClOrdID  = x.OrigClOrdID  ; 
        Symbol       = x.Symbol       ; 
        OrderQty     = x.OrderQty     ; 
        TransactTime = x.TransactTime ; 
        MIC          = x.MIC          ; 
        Currency     = x.Currency     ; 
    } 
}

/////////////////////////
//
// Mass Cancel Request message and action 
//
/////////////////////////////

action masscancel {
    ClOrdID                :? string
    Symbol                 :? string
    ClassID                :? string
    MassCancelRequestType  :? MassCancelRequestType
    Side                   :? Side
    TechnicalOrdType       :? TechnicalOrdType
    Rule80A                :? Rule80A
    Account                :? string
    CancelByLocationID     :? string
    TransactTime           :? UTCTimestamp
}

outbound message FIX_4_4.OrderMassCancelRequest {
    opt ClOrdID                
    opt Symbol                 
    opt ClassID                
    opt MassCancelRequestType  
    opt Side                   
    opt TechnicalOrdType       
    opt Rule80A                
    opt Account                
    opt CancelByLocationID     
    opt TransactTime           
}

receive (x : masscancel ) {
    send OrderMassCancelRequest with {
        ClOrdID               = x.ClOrdID              ;
        Symbol                = x.Symbol               ;
        ClassID               = x.ClassID              ;
        MassCancelRequestType = x.MassCancelRequestType;
        Side                  = x.Side                 ;
        TechnicalOrdType      = x.TechnicalOrdType     ;
        Rule80A               = x.Rule80A              ;
        Account               = x.Account              ;
        CancelByLocationID    = x.CancelByLocationID   ;
        TransactTime          = x.TransactTime         ;
    } 
}

// ExecutionReport is imorted to create model conversions

message ExecutionReport {

    opt OrderID
    opt Symbol

    req ExecID
    req ExecTransType
    req OrdStatus
    req ExecType
    req AvgPx
    req Side
    req LeavesQty
    req CumQty
    req Text

    opt FreeText
    opt ClearingHandlingType
    opt UTPExID
    opt LiquidityIndicator
    opt ErrorCode
    opt MIC
    opt BookIndicator
    opt BrokerPrioritization
    opt DEAIndicator
    opt OrderAttributeTypes
    opt ClOrdID
    opt OrigClOrdID
    opt TransactTime
    opt OrdRejReason
    opt ExecRefID
    opt LastPx
    opt LastShares
    opt OrdType
    opt TimeInForce
    opt ExecInst
    opt Price
    opt OrderQty
    opt PegDifference
    opt Account
    opt ClientID
    opt ClearingFirm
    opt OpenClose
    opt Currency
    opt TechnicalOrdType
    opt CrossType
    opt IMPTimestamp

    req Parties
    req ContraGrp
}

message OrderCancelReject {
    opt ClOrdID
    opt OrigClOrdID
    opt OrderID
    req Symbol
    opt ExecInst
    req OrdStatus    
    req ErrorCode
    req Text
    req CxlRejReason
    req CxlRejResponseTo
}

message FIX_4_4.OrderMassCancelReport {
    opt ClOrdID 
    opt Symbol 
    opt ClassID 
    req MassCancelRequestType 
    opt Side 
    opt TechnicalOrdType 
    opt Rule80A
    opt Account
    opt CancelByLocationID
    req TotalAffectedOrders
    opt TransactTime
    opt MIC 
}
