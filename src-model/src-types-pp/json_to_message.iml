(* Imandra Inc. copyright 2020 *)
[@@@program]
[@@@import "../../src-core-pp/base_types_json.iml"]
open Base_types_json;;
[@@@import "../../src-core-pp/datetime_json.iml"]
open Datetime_json;;
[@@@require "decoders-yojson"]
open Decoders_yojson.Basic.Decode;;
[@@@require "decoders-yojson"]
open Decoders_yojson.Basic.Decode.Infix;;
[@@@import "json_to_enum.iml"]
open Json_to_enum;;
[@@@import "json_to_model_tag.iml"]
open Json_to_model_tag;;
[@@@import "../src-types/model_messages.iml"]
open Model_messages;;


let mod_message_executionreport_decoder  : mod_executionreport_data decoder =
    (maybe (field "Text" string_decoder)) >>= (fun mod_f_ExecutionReport_Text -> (field "Instrument.Symbol" string_decoder) >>= (fun mod_f_ExecutionReport_Instrument_Symbol -> (field "OrdStatus" mod_enum_ordstatus_decoder) >>= (fun mod_f_ExecutionReport_OrdStatus -> (field "CumQty" float_6_decoder) >>= (fun mod_f_ExecutionReport_CumQty -> (field "LeavesQty" float_6_decoder) >>= (fun mod_f_ExecutionReport_LeavesQty -> (field "Side" mod_enum_side_decoder) >>= (fun mod_f_ExecutionReport_Side -> (field "AvgPx" float_6_decoder) >>= (fun mod_f_ExecutionReport_AvgPx -> (field "ExecType" mod_enum_exectype_decoder) >>= (fun mod_f_ExecutionReport_ExecType -> (field "ExecID" string_decoder) >>= (fun mod_f_ExecutionReport_ExecID -> (field "OrderID" string_decoder) >>= (fun mod_f_ExecutionReport_OrderID -> (field "ClOrdID" string_decoder) >>= (fun mod_f_ExecutionReport_ClOrdID -> succeed {
        mod_f_ExecutionReport_ClOrdID = mod_f_ExecutionReport_ClOrdID;
        mod_f_ExecutionReport_OrderID = mod_f_ExecutionReport_OrderID;
        mod_f_ExecutionReport_ExecID = mod_f_ExecutionReport_ExecID;
        mod_f_ExecutionReport_ExecType = mod_f_ExecutionReport_ExecType;
        mod_f_ExecutionReport_AvgPx = mod_f_ExecutionReport_AvgPx;
        mod_f_ExecutionReport_Side = mod_f_ExecutionReport_Side;
        mod_f_ExecutionReport_LeavesQty = mod_f_ExecutionReport_LeavesQty;
        mod_f_ExecutionReport_CumQty = mod_f_ExecutionReport_CumQty;
        mod_f_ExecutionReport_OrdStatus = mod_f_ExecutionReport_OrdStatus;
        mod_f_ExecutionReport_Instrument_Symbol = mod_f_ExecutionReport_Instrument_Symbol;
        mod_f_ExecutionReport_Text = mod_f_ExecutionReport_Text
    }
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    [@@macro]
;;

let mod_message_newordersingle_decoder  : mod_newordersingle_data decoder =
    (field "Instrument.Symbol" string_decoder) >>= (fun mod_f_NewOrderSingle_Instrument_Symbol -> (field "OrdType" mod_enum_ordtype_decoder) >>= (fun mod_f_NewOrderSingle_OrdType -> (field "TransactTime" utctimestamp_milli_decoder) >>= (fun mod_f_NewOrderSingle_TransactTime -> (field "Side" mod_enum_side_decoder) >>= (fun mod_f_NewOrderSingle_Side -> (field "ClOrdID" string_decoder) >>= (fun mod_f_NewOrderSingle_ClOrdID -> succeed {
        mod_f_NewOrderSingle_ClOrdID = mod_f_NewOrderSingle_ClOrdID;
        mod_f_NewOrderSingle_Side = mod_f_NewOrderSingle_Side;
        mod_f_NewOrderSingle_TransactTime = mod_f_NewOrderSingle_TransactTime;
        mod_f_NewOrderSingle_OrdType = mod_f_NewOrderSingle_OrdType;
        mod_f_NewOrderSingle_Instrument_Symbol = mod_f_NewOrderSingle_Instrument_Symbol
    }
    )
    )
    )
    )
    )
    [@@macro]
;;

let model_message_decoder  : model_msg decoder =
    (field "tag" string) >>= (fun x -> (match x with
        | "8" -> ((field "data" mod_message_executionreport_decoder) >>= (fun y -> succeed (FIX_Msg_ExecutionReport y)
        ))
        | "D" -> ((field "data" mod_message_newordersingle_decoder) >>= (fun y -> succeed (FIX_Msg_NewOrderSingle y)
        ))
        | d -> (fail ("Unknown Message ("^d^") in JSON decoding."))
    )
    )
    [@@macro]
;;

let top_level_message_decoder  : model_top_level_msg decoder =
    (field "top_level_msg" string) >>= (fun f -> (match f with
        | "FIX_TL_Normal" -> ((field "data" model_message_decoder) >>= (fun x -> succeed (FIX_TL_Normal x)
        ))
        | "FIX_TL_Req_Field_Missing" -> ((field "data" field_missing_data_decoder) >>= (fun x -> succeed (FIX_TL_Req_Field_Missing x)
        ))
        | "FIX_TL_PossibleResend" -> ((field "data" model_message_decoder) >>= (fun x -> succeed (FIX_TL_PossibleResend x)
        ))
        | _ -> (succeed FIX_TL_None)
    )
    )
    [@@macro]
;;

[@@@logic]
