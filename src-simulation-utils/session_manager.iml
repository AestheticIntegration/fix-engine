module Internal : sig 
  type t

  val save : t -> (int * int) -> unit Lwt.t
  val create : reset:bool -> dir:string -> t 
  val get : t -> (int * int)
end = struct

let (>>=) = Lwt.(>>=)

type t =
  { dir : string
  ; seqin  : int 
  ; seqout : int 
  }

let read_int file =
  try
    let chn = open_in file in
    let num = input_line chn in
    let () = close_in chn in
    num |> int_of_string |> Z.of_int
  with
    _exn -> 0
    
let read_seqns dir =
  let seqin  = read_int Filename.(concat dir "seqin" ) in
  let seqout = read_int Filename.(concat dir "seqout") in
  { dir; seqin; seqout }

let prepare_folder dir =
  if not(Caml_sys.file_exists dir) then 
    Caml_unix.(mkdir dir (Z.to_int 0o775)) 
  else ()   

let write_int dir fname num =
  let filename = Filename.(concat dir fname) in 
  Lwt_io.(open_file ~mode:output filename) >>= fun fch ->
  Lwt_io.write fch (String.of_int num) >>= fun () ->
  Lwt_io.close fch


let save state (seqin, seqout) =
  write_int state.dir "seqin"  seqin  >>= fun () ->
  write_int state.dir "seqout" seqout 


let create ~reset ~dir =
  let () = prepare_folder dir in
  let state = read_seqns dir in
  let state = if reset then { state with seqin = 0; seqout = 0 } else state in
  state


let get state = (state.seqin, state.seqout)

end

include Internal