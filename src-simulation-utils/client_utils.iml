(** FIX 4.4 engine client implementation. *)
(***
    
    Imandra Inc.
    Copyright (c) 2014 - 2019

    client_utils.iml
    
*)
[@@@require "lwt"]
[@@@require "lwt.unix"]
[@@@require "lwt-zmq"]
[@@@require "cmdliner"]
[@@@import "../src-core-time-defaults-pp/time_defaults_current_time.iml"]
[@@@import "../src-model/src-types-pp/model_messages_json.iml"]
[@@@import "fix_connection.iml"]
[@@@import "../src-core-time-defaults-pp/time_defaults_json.iml"]
[@@@import "../src-model/src-types-pp/json_to_action.iml"]
[@@@import "fix_global_state.iml"]
[@@@program]
module J = Yojson.Basic
module D = Decoders_yojson.Basic.Decode
let (>>=) = Lwt.(>>=);;

let ctime = Time_defaults_current_time.get_current_utctimestamp;;

let zmq_publish socket out msg =
    let msg = Model_messages_json.json_of_model_msg msg in
    let rtime = Fix_connection.get_last_received_utctimestamp () in
    let ztime = Time_defaults_current_time.get_current_utctimestamp () in
    let stime = Fix_connection.get_last_received_sendingtime () in
    let rtime = rtime |> Time_defaults_json.utctimestamp_to_json in
    let ztime = ztime |> Time_defaults_json.utctimestamp_to_json in
    let stime = stime |> Time_defaults_json.utctimestamp_to_json in
    let tpair = 
        if out then ( "sent_fix"     , ztime )
               else ( "received_fix" , rtime )
    in
    let msg = match msg with
        | `Assoc pairs -> `Assoc (
	    tpair :: 
        ( "sent_zmq"     , ztime ) :: 
        ( "SendingTime"  , stime ) :: pairs )
        | other -> other in
    let msg = Yojson.to_string msg in
    Lwt_zmq.Socket.send socket msg  
;;

let rec zmq_rep_loop (socket, mailbox) =
    Lwt_zmq.Socket.(recv socket) >>= fun msg ->
    if msg = "LOGOUT" then 
        Lwt_mvar.put mailbox Fix_global_state.Terminate  >>= fun () ->
        Lwt_zmq.Socket.(send socket "ACKED")
    else if msg = "STATUS" then
        Lwt_zmq.Socket.(send socket "UP") >>= fun () ->
        zmq_rep_loop (socket, mailbox) 
    else
    let json = J.from_string msg in
    match D.decode_value Json_to_action.fix_action_decoder json with
    | Error _ -> (
        Lwt_zmq.Socket.(send socket "REJECTED") >>= fun () ->
        zmq_rep_loop (socket, mailbox) )   
    | Ok action -> (
        Lwt_mvar.put mailbox (Fix_global_state.ModelAction action) >>= fun () ->
        Lwt_zmq.Socket.(send socket "ACKED") >>= fun () ->
        zmq_rep_loop (socket, mailbox) )
;;

let f config (zmqrep, zmqpub) (inch, outch) =
    let close_channels () = 
        Lwt_io.printl "Connection closed, shutting down." >>= fun () ->
        Lwt_io.close inch >>= fun () ->
        Lwt_io.close outch
        in
    let open Fix_connection in
    let config = { config with pub_callback = Some (zmq_publish zmqpub) } in
    let connection = create config (inch, outch) in 
    let mailbox = get_input_mailbox connection in  
    let initmsg = Fix_global_state.Internal_Message ( create_session_msg connection ) in
    Lwt.catch ( fun () ->
        Lwt_mvar.put mailbox initmsg >>= fun () -> 
        Lwt.choose [
            get_heartbeat_thread connection;
            get_fix_thread connection;
            zmq_rep_loop (zmqrep, mailbox)
        ]
    ) ( fun _ -> close_channels () )
;;


let run_client fixhost fixport config zmqpub zmqrep = 
    (* Bringing up a ZMQ sockets *)
    let zmqcontext = ZMQ.Context.create () in
    let zmqpubsocket = ZMQ.Socket.(create zmqcontext pub) in
    let () = ZMQ.Socket.bind zmqpubsocket zmqpub in
    let zmqpubsocket = Lwt_zmq.Socket.of_socket zmqpubsocket in
    let zmqrepsocket = ZMQ.Socket.(create zmqcontext rep) in
    let () = ZMQ.Socket.bind zmqrepsocket zmqrep in    
    let zmqrepsocket = Lwt_zmq.Socket.of_socket zmqrepsocket in
    (* Creating the address *)
    let addr = Caml_unix.( (gethostbyname fixhost).h_addr_list.(0) ) in      
    let addr = Caml_unix.( ADDR_INET( addr , fixport ) ) in
    let () = [
        "(*********                   FIX Engine Client                           *********)";
        "(*********  (c)Copyright Imandra Inc.., 2014 - 2019                      *********)\n";
        Printf.sprintf " - FIX client connecting to %s:%d" fixhost fixport;
        Printf.sprintf " - FIX session %s -> %s" config.Fix_connection.comp_id config.Fix_connection.target_id;
        Printf.sprintf " - Internal messages are published on ZMQ socket %s" zmqpub;
        Printf.sprintf " - Model actions are received on ZMQ socket %s" zmqrep;
        "\n(*********************************************************************************)\n";
        ] |> String.concat "\n" |> print_endline in
    let client_thread = Lwt_io.with_connection addr ( f config (zmqrepsocket, zmqpubsocket) ) in
    Lwt_main.run client_thread
;;

let mkconfig compid hostid targetid reset =
    Fix_connection.{
        comp_id = compid;
        host_id = Some hostid;
        on_behalf_id = Some hostid; 
        target_id = targetid;
        pub_callback = None;
        reset_seq = reset;
        timer = 1.0p;
    }
;;

[@@@logic]
