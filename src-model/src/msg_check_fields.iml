(* Aesthetic Integration copyright 2019 *)
open Good_functions;;
open Model_app_enums;;
open Model_messages;;
open Model_repeating_groups;;
open Msg_check_types;;
open RepeatingGroupConsistencyChecks;;
open State;;

let check_field_mod_f_NewOrderSingle_ClOrdID_inner0 (msg_data : mod_newordersingle_data)  =
    if (good_string msg_data.mod_f_NewOrderSingle_ClOrdID) then
        fields_are_good
    else
        (field_invalid "Field ClOrdID of Message NewOrderSingle violates the constraint: \"validity constraint.\"")
;;

let check_field_mod_f_NewOrderSingle_ClOrdID_outer (msg_data : mod_newordersingle_data)  =
    let check_field_mod_f_NewOrderSingle_ClOrdID_inner0_result = check_field_mod_f_NewOrderSingle_ClOrdID_inner0 msg_data in
    if check_field_mod_f_NewOrderSingle_ClOrdID_inner0_result.is_invalid then
        check_field_mod_f_NewOrderSingle_ClOrdID_inner0_result
    else
        fields_are_good
;;

let check_field_mod_f_NewOrderSingle_ClOrdID (msg_data : mod_newordersingle_data)  =
    check_field_mod_f_NewOrderSingle_ClOrdID_outer msg_data
;;

let check_field_mod_f_NewOrderSingle_Currency_inner0 (msg_data : mod_newordersingle_data)  =
    if ((match msg_data.mod_f_NewOrderSingle_Currency with
        | Some cap_string_length_check_var -> (good_string cap_string_length_check_var)
        | None -> true
    )
    ) then
        fields_are_good
    else
        (field_invalid "Field Currency of Message NewOrderSingle violates the constraint: \"validity constraint.\"")
;;

let check_field_mod_f_NewOrderSingle_Currency_outer (msg_data : mod_newordersingle_data)  =
    let check_field_mod_f_NewOrderSingle_Currency_inner0_result = check_field_mod_f_NewOrderSingle_Currency_inner0 msg_data in
    if check_field_mod_f_NewOrderSingle_Currency_inner0_result.is_invalid then
        check_field_mod_f_NewOrderSingle_Currency_inner0_result
    else
        fields_are_good
;;

let check_field_mod_f_NewOrderSingle_Currency (msg_data : mod_newordersingle_data)  =
    (match msg_data.mod_f_NewOrderSingle_Currency with
        | None -> fields_are_good
        | Some _ -> (check_field_mod_f_NewOrderSingle_Currency_outer msg_data)
    )
;;

let check_field_mod_f_NewOrderSingle_HandlInst_inner0 (msg_data : mod_newordersingle_data)  =
    if (List.mem msg_data.mod_f_NewOrderSingle_HandlInst ((Some MOD_FIX_HandlInst_Automated_execution_order) :: ((Some MOD_FIX_HandlInst_Manual_Order__best_execution) :: []))) then
        fields_are_good
    else
        (field_invalid "Field HandlInst of Message NewOrderSingle violates the constraint: \" it in [ HandlInst.Automated_execution_order, HandlInst.Manual_Order__best_execution ]\"")
;;

let check_field_mod_f_NewOrderSingle_HandlInst_outer (msg_data : mod_newordersingle_data)  =
    let check_field_mod_f_NewOrderSingle_HandlInst_inner0_result = check_field_mod_f_NewOrderSingle_HandlInst_inner0 msg_data in
    if check_field_mod_f_NewOrderSingle_HandlInst_inner0_result.is_invalid then
        check_field_mod_f_NewOrderSingle_HandlInst_inner0_result
    else
        fields_are_good
;;

let check_field_mod_f_NewOrderSingle_HandlInst (msg_data : mod_newordersingle_data)  =
    (match msg_data.mod_f_NewOrderSingle_HandlInst with
        | None -> fields_are_good
        | Some _ -> (check_field_mod_f_NewOrderSingle_HandlInst_outer msg_data)
    )
;;

let check_field_mod_f_NewOrderSingle_Parties_PartyIDsGrp_inner0 (msg_data : mod_newordersingle_data)  =
    if (checkRGConsistency_PartyIDsGrp msg_data.mod_f_NewOrderSingle_Parties_PartyIDsGrp) then
        fields_are_good
    else
        (field_invalid "Field PartyIDsGrp of Message NewOrderSingle violates the constraint: \"Consistency Check for Repeating Group Type PartyIDsGrp.\"")
;;

let check_field_mod_f_NewOrderSingle_Parties_PartyIDsGrp_inner1 (msg_data : mod_newordersingle_data)  =
    if ((&&) ((match msg_data.mod_f_NewOrderSingle_Parties_PartyIDsGrp.rg_PartyIDsGrp_element_4 with
        | Some cap_e_Parties_PartyIDsGrp -> (checkRGConsistency_PartySubIDsGrp cap_e_Parties_PartyIDsGrp.mod_f_PartyIDsGrp_PartySubIDsGrp)
        | None -> true
    )
    ) ((&&) ((match msg_data.mod_f_NewOrderSingle_Parties_PartyIDsGrp.rg_PartyIDsGrp_element_3 with
        | Some cap_e_Parties_PartyIDsGrp -> (checkRGConsistency_PartySubIDsGrp cap_e_Parties_PartyIDsGrp.mod_f_PartyIDsGrp_PartySubIDsGrp)
        | None -> true
    )
    ) ((&&) ((match msg_data.mod_f_NewOrderSingle_Parties_PartyIDsGrp.rg_PartyIDsGrp_element_2 with
        | Some cap_e_Parties_PartyIDsGrp -> (checkRGConsistency_PartySubIDsGrp cap_e_Parties_PartyIDsGrp.mod_f_PartyIDsGrp_PartySubIDsGrp)
        | None -> true
    )
    ) ((&&) ((match msg_data.mod_f_NewOrderSingle_Parties_PartyIDsGrp.rg_PartyIDsGrp_element_1 with
        | Some cap_e_Parties_PartyIDsGrp -> (checkRGConsistency_PartySubIDsGrp cap_e_Parties_PartyIDsGrp.mod_f_PartyIDsGrp_PartySubIDsGrp)
        | None -> true
    )
    ) ((match msg_data.mod_f_NewOrderSingle_Parties_PartyIDsGrp.rg_PartyIDsGrp_element_0 with
        | Some cap_e_Parties_PartyIDsGrp -> (checkRGConsistency_PartySubIDsGrp cap_e_Parties_PartyIDsGrp.mod_f_PartyIDsGrp_PartySubIDsGrp)
        | None -> true
    )
    ))))) then
        fields_are_good
    else
        (field_invalid "Field PartyIDsGrp of Message NewOrderSingle violates the constraint: \"Consistency Check for Repeating Group Type PartySubIDsGrp.\"")
;;

let check_field_mod_f_NewOrderSingle_Parties_PartyIDsGrp_outer (msg_data : mod_newordersingle_data)  =
    let check_field_mod_f_NewOrderSingle_Parties_PartyIDsGrp_inner1_result = check_field_mod_f_NewOrderSingle_Parties_PartyIDsGrp_inner1 msg_data in
    if check_field_mod_f_NewOrderSingle_Parties_PartyIDsGrp_inner1_result.is_invalid then
        check_field_mod_f_NewOrderSingle_Parties_PartyIDsGrp_inner1_result
    else
        let check_field_mod_f_NewOrderSingle_Parties_PartyIDsGrp_inner0_result = check_field_mod_f_NewOrderSingle_Parties_PartyIDsGrp_inner0 msg_data in
        if check_field_mod_f_NewOrderSingle_Parties_PartyIDsGrp_inner0_result.is_invalid then
            check_field_mod_f_NewOrderSingle_Parties_PartyIDsGrp_inner0_result
        else
            fields_are_good
;;

let check_field_mod_f_NewOrderSingle_Parties_PartyIDsGrp (msg_data : mod_newordersingle_data)  =
    check_field_mod_f_NewOrderSingle_Parties_PartyIDsGrp_outer msg_data
;;

let check_field_mod_f_NewOrderSingle_ExecInst_inner0 (msg_data : mod_newordersingle_data)  =
    if (List.mem msg_data.mod_f_NewOrderSingle_ExecInst ((Some MOD_FIX_ExecInst_WORK) :: [])) then
        fields_are_good
    else
        (field_invalid "Field ExecInst of Message NewOrderSingle violates the constraint: \" it in [ ExecInst.WORK ]\"")
;;

let check_field_mod_f_NewOrderSingle_ExecInst_outer (msg_data : mod_newordersingle_data)  =
    let check_field_mod_f_NewOrderSingle_ExecInst_inner0_result = check_field_mod_f_NewOrderSingle_ExecInst_inner0 msg_data in
    if check_field_mod_f_NewOrderSingle_ExecInst_inner0_result.is_invalid then
        check_field_mod_f_NewOrderSingle_ExecInst_inner0_result
    else
        fields_are_good
;;

let check_field_mod_f_NewOrderSingle_ExecInst (msg_data : mod_newordersingle_data)  =
    (match msg_data.mod_f_NewOrderSingle_ExecInst with
        | None -> fields_are_good
        | Some _ -> (check_field_mod_f_NewOrderSingle_ExecInst_outer msg_data)
    )
;;

let check_field_mod_f_NewOrderSingle_SettlType_inner0 (msg_data : mod_newordersingle_data)  =
    if (List.mem msg_data.mod_f_NewOrderSingle_SettlType ((Some MOD_FIX_SettlType_Regular) :: ((Some MOD_FIX_SettlType_Cash) :: ((Some MOD_FIX_SettlType_T_Plus_1__next_day_) :: ((Some MOD_FIX_SettlType_T_Plus_2) :: ((Some MOD_FIX_SettlType_T_Plus_3) :: ((Some MOD_FIX_SettlType_T_Plus_4) :: ((Some MOD_FIX_SettlType_Future) :: ((Some MOD_FIX_SettlType_When_and_if_issued) :: ((Some MOD_FIX_SettlType_Sellers_Option) :: ((Some MOD_FIX_SettlType_T_Plus_5) :: []))))))))))) then
        fields_are_good
    else
        (field_invalid "Field SettlType of Message NewOrderSingle violates the constraint: \" it in [ SettlType.Regular, SettlType.Cash, SettlType.T_Plus_1__next_day_, SettlType.T_Plus_2, SettlType.T_Plus_3, SettlType.T_Plus_4, SettlType.Future, SettlType.When_and_if_issued, SettlType.Sellers_Option, SettlType.T_Plus_5 ]\"")
;;

let check_field_mod_f_NewOrderSingle_SettlType_outer (msg_data : mod_newordersingle_data)  =
    let check_field_mod_f_NewOrderSingle_SettlType_inner0_result = check_field_mod_f_NewOrderSingle_SettlType_inner0 msg_data in
    if check_field_mod_f_NewOrderSingle_SettlType_inner0_result.is_invalid then
        check_field_mod_f_NewOrderSingle_SettlType_inner0_result
    else
        fields_are_good
;;

let check_field_mod_f_NewOrderSingle_SettlType (msg_data : mod_newordersingle_data)  =
    (match msg_data.mod_f_NewOrderSingle_SettlType with
        | None -> fields_are_good
        | Some _ -> (check_field_mod_f_NewOrderSingle_SettlType_outer msg_data)
    )
;;

let check_field_mod_f_NewOrderSingle_OrderCapacity_inner0 (msg_data : mod_newordersingle_data)  =
    if (List.mem msg_data.mod_f_NewOrderSingle_OrderCapacity ((Some MOD_FIX_OrderCapacity_Any_Other_Trading_Capacity__AOTC_) :: ((Some MOD_FIX_OrderCapacity_Own_Account) :: ((Some MOD_FIX_OrderCapacity_Matched_Principal) :: [])))) then
        fields_are_good
    else
        (field_invalid "Field OrderCapacity of Message NewOrderSingle violates the constraint: \" it in [ OrderCapacity.Any_Other_Trading_Capacity__AOTC_, OrderCapacity.Own_Account, OrderCapacity.Matched_Principal ]\"")
;;

let check_field_mod_f_NewOrderSingle_OrderCapacity_outer (msg_data : mod_newordersingle_data)  =
    let check_field_mod_f_NewOrderSingle_OrderCapacity_inner0_result = check_field_mod_f_NewOrderSingle_OrderCapacity_inner0 msg_data in
    if check_field_mod_f_NewOrderSingle_OrderCapacity_inner0_result.is_invalid then
        check_field_mod_f_NewOrderSingle_OrderCapacity_inner0_result
    else
        fields_are_good
;;

let check_field_mod_f_NewOrderSingle_OrderCapacity (msg_data : mod_newordersingle_data)  =
    (match msg_data.mod_f_NewOrderSingle_OrderCapacity with
        | None -> fields_are_good
        | Some _ -> (check_field_mod_f_NewOrderSingle_OrderCapacity_outer msg_data)
    )
;;

let check_field_mod_f_NewOrderSingle_QtyType_inner0 (msg_data : mod_newordersingle_data)  =
    if (List.mem msg_data.mod_f_NewOrderSingle_QtyType ((Some MOD_FIX_QtyType_units__shares__par__currency___Always_interpreted_as_par_by_MarketAxess_) :: ((Some MOD_FIX_QtyType_Contracts) :: []))) then
        fields_are_good
    else
        (field_invalid "Field QtyType of Message NewOrderSingle violates the constraint: \" it in [ QtyType.units__shares__par__currency___Always_interpreted_as_par_by_MarketAxess_, QtyType.Contracts ]\"")
;;

let check_field_mod_f_NewOrderSingle_QtyType_outer (msg_data : mod_newordersingle_data)  =
    let check_field_mod_f_NewOrderSingle_QtyType_inner0_result = check_field_mod_f_NewOrderSingle_QtyType_inner0 msg_data in
    if check_field_mod_f_NewOrderSingle_QtyType_inner0_result.is_invalid then
        check_field_mod_f_NewOrderSingle_QtyType_inner0_result
    else
        fields_are_good
;;

let check_field_mod_f_NewOrderSingle_QtyType (msg_data : mod_newordersingle_data)  =
    (match msg_data.mod_f_NewOrderSingle_QtyType with
        | None -> fields_are_good
        | Some _ -> (check_field_mod_f_NewOrderSingle_QtyType_outer msg_data)
    )
;;

let check_field_mod_f_NewOrderSingle_Instrument_CFICode_inner0 (msg_data : mod_newordersingle_data)  =
    if (good_string msg_data.mod_f_NewOrderSingle_Instrument_CFICode) then
        fields_are_good
    else
        (field_invalid "Field CFICode of Message NewOrderSingle violates the constraint: \"validity constraint.\"")
;;

let check_field_mod_f_NewOrderSingle_Instrument_CFICode_outer (msg_data : mod_newordersingle_data)  =
    let check_field_mod_f_NewOrderSingle_Instrument_CFICode_inner0_result = check_field_mod_f_NewOrderSingle_Instrument_CFICode_inner0 msg_data in
    if check_field_mod_f_NewOrderSingle_Instrument_CFICode_inner0_result.is_invalid then
        check_field_mod_f_NewOrderSingle_Instrument_CFICode_inner0_result
    else
        fields_are_good
;;

let check_field_mod_f_NewOrderSingle_Instrument_CFICode (msg_data : mod_newordersingle_data)  =
    check_field_mod_f_NewOrderSingle_Instrument_CFICode_outer msg_data
;;

let check_field_mod_f_NewOrderSingle_ForexReq_inner0 (msg_data : mod_newordersingle_data)  =
    if (List.mem msg_data.mod_f_NewOrderSingle_ForexReq ((Some MOD_FIX_ForexReq_No) :: ((Some MOD_FIX_ForexReq_Yes) :: []))) then
        fields_are_good
    else
        (field_invalid "Field ForexReq of Message NewOrderSingle violates the constraint: \" it in [ ForexReq.No, ForexReq.Yes ]\"")
;;

let check_field_mod_f_NewOrderSingle_ForexReq_outer (msg_data : mod_newordersingle_data)  =
    let check_field_mod_f_NewOrderSingle_ForexReq_inner0_result = check_field_mod_f_NewOrderSingle_ForexReq_inner0 msg_data in
    if check_field_mod_f_NewOrderSingle_ForexReq_inner0_result.is_invalid then
        check_field_mod_f_NewOrderSingle_ForexReq_inner0_result
    else
        fields_are_good
;;

let check_field_mod_f_NewOrderSingle_ForexReq (msg_data : mod_newordersingle_data)  =
    (match msg_data.mod_f_NewOrderSingle_ForexReq with
        | None -> fields_are_good
        | Some _ -> (check_field_mod_f_NewOrderSingle_ForexReq_outer msg_data)
    )
;;

let check_field_mod_f_NewOrderSingle_SettlCurrency_inner0 (msg_data : mod_newordersingle_data)  =
    if ((match msg_data.mod_f_NewOrderSingle_SettlCurrency with
        | Some cap_string_length_check_var -> (good_string cap_string_length_check_var)
        | None -> true
    )
    ) then
        fields_are_good
    else
        (field_invalid "Field SettlCurrency of Message NewOrderSingle violates the constraint: \"validity constraint.\"")
;;

let check_field_mod_f_NewOrderSingle_SettlCurrency_outer (msg_data : mod_newordersingle_data)  =
    let check_field_mod_f_NewOrderSingle_SettlCurrency_inner0_result = check_field_mod_f_NewOrderSingle_SettlCurrency_inner0 msg_data in
    if check_field_mod_f_NewOrderSingle_SettlCurrency_inner0_result.is_invalid then
        check_field_mod_f_NewOrderSingle_SettlCurrency_inner0_result
    else
        fields_are_good
;;

let check_field_mod_f_NewOrderSingle_SettlCurrency (msg_data : mod_newordersingle_data)  =
    (match msg_data.mod_f_NewOrderSingle_SettlCurrency with
        | None -> fields_are_good
        | Some _ -> (check_field_mod_f_NewOrderSingle_SettlCurrency_outer msg_data)
    )
;;

let check_field_mod_f_NewOrderSingle_IncludeDealers_inner0 (msg_data : mod_newordersingle_data)  =
    if (List.mem msg_data.mod_f_NewOrderSingle_IncludeDealers ((Some MOD_FIX_IncludeDealers_Include_at_Least__Send_to_dealers) :: ((Some MOD_FIX_IncludeDealers_Include_Only_Send_to_only_the_dealers) :: []))) then
        fields_are_good
    else
        (field_invalid "Field IncludeDealers of Message NewOrderSingle violates the constraint: \" it in [ IncludeDealers.Include_at_Least__Send_to_dealers,IncludeDealers.Include_Only_Send_to_only_the_dealers]\"")
;;

let check_field_mod_f_NewOrderSingle_IncludeDealers_outer (msg_data : mod_newordersingle_data)  =
    let check_field_mod_f_NewOrderSingle_IncludeDealers_inner0_result = check_field_mod_f_NewOrderSingle_IncludeDealers_inner0 msg_data in
    if check_field_mod_f_NewOrderSingle_IncludeDealers_inner0_result.is_invalid then
        check_field_mod_f_NewOrderSingle_IncludeDealers_inner0_result
    else
        fields_are_good
;;

let check_field_mod_f_NewOrderSingle_IncludeDealers (msg_data : mod_newordersingle_data)  =
    (match msg_data.mod_f_NewOrderSingle_IncludeDealers with
        | None -> fields_are_good
        | Some _ -> (check_field_mod_f_NewOrderSingle_IncludeDealers_outer msg_data)
    )
;;

let check_field_mod_f_NewOrderSingle_DealersGrp_inner0 (msg_data : mod_newordersingle_data)  =
    if (checkRGConsistency_DealersGrp msg_data.mod_f_NewOrderSingle_DealersGrp) then
        fields_are_good
    else
        (field_invalid "Field DealersGrp of Message NewOrderSingle violates the constraint: \"Consistency Check for Repeating Group Type DealersGrp.\"")
;;

let check_field_mod_f_NewOrderSingle_DealersGrp_outer (msg_data : mod_newordersingle_data)  =
    let check_field_mod_f_NewOrderSingle_DealersGrp_inner0_result = check_field_mod_f_NewOrderSingle_DealersGrp_inner0 msg_data in
    if check_field_mod_f_NewOrderSingle_DealersGrp_inner0_result.is_invalid then
        check_field_mod_f_NewOrderSingle_DealersGrp_inner0_result
    else
        fields_are_good
;;

let check_field_mod_f_NewOrderSingle_DealersGrp (msg_data : mod_newordersingle_data)  =
    check_field_mod_f_NewOrderSingle_DealersGrp_outer msg_data
;;

let check_field_mod_f_NewOrderSingle_TradingProtocol_inner0 (msg_data : mod_newordersingle_data)  =
    if (List.mem msg_data.mod_f_NewOrderSingle_TradingProtocol ((Some MOD_FIX_TradingProtocol_DM) :: ((Some MOD_FIX_TradingProtocol_EU_Price) :: ((Some MOD_FIX_TradingProtocol_LMPrice) :: ((Some MOD_FIX_TradingProtocol_Price) :: ((Some MOD_FIX_TradingProtocol_Spread) :: ((Some MOD_FIX_TradingProtocol_USDPrice) :: ((Some MOD_FIX_TradingProtocol_Yield) :: [])))))))) then
        fields_are_good
    else
        (field_invalid "Field TradingProtocol of Message NewOrderSingle violates the constraint: \" it in [ TradingProtocol.DM, TradingProtocol.EU_Price, TradingProtocol.LMPrice, TradingProtocol.Price, TradingProtocol.Spread, TradingProtocol.USDPrice, TradingProtocol.Yield ]\"")
;;

let check_field_mod_f_NewOrderSingle_TradingProtocol_outer (msg_data : mod_newordersingle_data)  =
    let check_field_mod_f_NewOrderSingle_TradingProtocol_inner0_result = check_field_mod_f_NewOrderSingle_TradingProtocol_inner0 msg_data in
    if check_field_mod_f_NewOrderSingle_TradingProtocol_inner0_result.is_invalid then
        check_field_mod_f_NewOrderSingle_TradingProtocol_inner0_result
    else
        fields_are_good
;;

let check_field_mod_f_NewOrderSingle_TradingProtocol (msg_data : mod_newordersingle_data)  =
    (match msg_data.mod_f_NewOrderSingle_TradingProtocol with
        | None -> fields_are_good
        | Some _ -> (check_field_mod_f_NewOrderSingle_TradingProtocol_outer msg_data)
    )
;;

let check_field_mod_f_NewOrderSingle_MKTXPricingProcess_inner0 (msg_data : mod_newordersingle_data)  =
    if (List.mem msg_data.mod_f_NewOrderSingle_MKTXPricingProcess ((Some MOD_FIX_MKTXPricingProcess_Manual) :: ((Some MOD_FIX_MKTXPricingProcess_Phone_Spot) :: ((Some MOD_FIX_MKTXPricingProcess_Auto) :: ((Some MOD_FIX_MKTXPricingProcess_OneStep) :: ((Some MOD_FIX_MKTXPricingProcess_Standard) :: ((Some MOD_FIX_MKTXPricingProcess_Delayed_Spot) :: []))))))) then
        fields_are_good
    else
        (field_invalid "Field MKTXPricingProcess of Message NewOrderSingle violates the constraint: \" it in [ MKTXPricingProcess.Manual, MKTXPricingProcess.Phone_Spot, MKTXPricingProcess.Auto, MKTXPricingProcess.OneStep, MKTXPricingProcess.Standard, MKTXPricingProcess.Delayed_Spot ]\"")
;;

let check_field_mod_f_NewOrderSingle_MKTXPricingProcess_outer (msg_data : mod_newordersingle_data)  =
    let check_field_mod_f_NewOrderSingle_MKTXPricingProcess_inner0_result = check_field_mod_f_NewOrderSingle_MKTXPricingProcess_inner0 msg_data in
    if check_field_mod_f_NewOrderSingle_MKTXPricingProcess_inner0_result.is_invalid then
        check_field_mod_f_NewOrderSingle_MKTXPricingProcess_inner0_result
    else
        fields_are_good
;;

let check_field_mod_f_NewOrderSingle_MKTXPricingProcess (msg_data : mod_newordersingle_data)  =
    (match msg_data.mod_f_NewOrderSingle_MKTXPricingProcess with
        | None -> fields_are_good
        | Some _ -> (check_field_mod_f_NewOrderSingle_MKTXPricingProcess_outer msg_data)
    )
;;

let check_field_mod_f_NewOrderSingle_MKTXRTSPurpose_inner0 (msg_data : mod_newordersingle_data)  =
    if (List.mem msg_data.mod_f_NewOrderSingle_MKTXRTSPurpose ((Some MOD_FIX_MKTXRTSPurpose_FundCrossing) :: [])) then
        fields_are_good
    else
        (field_invalid "Field MKTXRTSPurpose of Message NewOrderSingle violates the constraint: \" it in [ MKTXRTSPurpose.FundCrossing ]\"")
;;

let check_field_mod_f_NewOrderSingle_MKTXRTSPurpose_outer (msg_data : mod_newordersingle_data)  =
    let check_field_mod_f_NewOrderSingle_MKTXRTSPurpose_inner0_result = check_field_mod_f_NewOrderSingle_MKTXRTSPurpose_inner0 msg_data in
    if check_field_mod_f_NewOrderSingle_MKTXRTSPurpose_inner0_result.is_invalid then
        check_field_mod_f_NewOrderSingle_MKTXRTSPurpose_inner0_result
    else
        fields_are_good
;;

let check_field_mod_f_NewOrderSingle_MKTXRTSPurpose (msg_data : mod_newordersingle_data)  =
    (match msg_data.mod_f_NewOrderSingle_MKTXRTSPurpose with
        | None -> fields_are_good
        | Some _ -> (check_field_mod_f_NewOrderSingle_MKTXRTSPurpose_outer msg_data)
    )
;;

let check_field_mod_f_NewOrderSingle_PriceType_inner0 (msg_data : mod_newordersingle_data)  =
    if (List.mem msg_data.mod_f_NewOrderSingle_PriceType ((Some MOD_FIX_PriceType_Percentage) :: ((Some MOD_FIX_PriceType_Spread) :: ((Some MOD_FIX_PriceType_Yield) :: ((Some MOD_FIX_PriceType_NEGATIVE_YIELD) :: ((Some MOD_FIX_PriceType_DECIMAL_UNIT_PRICE) :: [])))))) then
        fields_are_good
    else
        (field_invalid "Field PriceType of Message NewOrderSingle violates the constraint: \" it in [ PriceType.Percentage, PriceType.Spread, PriceType.Yield, PriceType.NEGATIVE_YIELD, PriceType.DECIMAL_UNIT_PRICE ]\"")
;;

let check_field_mod_f_NewOrderSingle_PriceType_outer (msg_data : mod_newordersingle_data)  =
    let check_field_mod_f_NewOrderSingle_PriceType_inner0_result = check_field_mod_f_NewOrderSingle_PriceType_inner0 msg_data in
    if check_field_mod_f_NewOrderSingle_PriceType_inner0_result.is_invalid then
        check_field_mod_f_NewOrderSingle_PriceType_inner0_result
    else
        fields_are_good
;;

let check_field_mod_f_NewOrderSingle_PriceType (msg_data : mod_newordersingle_data)  =
    (match msg_data.mod_f_NewOrderSingle_PriceType with
        | None -> fields_are_good
        | Some _ -> (check_field_mod_f_NewOrderSingle_PriceType_outer msg_data)
    )
;;

let check_field_mod_f_NewOrderSingle_Text_inner0 (msg_data : mod_newordersingle_data)  =
    if ((match msg_data.mod_f_NewOrderSingle_Text with
        | Some cap_string_length_check_var -> (good_string cap_string_length_check_var)
        | None -> true
    )
    ) then
        fields_are_good
    else
        (field_invalid "Field Text of Message NewOrderSingle violates the constraint: \"validity constraint.\"")
;;

let check_field_mod_f_NewOrderSingle_Text_outer (msg_data : mod_newordersingle_data)  =
    let check_field_mod_f_NewOrderSingle_Text_inner0_result = check_field_mod_f_NewOrderSingle_Text_inner0 msg_data in
    if check_field_mod_f_NewOrderSingle_Text_inner0_result.is_invalid then
        check_field_mod_f_NewOrderSingle_Text_inner0_result
    else
        fields_are_good
;;

let check_field_mod_f_NewOrderSingle_Text (msg_data : mod_newordersingle_data)  =
    (match msg_data.mod_f_NewOrderSingle_Text with
        | None -> fields_are_good
        | Some _ -> (check_field_mod_f_NewOrderSingle_Text_outer msg_data)
    )
;;

let check_field_mod_f_NewOrderSingle_AllocID_inner0 (msg_data : mod_newordersingle_data)  =
    if ((match msg_data.mod_f_NewOrderSingle_AllocID with
        | Some cap_string_length_check_var -> (good_string cap_string_length_check_var)
        | None -> true
    )
    ) then
        fields_are_good
    else
        (field_invalid "Field AllocID of Message NewOrderSingle violates the constraint: \"validity constraint.\"")
;;

let check_field_mod_f_NewOrderSingle_AllocID_outer (msg_data : mod_newordersingle_data)  =
    let check_field_mod_f_NewOrderSingle_AllocID_inner0_result = check_field_mod_f_NewOrderSingle_AllocID_inner0 msg_data in
    if check_field_mod_f_NewOrderSingle_AllocID_inner0_result.is_invalid then
        check_field_mod_f_NewOrderSingle_AllocID_inner0_result
    else
        fields_are_good
;;

let check_field_mod_f_NewOrderSingle_AllocID (msg_data : mod_newordersingle_data)  =
    (match msg_data.mod_f_NewOrderSingle_AllocID with
        | None -> fields_are_good
        | Some _ -> (check_field_mod_f_NewOrderSingle_AllocID_outer msg_data)
    )
;;

let check_field_mod_f_NewOrderSingle_AllocsGrp_inner0 (msg_data : mod_newordersingle_data)  =
    if (checkRGConsistency_AllocsGrp msg_data.mod_f_NewOrderSingle_AllocsGrp) then
        fields_are_good
    else
        (field_invalid "Field AllocsGrp of Message NewOrderSingle violates the constraint: \"Consistency Check for Repeating Group Type AllocsGrp.\"")
;;

let check_field_mod_f_NewOrderSingle_AllocsGrp_outer (msg_data : mod_newordersingle_data)  =
    let check_field_mod_f_NewOrderSingle_AllocsGrp_inner0_result = check_field_mod_f_NewOrderSingle_AllocsGrp_inner0 msg_data in
    if check_field_mod_f_NewOrderSingle_AllocsGrp_inner0_result.is_invalid then
        check_field_mod_f_NewOrderSingle_AllocsGrp_inner0_result
    else
        fields_are_good
;;

let check_field_mod_f_NewOrderSingle_AllocsGrp (msg_data : mod_newordersingle_data)  =
    check_field_mod_f_NewOrderSingle_AllocsGrp_outer msg_data
;;

let check_fields_NewOrderSingle (msg_data : mod_newordersingle_data) (m_state : model_state)  =
    let mod_f_NewOrderSingle_AllocsGrp_result = check_field_mod_f_NewOrderSingle_AllocsGrp msg_data in
    if mod_f_NewOrderSingle_AllocsGrp_result.is_invalid then
        mod_f_NewOrderSingle_AllocsGrp_result
    else
        let mod_f_NewOrderSingle_AllocID_result = check_field_mod_f_NewOrderSingle_AllocID msg_data in
        if mod_f_NewOrderSingle_AllocID_result.is_invalid then
            mod_f_NewOrderSingle_AllocID_result
        else
            let mod_f_NewOrderSingle_Text_result = check_field_mod_f_NewOrderSingle_Text msg_data in
            if mod_f_NewOrderSingle_Text_result.is_invalid then
                mod_f_NewOrderSingle_Text_result
            else
                let mod_f_NewOrderSingle_PriceType_result = check_field_mod_f_NewOrderSingle_PriceType msg_data in
                if mod_f_NewOrderSingle_PriceType_result.is_invalid then
                    mod_f_NewOrderSingle_PriceType_result
                else
                    let mod_f_NewOrderSingle_MKTXRTSPurpose_result = check_field_mod_f_NewOrderSingle_MKTXRTSPurpose msg_data in
                    if mod_f_NewOrderSingle_MKTXRTSPurpose_result.is_invalid then
                        mod_f_NewOrderSingle_MKTXRTSPurpose_result
                    else
                        let mod_f_NewOrderSingle_MKTXPricingProcess_result = check_field_mod_f_NewOrderSingle_MKTXPricingProcess msg_data in
                        if mod_f_NewOrderSingle_MKTXPricingProcess_result.is_invalid then
                            mod_f_NewOrderSingle_MKTXPricingProcess_result
                        else
                            let mod_f_NewOrderSingle_TradingProtocol_result = check_field_mod_f_NewOrderSingle_TradingProtocol msg_data in
                            if mod_f_NewOrderSingle_TradingProtocol_result.is_invalid then
                                mod_f_NewOrderSingle_TradingProtocol_result
                            else
                                let mod_f_NewOrderSingle_DealersGrp_result = check_field_mod_f_NewOrderSingle_DealersGrp msg_data in
                                if mod_f_NewOrderSingle_DealersGrp_result.is_invalid then
                                    mod_f_NewOrderSingle_DealersGrp_result
                                else
                                    let mod_f_NewOrderSingle_IncludeDealers_result = check_field_mod_f_NewOrderSingle_IncludeDealers msg_data in
                                    if mod_f_NewOrderSingle_IncludeDealers_result.is_invalid then
                                        mod_f_NewOrderSingle_IncludeDealers_result
                                    else
                                        let mod_f_NewOrderSingle_SettlCurrency_result = check_field_mod_f_NewOrderSingle_SettlCurrency msg_data in
                                        if mod_f_NewOrderSingle_SettlCurrency_result.is_invalid then
                                            mod_f_NewOrderSingle_SettlCurrency_result
                                        else
                                            let mod_f_NewOrderSingle_ForexReq_result = check_field_mod_f_NewOrderSingle_ForexReq msg_data in
                                            if mod_f_NewOrderSingle_ForexReq_result.is_invalid then
                                                mod_f_NewOrderSingle_ForexReq_result
                                            else
                                                let mod_f_NewOrderSingle_Instrument_CFICode_result = check_field_mod_f_NewOrderSingle_Instrument_CFICode msg_data in
                                                if mod_f_NewOrderSingle_Instrument_CFICode_result.is_invalid then
                                                    mod_f_NewOrderSingle_Instrument_CFICode_result
                                                else
                                                    let mod_f_NewOrderSingle_QtyType_result = check_field_mod_f_NewOrderSingle_QtyType msg_data in
                                                    if mod_f_NewOrderSingle_QtyType_result.is_invalid then
                                                        mod_f_NewOrderSingle_QtyType_result
                                                    else
                                                        let mod_f_NewOrderSingle_OrderCapacity_result = check_field_mod_f_NewOrderSingle_OrderCapacity msg_data in
                                                        if mod_f_NewOrderSingle_OrderCapacity_result.is_invalid then
                                                            mod_f_NewOrderSingle_OrderCapacity_result
                                                        else
                                                            let mod_f_NewOrderSingle_SettlType_result = check_field_mod_f_NewOrderSingle_SettlType msg_data in
                                                            if mod_f_NewOrderSingle_SettlType_result.is_invalid then
                                                                mod_f_NewOrderSingle_SettlType_result
                                                            else
                                                                let mod_f_NewOrderSingle_ExecInst_result = check_field_mod_f_NewOrderSingle_ExecInst msg_data in
                                                                if mod_f_NewOrderSingle_ExecInst_result.is_invalid then
                                                                    mod_f_NewOrderSingle_ExecInst_result
                                                                else
                                                                    let mod_f_NewOrderSingle_Parties_PartyIDsGrp_result = check_field_mod_f_NewOrderSingle_Parties_PartyIDsGrp msg_data in
                                                                    if mod_f_NewOrderSingle_Parties_PartyIDsGrp_result.is_invalid then
                                                                        mod_f_NewOrderSingle_Parties_PartyIDsGrp_result
                                                                    else
                                                                        let mod_f_NewOrderSingle_HandlInst_result = check_field_mod_f_NewOrderSingle_HandlInst msg_data in
                                                                        if mod_f_NewOrderSingle_HandlInst_result.is_invalid then
                                                                            mod_f_NewOrderSingle_HandlInst_result
                                                                        else
                                                                            let mod_f_NewOrderSingle_Currency_result = check_field_mod_f_NewOrderSingle_Currency msg_data in
                                                                            if mod_f_NewOrderSingle_Currency_result.is_invalid then
                                                                                mod_f_NewOrderSingle_Currency_result
                                                                            else
                                                                                let mod_f_NewOrderSingle_ClOrdID_result = check_field_mod_f_NewOrderSingle_ClOrdID msg_data in
                                                                                if mod_f_NewOrderSingle_ClOrdID_result.is_invalid then
                                                                                    mod_f_NewOrderSingle_ClOrdID_result
                                                                                else
                                                                                    fields_are_good
;;

let check_field_mod_f_OrderCancel_OrigClOrdID_inner0 (msg_data : mod_ordercancel_data)  =
    if (good_string msg_data.mod_f_OrderCancel_OrigClOrdID) then
        fields_are_good
    else
        (field_invalid "Field OrigClOrdID of Message OrderCancel violates the constraint: \"validity constraint.\"")
;;

let check_field_mod_f_OrderCancel_OrigClOrdID_outer (msg_data : mod_ordercancel_data)  =
    let check_field_mod_f_OrderCancel_OrigClOrdID_inner0_result = check_field_mod_f_OrderCancel_OrigClOrdID_inner0 msg_data in
    if check_field_mod_f_OrderCancel_OrigClOrdID_inner0_result.is_invalid then
        check_field_mod_f_OrderCancel_OrigClOrdID_inner0_result
    else
        fields_are_good
;;

let check_field_mod_f_OrderCancel_OrigClOrdID (msg_data : mod_ordercancel_data)  =
    check_field_mod_f_OrderCancel_OrigClOrdID_outer msg_data
;;

let check_field_mod_f_OrderCancel_ClOrdID_inner0 (msg_data : mod_ordercancel_data)  =
    if (good_string msg_data.mod_f_OrderCancel_ClOrdID) then
        fields_are_good
    else
        (field_invalid "Field ClOrdID of Message OrderCancel violates the constraint: \"validity constraint.\"")
;;

let check_field_mod_f_OrderCancel_ClOrdID_outer (msg_data : mod_ordercancel_data)  =
    let check_field_mod_f_OrderCancel_ClOrdID_inner0_result = check_field_mod_f_OrderCancel_ClOrdID_inner0 msg_data in
    if check_field_mod_f_OrderCancel_ClOrdID_inner0_result.is_invalid then
        check_field_mod_f_OrderCancel_ClOrdID_inner0_result
    else
        fields_are_good
;;

let check_field_mod_f_OrderCancel_ClOrdID (msg_data : mod_ordercancel_data)  =
    check_field_mod_f_OrderCancel_ClOrdID_outer msg_data
;;

let check_field_mod_f_OrderCancel_Parties_PartyIDsGrp_inner0 (msg_data : mod_ordercancel_data)  =
    if (checkRGConsistency_PartyIDsGrp msg_data.mod_f_OrderCancel_Parties_PartyIDsGrp) then
        fields_are_good
    else
        (field_invalid "Field PartyIDsGrp of Message OrderCancel violates the constraint: \"Consistency Check for Repeating Group Type PartyIDsGrp.\"")
;;

let check_field_mod_f_OrderCancel_Parties_PartyIDsGrp_inner1 (msg_data : mod_ordercancel_data)  =
    if ((&&) ((match msg_data.mod_f_OrderCancel_Parties_PartyIDsGrp.rg_PartyIDsGrp_element_4 with
        | Some cap_e_Parties_PartyIDsGrp -> (checkRGConsistency_PartySubIDsGrp cap_e_Parties_PartyIDsGrp.mod_f_PartyIDsGrp_PartySubIDsGrp)
        | None -> true
    )
    ) ((&&) ((match msg_data.mod_f_OrderCancel_Parties_PartyIDsGrp.rg_PartyIDsGrp_element_3 with
        | Some cap_e_Parties_PartyIDsGrp -> (checkRGConsistency_PartySubIDsGrp cap_e_Parties_PartyIDsGrp.mod_f_PartyIDsGrp_PartySubIDsGrp)
        | None -> true
    )
    ) ((&&) ((match msg_data.mod_f_OrderCancel_Parties_PartyIDsGrp.rg_PartyIDsGrp_element_2 with
        | Some cap_e_Parties_PartyIDsGrp -> (checkRGConsistency_PartySubIDsGrp cap_e_Parties_PartyIDsGrp.mod_f_PartyIDsGrp_PartySubIDsGrp)
        | None -> true
    )
    ) ((&&) ((match msg_data.mod_f_OrderCancel_Parties_PartyIDsGrp.rg_PartyIDsGrp_element_1 with
        | Some cap_e_Parties_PartyIDsGrp -> (checkRGConsistency_PartySubIDsGrp cap_e_Parties_PartyIDsGrp.mod_f_PartyIDsGrp_PartySubIDsGrp)
        | None -> true
    )
    ) ((match msg_data.mod_f_OrderCancel_Parties_PartyIDsGrp.rg_PartyIDsGrp_element_0 with
        | Some cap_e_Parties_PartyIDsGrp -> (checkRGConsistency_PartySubIDsGrp cap_e_Parties_PartyIDsGrp.mod_f_PartyIDsGrp_PartySubIDsGrp)
        | None -> true
    )
    ))))) then
        fields_are_good
    else
        (field_invalid "Field PartyIDsGrp of Message OrderCancel violates the constraint: \"Consistency Check for Repeating Group Type PartySubIDsGrp.\"")
;;

let check_field_mod_f_OrderCancel_Parties_PartyIDsGrp_outer (msg_data : mod_ordercancel_data)  =
    let check_field_mod_f_OrderCancel_Parties_PartyIDsGrp_inner1_result = check_field_mod_f_OrderCancel_Parties_PartyIDsGrp_inner1 msg_data in
    if check_field_mod_f_OrderCancel_Parties_PartyIDsGrp_inner1_result.is_invalid then
        check_field_mod_f_OrderCancel_Parties_PartyIDsGrp_inner1_result
    else
        let check_field_mod_f_OrderCancel_Parties_PartyIDsGrp_inner0_result = check_field_mod_f_OrderCancel_Parties_PartyIDsGrp_inner0 msg_data in
        if check_field_mod_f_OrderCancel_Parties_PartyIDsGrp_inner0_result.is_invalid then
            check_field_mod_f_OrderCancel_Parties_PartyIDsGrp_inner0_result
        else
            fields_are_good
;;

let check_field_mod_f_OrderCancel_Parties_PartyIDsGrp (msg_data : mod_ordercancel_data)  =
    check_field_mod_f_OrderCancel_Parties_PartyIDsGrp_outer msg_data
;;

let check_field_mod_f_OrderCancel_Symbol_inner0 (msg_data : mod_ordercancel_data)  =
    if (good_string msg_data.mod_f_OrderCancel_Symbol) then
        fields_are_good
    else
        (field_invalid "Field Symbol of Message OrderCancel violates the constraint: \"validity constraint.\"")
;;

let check_field_mod_f_OrderCancel_Symbol_outer (msg_data : mod_ordercancel_data)  =
    let check_field_mod_f_OrderCancel_Symbol_inner0_result = check_field_mod_f_OrderCancel_Symbol_inner0 msg_data in
    if check_field_mod_f_OrderCancel_Symbol_inner0_result.is_invalid then
        check_field_mod_f_OrderCancel_Symbol_inner0_result
    else
        fields_are_good
;;

let check_field_mod_f_OrderCancel_Symbol (msg_data : mod_ordercancel_data)  =
    check_field_mod_f_OrderCancel_Symbol_outer msg_data
;;

let check_fields_OrderCancel (msg_data : mod_ordercancel_data) (m_state : model_state)  =
    let mod_f_OrderCancel_Symbol_result = check_field_mod_f_OrderCancel_Symbol msg_data in
    if mod_f_OrderCancel_Symbol_result.is_invalid then
        mod_f_OrderCancel_Symbol_result
    else
        let mod_f_OrderCancel_Parties_PartyIDsGrp_result = check_field_mod_f_OrderCancel_Parties_PartyIDsGrp msg_data in
        if mod_f_OrderCancel_Parties_PartyIDsGrp_result.is_invalid then
            mod_f_OrderCancel_Parties_PartyIDsGrp_result
        else
            let mod_f_OrderCancel_ClOrdID_result = check_field_mod_f_OrderCancel_ClOrdID msg_data in
            if mod_f_OrderCancel_ClOrdID_result.is_invalid then
                mod_f_OrderCancel_ClOrdID_result
            else
                let mod_f_OrderCancel_OrigClOrdID_result = check_field_mod_f_OrderCancel_OrigClOrdID msg_data in
                if mod_f_OrderCancel_OrigClOrdID_result.is_invalid then
                    mod_f_OrderCancel_OrigClOrdID_result
                else
                    fields_are_good
;;

let check_field_mod_f_NewOrder_Multi_Leg_ClOrdID_inner0 (msg_data : mod_neworder_multi_leg_data)  =
    if (good_string msg_data.mod_f_NewOrder_Multi_Leg_ClOrdID) then
        fields_are_good
    else
        (field_invalid "Field ClOrdID of Message NewOrder_Multi_Leg violates the constraint: \"validity constraint.\"")
;;

let check_field_mod_f_NewOrder_Multi_Leg_ClOrdID_outer (msg_data : mod_neworder_multi_leg_data)  =
    let check_field_mod_f_NewOrder_Multi_Leg_ClOrdID_inner0_result = check_field_mod_f_NewOrder_Multi_Leg_ClOrdID_inner0 msg_data in
    if check_field_mod_f_NewOrder_Multi_Leg_ClOrdID_inner0_result.is_invalid then
        check_field_mod_f_NewOrder_Multi_Leg_ClOrdID_inner0_result
    else
        fields_are_good
;;

let check_field_mod_f_NewOrder_Multi_Leg_ClOrdID (msg_data : mod_neworder_multi_leg_data)  =
    check_field_mod_f_NewOrder_Multi_Leg_ClOrdID_outer msg_data
;;

let check_field_mod_f_NewOrder_Multi_Leg_Parties_PartyIDsGrp_inner0 (msg_data : mod_neworder_multi_leg_data)  =
    if (checkRGConsistency_PartyIDsGrp msg_data.mod_f_NewOrder_Multi_Leg_Parties_PartyIDsGrp) then
        fields_are_good
    else
        (field_invalid "Field PartyIDsGrp of Message NewOrder_Multi_Leg violates the constraint: \"Consistency Check for Repeating Group Type PartyIDsGrp.\"")
;;

let check_field_mod_f_NewOrder_Multi_Leg_Parties_PartyIDsGrp_inner1 (msg_data : mod_neworder_multi_leg_data)  =
    if ((&&) ((match msg_data.mod_f_NewOrder_Multi_Leg_Parties_PartyIDsGrp.rg_PartyIDsGrp_element_4 with
        | Some cap_e_Parties_PartyIDsGrp -> (checkRGConsistency_PartySubIDsGrp cap_e_Parties_PartyIDsGrp.mod_f_PartyIDsGrp_PartySubIDsGrp)
        | None -> true
    )
    ) ((&&) ((match msg_data.mod_f_NewOrder_Multi_Leg_Parties_PartyIDsGrp.rg_PartyIDsGrp_element_3 with
        | Some cap_e_Parties_PartyIDsGrp -> (checkRGConsistency_PartySubIDsGrp cap_e_Parties_PartyIDsGrp.mod_f_PartyIDsGrp_PartySubIDsGrp)
        | None -> true
    )
    ) ((&&) ((match msg_data.mod_f_NewOrder_Multi_Leg_Parties_PartyIDsGrp.rg_PartyIDsGrp_element_2 with
        | Some cap_e_Parties_PartyIDsGrp -> (checkRGConsistency_PartySubIDsGrp cap_e_Parties_PartyIDsGrp.mod_f_PartyIDsGrp_PartySubIDsGrp)
        | None -> true
    )
    ) ((&&) ((match msg_data.mod_f_NewOrder_Multi_Leg_Parties_PartyIDsGrp.rg_PartyIDsGrp_element_1 with
        | Some cap_e_Parties_PartyIDsGrp -> (checkRGConsistency_PartySubIDsGrp cap_e_Parties_PartyIDsGrp.mod_f_PartyIDsGrp_PartySubIDsGrp)
        | None -> true
    )
    ) ((match msg_data.mod_f_NewOrder_Multi_Leg_Parties_PartyIDsGrp.rg_PartyIDsGrp_element_0 with
        | Some cap_e_Parties_PartyIDsGrp -> (checkRGConsistency_PartySubIDsGrp cap_e_Parties_PartyIDsGrp.mod_f_PartyIDsGrp_PartySubIDsGrp)
        | None -> true
    )
    ))))) then
        fields_are_good
    else
        (field_invalid "Field PartyIDsGrp of Message NewOrder_Multi_Leg violates the constraint: \"Consistency Check for Repeating Group Type PartySubIDsGrp.\"")
;;

let check_field_mod_f_NewOrder_Multi_Leg_Parties_PartyIDsGrp_outer (msg_data : mod_neworder_multi_leg_data)  =
    let check_field_mod_f_NewOrder_Multi_Leg_Parties_PartyIDsGrp_inner1_result = check_field_mod_f_NewOrder_Multi_Leg_Parties_PartyIDsGrp_inner1 msg_data in
    if check_field_mod_f_NewOrder_Multi_Leg_Parties_PartyIDsGrp_inner1_result.is_invalid then
        check_field_mod_f_NewOrder_Multi_Leg_Parties_PartyIDsGrp_inner1_result
    else
        let check_field_mod_f_NewOrder_Multi_Leg_Parties_PartyIDsGrp_inner0_result = check_field_mod_f_NewOrder_Multi_Leg_Parties_PartyIDsGrp_inner0 msg_data in
        if check_field_mod_f_NewOrder_Multi_Leg_Parties_PartyIDsGrp_inner0_result.is_invalid then
            check_field_mod_f_NewOrder_Multi_Leg_Parties_PartyIDsGrp_inner0_result
        else
            fields_are_good
;;

let check_field_mod_f_NewOrder_Multi_Leg_Parties_PartyIDsGrp (msg_data : mod_neworder_multi_leg_data)  =
    check_field_mod_f_NewOrder_Multi_Leg_Parties_PartyIDsGrp_outer msg_data
;;

let check_field_mod_f_NewOrder_Multi_Leg_Instrument_CFICode_inner0 (msg_data : mod_neworder_multi_leg_data)  =
    if (good_string msg_data.mod_f_NewOrder_Multi_Leg_Instrument_CFICode) then
        fields_are_good
    else
        (field_invalid "Field CFICode of Message NewOrder_Multi_Leg violates the constraint: \"validity constraint.\"")
;;

let check_field_mod_f_NewOrder_Multi_Leg_Instrument_CFICode_outer (msg_data : mod_neworder_multi_leg_data)  =
    let check_field_mod_f_NewOrder_Multi_Leg_Instrument_CFICode_inner0_result = check_field_mod_f_NewOrder_Multi_Leg_Instrument_CFICode_inner0 msg_data in
    if check_field_mod_f_NewOrder_Multi_Leg_Instrument_CFICode_inner0_result.is_invalid then
        check_field_mod_f_NewOrder_Multi_Leg_Instrument_CFICode_inner0_result
    else
        fields_are_good
;;

let check_field_mod_f_NewOrder_Multi_Leg_Instrument_CFICode (msg_data : mod_neworder_multi_leg_data)  =
    check_field_mod_f_NewOrder_Multi_Leg_Instrument_CFICode_outer msg_data
;;

let check_field_mod_f_NewOrder_Multi_Leg_OrderCapacity_inner0 (msg_data : mod_neworder_multi_leg_data)  =
    if (List.mem msg_data.mod_f_NewOrder_Multi_Leg_OrderCapacity ((Some MOD_FIX_OrderCapacity_Any_Other_Trading_Capacity__AOTC_) :: ((Some MOD_FIX_OrderCapacity_Own_Account) :: ((Some MOD_FIX_OrderCapacity_Matched_Principal) :: [])))) then
        fields_are_good
    else
        (field_invalid "Field OrderCapacity of Message NewOrder_Multi_Leg violates the constraint: \" it in [ OrderCapacity.Any_Other_Trading_Capacity__AOTC_, OrderCapacity.Own_Account, OrderCapacity.Matched_Principal ]\"")
;;

let check_field_mod_f_NewOrder_Multi_Leg_OrderCapacity_outer (msg_data : mod_neworder_multi_leg_data)  =
    let check_field_mod_f_NewOrder_Multi_Leg_OrderCapacity_inner0_result = check_field_mod_f_NewOrder_Multi_Leg_OrderCapacity_inner0 msg_data in
    if check_field_mod_f_NewOrder_Multi_Leg_OrderCapacity_inner0_result.is_invalid then
        check_field_mod_f_NewOrder_Multi_Leg_OrderCapacity_inner0_result
    else
        fields_are_good
;;

let check_field_mod_f_NewOrder_Multi_Leg_OrderCapacity (msg_data : mod_neworder_multi_leg_data)  =
    (match msg_data.mod_f_NewOrder_Multi_Leg_OrderCapacity with
        | None -> fields_are_good
        | Some _ -> (check_field_mod_f_NewOrder_Multi_Leg_OrderCapacity_outer msg_data)
    )
;;

let check_field_mod_f_NewOrder_Multi_Leg_LegsGrp_inner0 (msg_data : mod_neworder_multi_leg_data)  =
    if (checkRGConsistency_LegsGrp msg_data.mod_f_NewOrder_Multi_Leg_LegsGrp) then
        fields_are_good
    else
        (field_invalid "Field LegsGrp of Message NewOrder_Multi_Leg violates the constraint: \"Consistency Check for Repeating Group Type LegsGrp.\"")
;;

let check_field_mod_f_NewOrder_Multi_Leg_LegsGrp_outer (msg_data : mod_neworder_multi_leg_data)  =
    let check_field_mod_f_NewOrder_Multi_Leg_LegsGrp_inner0_result = check_field_mod_f_NewOrder_Multi_Leg_LegsGrp_inner0 msg_data in
    if check_field_mod_f_NewOrder_Multi_Leg_LegsGrp_inner0_result.is_invalid then
        check_field_mod_f_NewOrder_Multi_Leg_LegsGrp_inner0_result
    else
        fields_are_good
;;

let check_field_mod_f_NewOrder_Multi_Leg_LegsGrp (msg_data : mod_neworder_multi_leg_data)  =
    check_field_mod_f_NewOrder_Multi_Leg_LegsGrp_outer msg_data
;;

let check_field_mod_f_NewOrder_Multi_Leg_QtyType_inner0 (msg_data : mod_neworder_multi_leg_data)  =
    if (List.mem msg_data.mod_f_NewOrder_Multi_Leg_QtyType ((Some MOD_FIX_QtyType_units__shares__par__currency___Always_interpreted_as_par_by_MarketAxess_) :: ((Some MOD_FIX_QtyType_Contracts) :: []))) then
        fields_are_good
    else
        (field_invalid "Field QtyType of Message NewOrder_Multi_Leg violates the constraint: \" it in [ QtyType.units__shares__par__currency___Always_interpreted_as_par_by_MarketAxess_, QtyType.Contracts ]\"")
;;

let check_field_mod_f_NewOrder_Multi_Leg_QtyType_outer (msg_data : mod_neworder_multi_leg_data)  =
    let check_field_mod_f_NewOrder_Multi_Leg_QtyType_inner0_result = check_field_mod_f_NewOrder_Multi_Leg_QtyType_inner0 msg_data in
    if check_field_mod_f_NewOrder_Multi_Leg_QtyType_inner0_result.is_invalid then
        check_field_mod_f_NewOrder_Multi_Leg_QtyType_inner0_result
    else
        fields_are_good
;;

let check_field_mod_f_NewOrder_Multi_Leg_QtyType (msg_data : mod_neworder_multi_leg_data)  =
    (match msg_data.mod_f_NewOrder_Multi_Leg_QtyType with
        | None -> fields_are_good
        | Some _ -> (check_field_mod_f_NewOrder_Multi_Leg_QtyType_outer msg_data)
    )
;;

let check_field_mod_f_NewOrder_Multi_Leg_Text_inner0 (msg_data : mod_neworder_multi_leg_data)  =
    if ((match msg_data.mod_f_NewOrder_Multi_Leg_Text with
        | Some cap_string_length_check_var -> (good_string cap_string_length_check_var)
        | None -> true
    )
    ) then
        fields_are_good
    else
        (field_invalid "Field Text of Message NewOrder_Multi_Leg violates the constraint: \"validity constraint.\"")
;;

let check_field_mod_f_NewOrder_Multi_Leg_Text_outer (msg_data : mod_neworder_multi_leg_data)  =
    let check_field_mod_f_NewOrder_Multi_Leg_Text_inner0_result = check_field_mod_f_NewOrder_Multi_Leg_Text_inner0 msg_data in
    if check_field_mod_f_NewOrder_Multi_Leg_Text_inner0_result.is_invalid then
        check_field_mod_f_NewOrder_Multi_Leg_Text_inner0_result
    else
        fields_are_good
;;

let check_field_mod_f_NewOrder_Multi_Leg_Text (msg_data : mod_neworder_multi_leg_data)  =
    (match msg_data.mod_f_NewOrder_Multi_Leg_Text with
        | None -> fields_are_good
        | Some _ -> (check_field_mod_f_NewOrder_Multi_Leg_Text_outer msg_data)
    )
;;

let check_field_mod_f_NewOrder_Multi_Leg_Notes_inner0 (msg_data : mod_neworder_multi_leg_data)  =
    if ((match msg_data.mod_f_NewOrder_Multi_Leg_Notes with
        | Some cap_string_length_check_var -> (good_string cap_string_length_check_var)
        | None -> true
    )
    ) then
        fields_are_good
    else
        (field_invalid "Field Notes of Message NewOrder_Multi_Leg violates the constraint: \"validity constraint.\"")
;;

let check_field_mod_f_NewOrder_Multi_Leg_Notes_outer (msg_data : mod_neworder_multi_leg_data)  =
    let check_field_mod_f_NewOrder_Multi_Leg_Notes_inner0_result = check_field_mod_f_NewOrder_Multi_Leg_Notes_inner0 msg_data in
    if check_field_mod_f_NewOrder_Multi_Leg_Notes_inner0_result.is_invalid then
        check_field_mod_f_NewOrder_Multi_Leg_Notes_inner0_result
    else
        fields_are_good
;;

let check_field_mod_f_NewOrder_Multi_Leg_Notes (msg_data : mod_neworder_multi_leg_data)  =
    (match msg_data.mod_f_NewOrder_Multi_Leg_Notes with
        | None -> fields_are_good
        | Some _ -> (check_field_mod_f_NewOrder_Multi_Leg_Notes_outer msg_data)
    )
;;

let check_field_mod_f_NewOrder_Multi_Leg_IncludeDealers_inner0 (msg_data : mod_neworder_multi_leg_data)  =
    if (List.mem msg_data.mod_f_NewOrder_Multi_Leg_IncludeDealers ((Some MOD_FIX_IncludeDealers_Include_Only_Send_to_only_the_dealers) :: ((Some MOD_FIX_IncludeDealers_Include_at_Least__Send_to_dealers) :: []))) then
        fields_are_good
    else
        (field_invalid "Field IncludeDealers of Message NewOrder_Multi_Leg violates the constraint: \" it in [ Include_Only_Send_to_only_the_dealers, Include_at_Least__Send_to_dealers]\"")
;;

let check_field_mod_f_NewOrder_Multi_Leg_IncludeDealers_outer (msg_data : mod_neworder_multi_leg_data)  =
    let check_field_mod_f_NewOrder_Multi_Leg_IncludeDealers_inner0_result = check_field_mod_f_NewOrder_Multi_Leg_IncludeDealers_inner0 msg_data in
    if check_field_mod_f_NewOrder_Multi_Leg_IncludeDealers_inner0_result.is_invalid then
        check_field_mod_f_NewOrder_Multi_Leg_IncludeDealers_inner0_result
    else
        fields_are_good
;;

let check_field_mod_f_NewOrder_Multi_Leg_IncludeDealers (msg_data : mod_neworder_multi_leg_data)  =
    (match msg_data.mod_f_NewOrder_Multi_Leg_IncludeDealers with
        | None -> fields_are_good
        | Some _ -> (check_field_mod_f_NewOrder_Multi_Leg_IncludeDealers_outer msg_data)
    )
;;

let check_field_mod_f_NewOrder_Multi_Leg_DealersGrp_inner0 (msg_data : mod_neworder_multi_leg_data)  =
    if (checkRGConsistency_DealersGrp msg_data.mod_f_NewOrder_Multi_Leg_DealersGrp) then
        fields_are_good
    else
        (field_invalid "Field DealersGrp of Message NewOrder_Multi_Leg violates the constraint: \"Consistency Check for Repeating Group Type DealersGrp.\"")
;;

let check_field_mod_f_NewOrder_Multi_Leg_DealersGrp_outer (msg_data : mod_neworder_multi_leg_data)  =
    let check_field_mod_f_NewOrder_Multi_Leg_DealersGrp_inner0_result = check_field_mod_f_NewOrder_Multi_Leg_DealersGrp_inner0 msg_data in
    if check_field_mod_f_NewOrder_Multi_Leg_DealersGrp_inner0_result.is_invalid then
        check_field_mod_f_NewOrder_Multi_Leg_DealersGrp_inner0_result
    else
        fields_are_good
;;

let check_field_mod_f_NewOrder_Multi_Leg_DealersGrp (msg_data : mod_neworder_multi_leg_data)  =
    check_field_mod_f_NewOrder_Multi_Leg_DealersGrp_outer msg_data
;;

let check_field_mod_f_NewOrder_Multi_Leg_TradingProtocol_inner0 (msg_data : mod_neworder_multi_leg_data)  =
    if (List.mem msg_data.mod_f_NewOrder_Multi_Leg_TradingProtocol ((Some MOD_FIX_TradingProtocol_DM) :: ((Some MOD_FIX_TradingProtocol_EU_Price) :: ((Some MOD_FIX_TradingProtocol_PFDS_Price) :: ((Some MOD_FIX_TradingProtocol_Price) :: ((Some MOD_FIX_TradingProtocol_Spread) :: ((Some MOD_FIX_TradingProtocol_Yield) :: []))))))) then
        fields_are_good
    else
        (field_invalid "Field TradingProtocol of Message NewOrder_Multi_Leg violates the constraint: \" it in [ TradingProtocol.DM, TradingProtocol.EU_Price, TradingProtocol.PFDS_Price, TradingProtocol.Price, TradingProtocol.Spread, TradingProtocol.Yield ]\"")
;;

let check_field_mod_f_NewOrder_Multi_Leg_TradingProtocol_outer (msg_data : mod_neworder_multi_leg_data)  =
    let check_field_mod_f_NewOrder_Multi_Leg_TradingProtocol_inner0_result = check_field_mod_f_NewOrder_Multi_Leg_TradingProtocol_inner0 msg_data in
    if check_field_mod_f_NewOrder_Multi_Leg_TradingProtocol_inner0_result.is_invalid then
        check_field_mod_f_NewOrder_Multi_Leg_TradingProtocol_inner0_result
    else
        fields_are_good
;;

let check_field_mod_f_NewOrder_Multi_Leg_TradingProtocol (msg_data : mod_neworder_multi_leg_data)  =
    (match msg_data.mod_f_NewOrder_Multi_Leg_TradingProtocol with
        | None -> fields_are_good
        | Some _ -> (check_field_mod_f_NewOrder_Multi_Leg_TradingProtocol_outer msg_data)
    )
;;

let check_field_mod_f_NewOrder_Multi_Leg_MKTXPricingProcess_inner0 (msg_data : mod_neworder_multi_leg_data)  =
    if (List.mem msg_data.mod_f_NewOrder_Multi_Leg_MKTXPricingProcess ((Some MOD_FIX_MKTXPricingProcess_Manual) :: ((Some MOD_FIX_MKTXPricingProcess_Phone_Spot) :: ((Some MOD_FIX_MKTXPricingProcess_Auto) :: ((Some MOD_FIX_MKTXPricingProcess_OneStep) :: ((Some MOD_FIX_MKTXPricingProcess_Standard) :: ((Some MOD_FIX_MKTXPricingProcess_Delayed_Spot) :: []))))))) then
        fields_are_good
    else
        (field_invalid "Field MKTXPricingProcess of Message NewOrder_Multi_Leg violates the constraint: \" it in [ MKTXPricingProcess.Manual, MKTXPricingProcess.Phone_Spot, MKTXPricingProcess.Auto, MKTXPricingProcess.OneStep, MKTXPricingProcess.Standard, MKTXPricingProcess.Delayed_Spot ]\"")
;;

let check_field_mod_f_NewOrder_Multi_Leg_MKTXPricingProcess_outer (msg_data : mod_neworder_multi_leg_data)  =
    let check_field_mod_f_NewOrder_Multi_Leg_MKTXPricingProcess_inner0_result = check_field_mod_f_NewOrder_Multi_Leg_MKTXPricingProcess_inner0 msg_data in
    if check_field_mod_f_NewOrder_Multi_Leg_MKTXPricingProcess_inner0_result.is_invalid then
        check_field_mod_f_NewOrder_Multi_Leg_MKTXPricingProcess_inner0_result
    else
        fields_are_good
;;

let check_field_mod_f_NewOrder_Multi_Leg_MKTXPricingProcess (msg_data : mod_neworder_multi_leg_data)  =
    (match msg_data.mod_f_NewOrder_Multi_Leg_MKTXPricingProcess with
        | None -> fields_are_good
        | Some _ -> (check_field_mod_f_NewOrder_Multi_Leg_MKTXPricingProcess_outer msg_data)
    )
;;

let check_field_mod_f_NewOrder_Multi_Leg_MKTXRTSPurpose_inner0 (msg_data : mod_neworder_multi_leg_data)  =
    if (List.mem msg_data.mod_f_NewOrder_Multi_Leg_MKTXRTSPurpose ((Some MOD_FIX_MKTXRTSPurpose_FundCrossing) :: [])) then
        fields_are_good
    else
        (field_invalid "Field MKTXRTSPurpose of Message NewOrder_Multi_Leg violates the constraint: \" it in [ MKTXRTSPurpose.FundCrossing ]\"")
;;

let check_field_mod_f_NewOrder_Multi_Leg_MKTXRTSPurpose_outer (msg_data : mod_neworder_multi_leg_data)  =
    let check_field_mod_f_NewOrder_Multi_Leg_MKTXRTSPurpose_inner0_result = check_field_mod_f_NewOrder_Multi_Leg_MKTXRTSPurpose_inner0 msg_data in
    if check_field_mod_f_NewOrder_Multi_Leg_MKTXRTSPurpose_inner0_result.is_invalid then
        check_field_mod_f_NewOrder_Multi_Leg_MKTXRTSPurpose_inner0_result
    else
        fields_are_good
;;

let check_field_mod_f_NewOrder_Multi_Leg_MKTXRTSPurpose (msg_data : mod_neworder_multi_leg_data)  =
    (match msg_data.mod_f_NewOrder_Multi_Leg_MKTXRTSPurpose with
        | None -> fields_are_good
        | Some _ -> (check_field_mod_f_NewOrder_Multi_Leg_MKTXRTSPurpose_outer msg_data)
    )
;;

let check_field_mod_f_NewOrder_Multi_Leg_AllocID_inner0 (msg_data : mod_neworder_multi_leg_data)  =
    if ((match msg_data.mod_f_NewOrder_Multi_Leg_AllocID with
        | Some cap_string_length_check_var -> (good_string cap_string_length_check_var)
        | None -> true
    )
    ) then
        fields_are_good
    else
        (field_invalid "Field AllocID of Message NewOrder_Multi_Leg violates the constraint: \"validity constraint.\"")
;;

let check_field_mod_f_NewOrder_Multi_Leg_AllocID_outer (msg_data : mod_neworder_multi_leg_data)  =
    let check_field_mod_f_NewOrder_Multi_Leg_AllocID_inner0_result = check_field_mod_f_NewOrder_Multi_Leg_AllocID_inner0 msg_data in
    if check_field_mod_f_NewOrder_Multi_Leg_AllocID_inner0_result.is_invalid then
        check_field_mod_f_NewOrder_Multi_Leg_AllocID_inner0_result
    else
        fields_are_good
;;

let check_field_mod_f_NewOrder_Multi_Leg_AllocID (msg_data : mod_neworder_multi_leg_data)  =
    (match msg_data.mod_f_NewOrder_Multi_Leg_AllocID with
        | None -> fields_are_good
        | Some _ -> (check_field_mod_f_NewOrder_Multi_Leg_AllocID_outer msg_data)
    )
;;

let check_field_mod_f_NewOrder_Multi_Leg_LegAllocsGrp_inner0 (msg_data : mod_neworder_multi_leg_data)  =
    if (checkRGConsistency_LegAllocsGrp msg_data.mod_f_NewOrder_Multi_Leg_LegAllocsGrp) then
        fields_are_good
    else
        (field_invalid "Field LegAllocsGrp of Message NewOrder_Multi_Leg violates the constraint: \"Consistency Check for Repeating Group Type LegAllocsGrp.\"")
;;

let check_field_mod_f_NewOrder_Multi_Leg_LegAllocsGrp_outer (msg_data : mod_neworder_multi_leg_data)  =
    let check_field_mod_f_NewOrder_Multi_Leg_LegAllocsGrp_inner0_result = check_field_mod_f_NewOrder_Multi_Leg_LegAllocsGrp_inner0 msg_data in
    if check_field_mod_f_NewOrder_Multi_Leg_LegAllocsGrp_inner0_result.is_invalid then
        check_field_mod_f_NewOrder_Multi_Leg_LegAllocsGrp_inner0_result
    else
        fields_are_good
;;

let check_field_mod_f_NewOrder_Multi_Leg_LegAllocsGrp (msg_data : mod_neworder_multi_leg_data)  =
    check_field_mod_f_NewOrder_Multi_Leg_LegAllocsGrp_outer msg_data
;;

let check_fields_NewOrder_Multi_Leg (msg_data : mod_neworder_multi_leg_data) (m_state : model_state)  =
    let mod_f_NewOrder_Multi_Leg_LegAllocsGrp_result = check_field_mod_f_NewOrder_Multi_Leg_LegAllocsGrp msg_data in
    if mod_f_NewOrder_Multi_Leg_LegAllocsGrp_result.is_invalid then
        mod_f_NewOrder_Multi_Leg_LegAllocsGrp_result
    else
        let mod_f_NewOrder_Multi_Leg_AllocID_result = check_field_mod_f_NewOrder_Multi_Leg_AllocID msg_data in
        if mod_f_NewOrder_Multi_Leg_AllocID_result.is_invalid then
            mod_f_NewOrder_Multi_Leg_AllocID_result
        else
            let mod_f_NewOrder_Multi_Leg_MKTXRTSPurpose_result = check_field_mod_f_NewOrder_Multi_Leg_MKTXRTSPurpose msg_data in
            if mod_f_NewOrder_Multi_Leg_MKTXRTSPurpose_result.is_invalid then
                mod_f_NewOrder_Multi_Leg_MKTXRTSPurpose_result
            else
                let mod_f_NewOrder_Multi_Leg_MKTXPricingProcess_result = check_field_mod_f_NewOrder_Multi_Leg_MKTXPricingProcess msg_data in
                if mod_f_NewOrder_Multi_Leg_MKTXPricingProcess_result.is_invalid then
                    mod_f_NewOrder_Multi_Leg_MKTXPricingProcess_result
                else
                    let mod_f_NewOrder_Multi_Leg_TradingProtocol_result = check_field_mod_f_NewOrder_Multi_Leg_TradingProtocol msg_data in
                    if mod_f_NewOrder_Multi_Leg_TradingProtocol_result.is_invalid then
                        mod_f_NewOrder_Multi_Leg_TradingProtocol_result
                    else
                        let mod_f_NewOrder_Multi_Leg_DealersGrp_result = check_field_mod_f_NewOrder_Multi_Leg_DealersGrp msg_data in
                        if mod_f_NewOrder_Multi_Leg_DealersGrp_result.is_invalid then
                            mod_f_NewOrder_Multi_Leg_DealersGrp_result
                        else
                            let mod_f_NewOrder_Multi_Leg_IncludeDealers_result = check_field_mod_f_NewOrder_Multi_Leg_IncludeDealers msg_data in
                            if mod_f_NewOrder_Multi_Leg_IncludeDealers_result.is_invalid then
                                mod_f_NewOrder_Multi_Leg_IncludeDealers_result
                            else
                                let mod_f_NewOrder_Multi_Leg_Notes_result = check_field_mod_f_NewOrder_Multi_Leg_Notes msg_data in
                                if mod_f_NewOrder_Multi_Leg_Notes_result.is_invalid then
                                    mod_f_NewOrder_Multi_Leg_Notes_result
                                else
                                    let mod_f_NewOrder_Multi_Leg_Text_result = check_field_mod_f_NewOrder_Multi_Leg_Text msg_data in
                                    if mod_f_NewOrder_Multi_Leg_Text_result.is_invalid then
                                        mod_f_NewOrder_Multi_Leg_Text_result
                                    else
                                        let mod_f_NewOrder_Multi_Leg_QtyType_result = check_field_mod_f_NewOrder_Multi_Leg_QtyType msg_data in
                                        if mod_f_NewOrder_Multi_Leg_QtyType_result.is_invalid then
                                            mod_f_NewOrder_Multi_Leg_QtyType_result
                                        else
                                            let mod_f_NewOrder_Multi_Leg_LegsGrp_result = check_field_mod_f_NewOrder_Multi_Leg_LegsGrp msg_data in
                                            if mod_f_NewOrder_Multi_Leg_LegsGrp_result.is_invalid then
                                                mod_f_NewOrder_Multi_Leg_LegsGrp_result
                                            else
                                                let mod_f_NewOrder_Multi_Leg_OrderCapacity_result = check_field_mod_f_NewOrder_Multi_Leg_OrderCapacity msg_data in
                                                if mod_f_NewOrder_Multi_Leg_OrderCapacity_result.is_invalid then
                                                    mod_f_NewOrder_Multi_Leg_OrderCapacity_result
                                                else
                                                    let mod_f_NewOrder_Multi_Leg_Instrument_CFICode_result = check_field_mod_f_NewOrder_Multi_Leg_Instrument_CFICode msg_data in
                                                    if mod_f_NewOrder_Multi_Leg_Instrument_CFICode_result.is_invalid then
                                                        mod_f_NewOrder_Multi_Leg_Instrument_CFICode_result
                                                    else
                                                        let mod_f_NewOrder_Multi_Leg_Parties_PartyIDsGrp_result = check_field_mod_f_NewOrder_Multi_Leg_Parties_PartyIDsGrp msg_data in
                                                        if mod_f_NewOrder_Multi_Leg_Parties_PartyIDsGrp_result.is_invalid then
                                                            mod_f_NewOrder_Multi_Leg_Parties_PartyIDsGrp_result
                                                        else
                                                            let mod_f_NewOrder_Multi_Leg_ClOrdID_result = check_field_mod_f_NewOrder_Multi_Leg_ClOrdID msg_data in
                                                            if mod_f_NewOrder_Multi_Leg_ClOrdID_result.is_invalid then
                                                                mod_f_NewOrder_Multi_Leg_ClOrdID_result
                                                            else
                                                                fields_are_good
;;

let check_field_mod_f_NewOrder_List_ListID_inner0 (msg_data : mod_neworder_list_data)  =
    if (good_string msg_data.mod_f_NewOrder_List_ListID) then
        fields_are_good
    else
        (field_invalid "Field ListID of Message NewOrder_List violates the constraint: \"validity constraint.\"")
;;

let check_field_mod_f_NewOrder_List_ListID_outer (msg_data : mod_neworder_list_data)  =
    let check_field_mod_f_NewOrder_List_ListID_inner0_result = check_field_mod_f_NewOrder_List_ListID_inner0 msg_data in
    if check_field_mod_f_NewOrder_List_ListID_inner0_result.is_invalid then
        check_field_mod_f_NewOrder_List_ListID_inner0_result
    else
        fields_are_good
;;

let check_field_mod_f_NewOrder_List_ListID (msg_data : mod_neworder_list_data)  =
    check_field_mod_f_NewOrder_List_ListID_outer msg_data
;;

let check_field_mod_f_NewOrder_List_OrdersGrp_inner0 (msg_data : mod_neworder_list_data)  =
    if (checkRGConsistency_OrdersGrp msg_data.mod_f_NewOrder_List_OrdersGrp) then
        fields_are_good
    else
        (field_invalid "Field OrdersGrp of Message NewOrder_List violates the constraint: \"Consistency Check for Repeating Group Type OrdersGrp.\"")
;;

let check_field_mod_f_NewOrder_List_OrdersGrp_inner1 (msg_data : mod_neworder_list_data)  =
    if ((&&) ((match msg_data.mod_f_NewOrder_List_OrdersGrp.rg_OrdersGrp_element_4 with
        | Some cap_e_OrdersGrp -> (checkRGConsistency_PartyIDsGrp cap_e_OrdersGrp.mod_f_OrdersGrp_Parties_PartyIDsGrp)
        | None -> true
    )
    ) ((&&) ((match msg_data.mod_f_NewOrder_List_OrdersGrp.rg_OrdersGrp_element_3 with
        | Some cap_e_OrdersGrp -> (checkRGConsistency_PartyIDsGrp cap_e_OrdersGrp.mod_f_OrdersGrp_Parties_PartyIDsGrp)
        | None -> true
    )
    ) ((&&) ((match msg_data.mod_f_NewOrder_List_OrdersGrp.rg_OrdersGrp_element_2 with
        | Some cap_e_OrdersGrp -> (checkRGConsistency_PartyIDsGrp cap_e_OrdersGrp.mod_f_OrdersGrp_Parties_PartyIDsGrp)
        | None -> true
    )
    ) ((&&) ((match msg_data.mod_f_NewOrder_List_OrdersGrp.rg_OrdersGrp_element_1 with
        | Some cap_e_OrdersGrp -> (checkRGConsistency_PartyIDsGrp cap_e_OrdersGrp.mod_f_OrdersGrp_Parties_PartyIDsGrp)
        | None -> true
    )
    ) ((match msg_data.mod_f_NewOrder_List_OrdersGrp.rg_OrdersGrp_element_0 with
        | Some cap_e_OrdersGrp -> (checkRGConsistency_PartyIDsGrp cap_e_OrdersGrp.mod_f_OrdersGrp_Parties_PartyIDsGrp)
        | None -> true
    )
    ))))) then
        fields_are_good
    else
        (field_invalid "Field OrdersGrp of Message NewOrder_List violates the constraint: \"Consistency Check for Repeating Group Type PartyIDsGrp.\"")
;;

let check_field_mod_f_NewOrder_List_OrdersGrp_inner2 (msg_data : mod_neworder_list_data)  =
    if ((&&) ((match msg_data.mod_f_NewOrder_List_OrdersGrp.rg_OrdersGrp_element_4 with
        | Some cap_e_OrdersGrp -> ((&&) ((match cap_e_OrdersGrp.mod_f_OrdersGrp_Parties_PartyIDsGrp.rg_PartyIDsGrp_element_4 with
            | Some cap_e_Parties_PartyIDsGrp -> (checkRGConsistency_PartySubIDsGrp cap_e_Parties_PartyIDsGrp.mod_f_PartyIDsGrp_PartySubIDsGrp)
            | None -> true
        )
        ) ((&&) ((match cap_e_OrdersGrp.mod_f_OrdersGrp_Parties_PartyIDsGrp.rg_PartyIDsGrp_element_3 with
            | Some cap_e_Parties_PartyIDsGrp -> (checkRGConsistency_PartySubIDsGrp cap_e_Parties_PartyIDsGrp.mod_f_PartyIDsGrp_PartySubIDsGrp)
            | None -> true
        )
        ) ((&&) ((match cap_e_OrdersGrp.mod_f_OrdersGrp_Parties_PartyIDsGrp.rg_PartyIDsGrp_element_2 with
            | Some cap_e_Parties_PartyIDsGrp -> (checkRGConsistency_PartySubIDsGrp cap_e_Parties_PartyIDsGrp.mod_f_PartyIDsGrp_PartySubIDsGrp)
            | None -> true
        )
        ) ((&&) ((match cap_e_OrdersGrp.mod_f_OrdersGrp_Parties_PartyIDsGrp.rg_PartyIDsGrp_element_1 with
            | Some cap_e_Parties_PartyIDsGrp -> (checkRGConsistency_PartySubIDsGrp cap_e_Parties_PartyIDsGrp.mod_f_PartyIDsGrp_PartySubIDsGrp)
            | None -> true
        )
        ) ((match cap_e_OrdersGrp.mod_f_OrdersGrp_Parties_PartyIDsGrp.rg_PartyIDsGrp_element_0 with
            | Some cap_e_Parties_PartyIDsGrp -> (checkRGConsistency_PartySubIDsGrp cap_e_Parties_PartyIDsGrp.mod_f_PartyIDsGrp_PartySubIDsGrp)
            | None -> true
        )
        )))))
        | None -> true
    )
    ) ((&&) ((match msg_data.mod_f_NewOrder_List_OrdersGrp.rg_OrdersGrp_element_3 with
        | Some cap_e_OrdersGrp -> ((&&) ((match cap_e_OrdersGrp.mod_f_OrdersGrp_Parties_PartyIDsGrp.rg_PartyIDsGrp_element_4 with
            | Some cap_e_Parties_PartyIDsGrp -> (checkRGConsistency_PartySubIDsGrp cap_e_Parties_PartyIDsGrp.mod_f_PartyIDsGrp_PartySubIDsGrp)
            | None -> true
        )
        ) ((&&) ((match cap_e_OrdersGrp.mod_f_OrdersGrp_Parties_PartyIDsGrp.rg_PartyIDsGrp_element_3 with
            | Some cap_e_Parties_PartyIDsGrp -> (checkRGConsistency_PartySubIDsGrp cap_e_Parties_PartyIDsGrp.mod_f_PartyIDsGrp_PartySubIDsGrp)
            | None -> true
        )
        ) ((&&) ((match cap_e_OrdersGrp.mod_f_OrdersGrp_Parties_PartyIDsGrp.rg_PartyIDsGrp_element_2 with
            | Some cap_e_Parties_PartyIDsGrp -> (checkRGConsistency_PartySubIDsGrp cap_e_Parties_PartyIDsGrp.mod_f_PartyIDsGrp_PartySubIDsGrp)
            | None -> true
        )
        ) ((&&) ((match cap_e_OrdersGrp.mod_f_OrdersGrp_Parties_PartyIDsGrp.rg_PartyIDsGrp_element_1 with
            | Some cap_e_Parties_PartyIDsGrp -> (checkRGConsistency_PartySubIDsGrp cap_e_Parties_PartyIDsGrp.mod_f_PartyIDsGrp_PartySubIDsGrp)
            | None -> true
        )
        ) ((match cap_e_OrdersGrp.mod_f_OrdersGrp_Parties_PartyIDsGrp.rg_PartyIDsGrp_element_0 with
            | Some cap_e_Parties_PartyIDsGrp -> (checkRGConsistency_PartySubIDsGrp cap_e_Parties_PartyIDsGrp.mod_f_PartyIDsGrp_PartySubIDsGrp)
            | None -> true
        )
        )))))
        | None -> true
    )
    ) ((&&) ((match msg_data.mod_f_NewOrder_List_OrdersGrp.rg_OrdersGrp_element_2 with
        | Some cap_e_OrdersGrp -> ((&&) ((match cap_e_OrdersGrp.mod_f_OrdersGrp_Parties_PartyIDsGrp.rg_PartyIDsGrp_element_4 with
            | Some cap_e_Parties_PartyIDsGrp -> (checkRGConsistency_PartySubIDsGrp cap_e_Parties_PartyIDsGrp.mod_f_PartyIDsGrp_PartySubIDsGrp)
            | None -> true
        )
        ) ((&&) ((match cap_e_OrdersGrp.mod_f_OrdersGrp_Parties_PartyIDsGrp.rg_PartyIDsGrp_element_3 with
            | Some cap_e_Parties_PartyIDsGrp -> (checkRGConsistency_PartySubIDsGrp cap_e_Parties_PartyIDsGrp.mod_f_PartyIDsGrp_PartySubIDsGrp)
            | None -> true
        )
        ) ((&&) ((match cap_e_OrdersGrp.mod_f_OrdersGrp_Parties_PartyIDsGrp.rg_PartyIDsGrp_element_2 with
            | Some cap_e_Parties_PartyIDsGrp -> (checkRGConsistency_PartySubIDsGrp cap_e_Parties_PartyIDsGrp.mod_f_PartyIDsGrp_PartySubIDsGrp)
            | None -> true
        )
        ) ((&&) ((match cap_e_OrdersGrp.mod_f_OrdersGrp_Parties_PartyIDsGrp.rg_PartyIDsGrp_element_1 with
            | Some cap_e_Parties_PartyIDsGrp -> (checkRGConsistency_PartySubIDsGrp cap_e_Parties_PartyIDsGrp.mod_f_PartyIDsGrp_PartySubIDsGrp)
            | None -> true
        )
        ) ((match cap_e_OrdersGrp.mod_f_OrdersGrp_Parties_PartyIDsGrp.rg_PartyIDsGrp_element_0 with
            | Some cap_e_Parties_PartyIDsGrp -> (checkRGConsistency_PartySubIDsGrp cap_e_Parties_PartyIDsGrp.mod_f_PartyIDsGrp_PartySubIDsGrp)
            | None -> true
        )
        )))))
        | None -> true
    )
    ) ((&&) ((match msg_data.mod_f_NewOrder_List_OrdersGrp.rg_OrdersGrp_element_1 with
        | Some cap_e_OrdersGrp -> ((&&) ((match cap_e_OrdersGrp.mod_f_OrdersGrp_Parties_PartyIDsGrp.rg_PartyIDsGrp_element_4 with
            | Some cap_e_Parties_PartyIDsGrp -> (checkRGConsistency_PartySubIDsGrp cap_e_Parties_PartyIDsGrp.mod_f_PartyIDsGrp_PartySubIDsGrp)
            | None -> true
        )
        ) ((&&) ((match cap_e_OrdersGrp.mod_f_OrdersGrp_Parties_PartyIDsGrp.rg_PartyIDsGrp_element_3 with
            | Some cap_e_Parties_PartyIDsGrp -> (checkRGConsistency_PartySubIDsGrp cap_e_Parties_PartyIDsGrp.mod_f_PartyIDsGrp_PartySubIDsGrp)
            | None -> true
        )
        ) ((&&) ((match cap_e_OrdersGrp.mod_f_OrdersGrp_Parties_PartyIDsGrp.rg_PartyIDsGrp_element_2 with
            | Some cap_e_Parties_PartyIDsGrp -> (checkRGConsistency_PartySubIDsGrp cap_e_Parties_PartyIDsGrp.mod_f_PartyIDsGrp_PartySubIDsGrp)
            | None -> true
        )
        ) ((&&) ((match cap_e_OrdersGrp.mod_f_OrdersGrp_Parties_PartyIDsGrp.rg_PartyIDsGrp_element_1 with
            | Some cap_e_Parties_PartyIDsGrp -> (checkRGConsistency_PartySubIDsGrp cap_e_Parties_PartyIDsGrp.mod_f_PartyIDsGrp_PartySubIDsGrp)
            | None -> true
        )
        ) ((match cap_e_OrdersGrp.mod_f_OrdersGrp_Parties_PartyIDsGrp.rg_PartyIDsGrp_element_0 with
            | Some cap_e_Parties_PartyIDsGrp -> (checkRGConsistency_PartySubIDsGrp cap_e_Parties_PartyIDsGrp.mod_f_PartyIDsGrp_PartySubIDsGrp)
            | None -> true
        )
        )))))
        | None -> true
    )
    ) ((match msg_data.mod_f_NewOrder_List_OrdersGrp.rg_OrdersGrp_element_0 with
        | Some cap_e_OrdersGrp -> ((&&) ((match cap_e_OrdersGrp.mod_f_OrdersGrp_Parties_PartyIDsGrp.rg_PartyIDsGrp_element_4 with
            | Some cap_e_Parties_PartyIDsGrp -> (checkRGConsistency_PartySubIDsGrp cap_e_Parties_PartyIDsGrp.mod_f_PartyIDsGrp_PartySubIDsGrp)
            | None -> true
        )
        ) ((&&) ((match cap_e_OrdersGrp.mod_f_OrdersGrp_Parties_PartyIDsGrp.rg_PartyIDsGrp_element_3 with
            | Some cap_e_Parties_PartyIDsGrp -> (checkRGConsistency_PartySubIDsGrp cap_e_Parties_PartyIDsGrp.mod_f_PartyIDsGrp_PartySubIDsGrp)
            | None -> true
        )
        ) ((&&) ((match cap_e_OrdersGrp.mod_f_OrdersGrp_Parties_PartyIDsGrp.rg_PartyIDsGrp_element_2 with
            | Some cap_e_Parties_PartyIDsGrp -> (checkRGConsistency_PartySubIDsGrp cap_e_Parties_PartyIDsGrp.mod_f_PartyIDsGrp_PartySubIDsGrp)
            | None -> true
        )
        ) ((&&) ((match cap_e_OrdersGrp.mod_f_OrdersGrp_Parties_PartyIDsGrp.rg_PartyIDsGrp_element_1 with
            | Some cap_e_Parties_PartyIDsGrp -> (checkRGConsistency_PartySubIDsGrp cap_e_Parties_PartyIDsGrp.mod_f_PartyIDsGrp_PartySubIDsGrp)
            | None -> true
        )
        ) ((match cap_e_OrdersGrp.mod_f_OrdersGrp_Parties_PartyIDsGrp.rg_PartyIDsGrp_element_0 with
            | Some cap_e_Parties_PartyIDsGrp -> (checkRGConsistency_PartySubIDsGrp cap_e_Parties_PartyIDsGrp.mod_f_PartyIDsGrp_PartySubIDsGrp)
            | None -> true
        )
        )))))
        | None -> true
    )
    ))))) then
        fields_are_good
    else
        (field_invalid "Field OrdersGrp of Message NewOrder_List violates the constraint: \"Consistency Check for Repeating Group Type PartySubIDsGrp.\"")
;;

let check_field_mod_f_NewOrder_List_OrdersGrp_inner3 (msg_data : mod_neworder_list_data)  =
    if ((&&) ((match msg_data.mod_f_NewOrder_List_OrdersGrp.rg_OrdersGrp_element_4 with
        | Some cap_e_OrdersGrp -> (checkRGConsistency_SecurityAltIDGrp cap_e_OrdersGrp.mod_f_OrdersGrp_Instrument_SecurityAltIDGrp)
        | None -> true
    )
    ) ((&&) ((match msg_data.mod_f_NewOrder_List_OrdersGrp.rg_OrdersGrp_element_3 with
        | Some cap_e_OrdersGrp -> (checkRGConsistency_SecurityAltIDGrp cap_e_OrdersGrp.mod_f_OrdersGrp_Instrument_SecurityAltIDGrp)
        | None -> true
    )
    ) ((&&) ((match msg_data.mod_f_NewOrder_List_OrdersGrp.rg_OrdersGrp_element_2 with
        | Some cap_e_OrdersGrp -> (checkRGConsistency_SecurityAltIDGrp cap_e_OrdersGrp.mod_f_OrdersGrp_Instrument_SecurityAltIDGrp)
        | None -> true
    )
    ) ((&&) ((match msg_data.mod_f_NewOrder_List_OrdersGrp.rg_OrdersGrp_element_1 with
        | Some cap_e_OrdersGrp -> (checkRGConsistency_SecurityAltIDGrp cap_e_OrdersGrp.mod_f_OrdersGrp_Instrument_SecurityAltIDGrp)
        | None -> true
    )
    ) ((match msg_data.mod_f_NewOrder_List_OrdersGrp.rg_OrdersGrp_element_0 with
        | Some cap_e_OrdersGrp -> (checkRGConsistency_SecurityAltIDGrp cap_e_OrdersGrp.mod_f_OrdersGrp_Instrument_SecurityAltIDGrp)
        | None -> true
    )
    ))))) then
        fields_are_good
    else
        (field_invalid "Field OrdersGrp of Message NewOrder_List violates the constraint: \"Consistency Check for Repeating Group Type SecurityAltIDGrp.\"")
;;

let check_field_mod_f_NewOrder_List_OrdersGrp_outer (msg_data : mod_neworder_list_data)  =
    let check_field_mod_f_NewOrder_List_OrdersGrp_inner3_result = check_field_mod_f_NewOrder_List_OrdersGrp_inner3 msg_data in
    if check_field_mod_f_NewOrder_List_OrdersGrp_inner3_result.is_invalid then
        check_field_mod_f_NewOrder_List_OrdersGrp_inner3_result
    else
        let check_field_mod_f_NewOrder_List_OrdersGrp_inner2_result = check_field_mod_f_NewOrder_List_OrdersGrp_inner2 msg_data in
        if check_field_mod_f_NewOrder_List_OrdersGrp_inner2_result.is_invalid then
            check_field_mod_f_NewOrder_List_OrdersGrp_inner2_result
        else
            let check_field_mod_f_NewOrder_List_OrdersGrp_inner1_result = check_field_mod_f_NewOrder_List_OrdersGrp_inner1 msg_data in
            if check_field_mod_f_NewOrder_List_OrdersGrp_inner1_result.is_invalid then
                check_field_mod_f_NewOrder_List_OrdersGrp_inner1_result
            else
                let check_field_mod_f_NewOrder_List_OrdersGrp_inner0_result = check_field_mod_f_NewOrder_List_OrdersGrp_inner0 msg_data in
                if check_field_mod_f_NewOrder_List_OrdersGrp_inner0_result.is_invalid then
                    check_field_mod_f_NewOrder_List_OrdersGrp_inner0_result
                else
                    fields_are_good
;;

let check_field_mod_f_NewOrder_List_OrdersGrp (msg_data : mod_neworder_list_data)  =
    check_field_mod_f_NewOrder_List_OrdersGrp_outer msg_data
;;

let check_field_mod_f_NewOrder_List_IncludeDealers_inner0 (msg_data : mod_neworder_list_data)  =
    if (List.mem msg_data.mod_f_NewOrder_List_IncludeDealers ((Some MOD_FIX_IncludeDealers_Include_at_Least__Send_to_dealers) :: ((Some MOD_FIX_IncludeDealers_Include_Only_Send_to_only_the_dealers) :: []))) then
        fields_are_good
    else
        (field_invalid "Field IncludeDealers of Message NewOrder_List violates the constraint: \" it in [Include_at_Least__Send_to_dealers,Include_Only_Send_to_only_the_dealers]\"")
;;

let check_field_mod_f_NewOrder_List_IncludeDealers_outer (msg_data : mod_neworder_list_data)  =
    let check_field_mod_f_NewOrder_List_IncludeDealers_inner0_result = check_field_mod_f_NewOrder_List_IncludeDealers_inner0 msg_data in
    if check_field_mod_f_NewOrder_List_IncludeDealers_inner0_result.is_invalid then
        check_field_mod_f_NewOrder_List_IncludeDealers_inner0_result
    else
        fields_are_good
;;

let check_field_mod_f_NewOrder_List_IncludeDealers (msg_data : mod_neworder_list_data)  =
    (match msg_data.mod_f_NewOrder_List_IncludeDealers with
        | None -> fields_are_good
        | Some _ -> (check_field_mod_f_NewOrder_List_IncludeDealers_outer msg_data)
    )
;;

let check_field_mod_f_NewOrder_List_DealersGrp_inner0 (msg_data : mod_neworder_list_data)  =
    if (checkRGConsistency_DealersGrp msg_data.mod_f_NewOrder_List_DealersGrp) then
        fields_are_good
    else
        (field_invalid "Field DealersGrp of Message NewOrder_List violates the constraint: \"Consistency Check for Repeating Group Type DealersGrp.\"")
;;

let check_field_mod_f_NewOrder_List_DealersGrp_outer (msg_data : mod_neworder_list_data)  =
    let check_field_mod_f_NewOrder_List_DealersGrp_inner0_result = check_field_mod_f_NewOrder_List_DealersGrp_inner0 msg_data in
    if check_field_mod_f_NewOrder_List_DealersGrp_inner0_result.is_invalid then
        check_field_mod_f_NewOrder_List_DealersGrp_inner0_result
    else
        fields_are_good
;;

let check_field_mod_f_NewOrder_List_DealersGrp (msg_data : mod_neworder_list_data)  =
    check_field_mod_f_NewOrder_List_DealersGrp_outer msg_data
;;

let check_field_mod_f_NewOrder_List_OrderCapacity_inner0 (msg_data : mod_neworder_list_data)  =
    if (List.mem msg_data.mod_f_NewOrder_List_OrderCapacity ((Some MOD_FIX_OrderCapacity_Any_Other_Trading_Capacity__AOTC_) :: ((Some MOD_FIX_OrderCapacity_Own_Account) :: ((Some MOD_FIX_OrderCapacity_Matched_Principal) :: [])))) then
        fields_are_good
    else
        (field_invalid "Field OrderCapacity of Message NewOrder_List violates the constraint: \" it in [ OrderCapacity.Any_Other_Trading_Capacity__AOTC_, OrderCapacity.Own_Account, OrderCapacity.Matched_Principal ]\"")
;;

let check_field_mod_f_NewOrder_List_OrderCapacity_outer (msg_data : mod_neworder_list_data)  =
    let check_field_mod_f_NewOrder_List_OrderCapacity_inner0_result = check_field_mod_f_NewOrder_List_OrderCapacity_inner0 msg_data in
    if check_field_mod_f_NewOrder_List_OrderCapacity_inner0_result.is_invalid then
        check_field_mod_f_NewOrder_List_OrderCapacity_inner0_result
    else
        fields_are_good
;;

let check_field_mod_f_NewOrder_List_OrderCapacity (msg_data : mod_neworder_list_data)  =
    (match msg_data.mod_f_NewOrder_List_OrderCapacity with
        | None -> fields_are_good
        | Some _ -> (check_field_mod_f_NewOrder_List_OrderCapacity_outer msg_data)
    )
;;

let check_field_mod_f_NewOrder_List_MKTXPricingProcess_inner0 (msg_data : mod_neworder_list_data)  =
    if (List.mem msg_data.mod_f_NewOrder_List_MKTXPricingProcess ((Some MOD_FIX_MKTXPricingProcess_Manual) :: ((Some MOD_FIX_MKTXPricingProcess_Phone_Spot) :: ((Some MOD_FIX_MKTXPricingProcess_Auto) :: ((Some MOD_FIX_MKTXPricingProcess_OneStep) :: ((Some MOD_FIX_MKTXPricingProcess_Standard) :: ((Some MOD_FIX_MKTXPricingProcess_Delayed_Spot) :: []))))))) then
        fields_are_good
    else
        (field_invalid "Field MKTXPricingProcess of Message NewOrder_List violates the constraint: \" it in [ MKTXPricingProcess.Manual, MKTXPricingProcess.Phone_Spot, MKTXPricingProcess.Auto, MKTXPricingProcess.OneStep, MKTXPricingProcess.Standard, MKTXPricingProcess.Delayed_Spot ]\"")
;;

let check_field_mod_f_NewOrder_List_MKTXPricingProcess_outer (msg_data : mod_neworder_list_data)  =
    let check_field_mod_f_NewOrder_List_MKTXPricingProcess_inner0_result = check_field_mod_f_NewOrder_List_MKTXPricingProcess_inner0 msg_data in
    if check_field_mod_f_NewOrder_List_MKTXPricingProcess_inner0_result.is_invalid then
        check_field_mod_f_NewOrder_List_MKTXPricingProcess_inner0_result
    else
        fields_are_good
;;

let check_field_mod_f_NewOrder_List_MKTXPricingProcess (msg_data : mod_neworder_list_data)  =
    (match msg_data.mod_f_NewOrder_List_MKTXPricingProcess with
        | None -> fields_are_good
        | Some _ -> (check_field_mod_f_NewOrder_List_MKTXPricingProcess_outer msg_data)
    )
;;

let check_field_mod_f_NewOrder_List_MKTXListType_inner0 (msg_data : mod_neworder_list_data)  =
    if (List.mem msg_data.mod_f_NewOrder_List_MKTXListType ((Some MOD_FIX_MKTXListType_Portfolio) :: [])) then
        fields_are_good
    else
        (field_invalid "Field MKTXListType of Message NewOrder_List violates the constraint: \" it in [ MKTXListType.Portfolio ]\"")
;;

let check_field_mod_f_NewOrder_List_MKTXListType_outer (msg_data : mod_neworder_list_data)  =
    let check_field_mod_f_NewOrder_List_MKTXListType_inner0_result = check_field_mod_f_NewOrder_List_MKTXListType_inner0 msg_data in
    if check_field_mod_f_NewOrder_List_MKTXListType_inner0_result.is_invalid then
        check_field_mod_f_NewOrder_List_MKTXListType_inner0_result
    else
        fields_are_good
;;

let check_field_mod_f_NewOrder_List_MKTXListType (msg_data : mod_neworder_list_data)  =
    (match msg_data.mod_f_NewOrder_List_MKTXListType with
        | None -> fields_are_good
        | Some _ -> (check_field_mod_f_NewOrder_List_MKTXListType_outer msg_data)
    )
;;

let check_field_mod_f_NewOrder_List_AllocID_inner0 (msg_data : mod_neworder_list_data)  =
    if ((match msg_data.mod_f_NewOrder_List_AllocID with
        | Some cap_string_length_check_var -> (good_string cap_string_length_check_var)
        | None -> true
    )
    ) then
        fields_are_good
    else
        (field_invalid "Field AllocID of Message NewOrder_List violates the constraint: \"validity constraint.\"")
;;

let check_field_mod_f_NewOrder_List_AllocID_outer (msg_data : mod_neworder_list_data)  =
    let check_field_mod_f_NewOrder_List_AllocID_inner0_result = check_field_mod_f_NewOrder_List_AllocID_inner0 msg_data in
    if check_field_mod_f_NewOrder_List_AllocID_inner0_result.is_invalid then
        check_field_mod_f_NewOrder_List_AllocID_inner0_result
    else
        fields_are_good
;;

let check_field_mod_f_NewOrder_List_AllocID (msg_data : mod_neworder_list_data)  =
    (match msg_data.mod_f_NewOrder_List_AllocID with
        | None -> fields_are_good
        | Some _ -> (check_field_mod_f_NewOrder_List_AllocID_outer msg_data)
    )
;;

let check_field_mod_f_NewOrder_List_AllocsGrp_inner0 (msg_data : mod_neworder_list_data)  =
    if (checkRGConsistency_AllocsGrp msg_data.mod_f_NewOrder_List_AllocsGrp) then
        fields_are_good
    else
        (field_invalid "Field AllocsGrp of Message NewOrder_List violates the constraint: \"Consistency Check for Repeating Group Type AllocsGrp.\"")
;;

let check_field_mod_f_NewOrder_List_AllocsGrp_outer (msg_data : mod_neworder_list_data)  =
    let check_field_mod_f_NewOrder_List_AllocsGrp_inner0_result = check_field_mod_f_NewOrder_List_AllocsGrp_inner0 msg_data in
    if check_field_mod_f_NewOrder_List_AllocsGrp_inner0_result.is_invalid then
        check_field_mod_f_NewOrder_List_AllocsGrp_inner0_result
    else
        fields_are_good
;;

let check_field_mod_f_NewOrder_List_AllocsGrp (msg_data : mod_neworder_list_data)  =
    check_field_mod_f_NewOrder_List_AllocsGrp_outer msg_data
;;

let check_fields_NewOrder_List (msg_data : mod_neworder_list_data) (m_state : model_state)  =
    let mod_f_NewOrder_List_AllocsGrp_result = check_field_mod_f_NewOrder_List_AllocsGrp msg_data in
    if mod_f_NewOrder_List_AllocsGrp_result.is_invalid then
        mod_f_NewOrder_List_AllocsGrp_result
    else
        let mod_f_NewOrder_List_AllocID_result = check_field_mod_f_NewOrder_List_AllocID msg_data in
        if mod_f_NewOrder_List_AllocID_result.is_invalid then
            mod_f_NewOrder_List_AllocID_result
        else
            let mod_f_NewOrder_List_MKTXListType_result = check_field_mod_f_NewOrder_List_MKTXListType msg_data in
            if mod_f_NewOrder_List_MKTXListType_result.is_invalid then
                mod_f_NewOrder_List_MKTXListType_result
            else
                let mod_f_NewOrder_List_MKTXPricingProcess_result = check_field_mod_f_NewOrder_List_MKTXPricingProcess msg_data in
                if mod_f_NewOrder_List_MKTXPricingProcess_result.is_invalid then
                    mod_f_NewOrder_List_MKTXPricingProcess_result
                else
                    let mod_f_NewOrder_List_OrderCapacity_result = check_field_mod_f_NewOrder_List_OrderCapacity msg_data in
                    if mod_f_NewOrder_List_OrderCapacity_result.is_invalid then
                        mod_f_NewOrder_List_OrderCapacity_result
                    else
                        let mod_f_NewOrder_List_DealersGrp_result = check_field_mod_f_NewOrder_List_DealersGrp msg_data in
                        if mod_f_NewOrder_List_DealersGrp_result.is_invalid then
                            mod_f_NewOrder_List_DealersGrp_result
                        else
                            let mod_f_NewOrder_List_IncludeDealers_result = check_field_mod_f_NewOrder_List_IncludeDealers msg_data in
                            if mod_f_NewOrder_List_IncludeDealers_result.is_invalid then
                                mod_f_NewOrder_List_IncludeDealers_result
                            else
                                let mod_f_NewOrder_List_OrdersGrp_result = check_field_mod_f_NewOrder_List_OrdersGrp msg_data in
                                if mod_f_NewOrder_List_OrdersGrp_result.is_invalid then
                                    mod_f_NewOrder_List_OrdersGrp_result
                                else
                                    let mod_f_NewOrder_List_ListID_result = check_field_mod_f_NewOrder_List_ListID msg_data in
                                    if mod_f_NewOrder_List_ListID_result.is_invalid then
                                        mod_f_NewOrder_List_ListID_result
                                    else
                                        fields_are_good
;;

let check_field_mod_f_ListOrderCancel_ListID_inner0 (msg_data : mod_listordercancel_data)  =
    if (good_string msg_data.mod_f_ListOrderCancel_ListID) then
        fields_are_good
    else
        (field_invalid "Field ListID of Message ListOrderCancel violates the constraint: \"validity constraint.\"")
;;

let check_field_mod_f_ListOrderCancel_ListID_outer (msg_data : mod_listordercancel_data)  =
    let check_field_mod_f_ListOrderCancel_ListID_inner0_result = check_field_mod_f_ListOrderCancel_ListID_inner0 msg_data in
    if check_field_mod_f_ListOrderCancel_ListID_inner0_result.is_invalid then
        check_field_mod_f_ListOrderCancel_ListID_inner0_result
    else
        fields_are_good
;;

let check_field_mod_f_ListOrderCancel_ListID (msg_data : mod_listordercancel_data)  =
    check_field_mod_f_ListOrderCancel_ListID_outer msg_data
;;

let check_fields_ListOrderCancel (msg_data : mod_listordercancel_data) (m_state : model_state)  =
    let mod_f_ListOrderCancel_ListID_result = check_field_mod_f_ListOrderCancel_ListID msg_data in
    if mod_f_ListOrderCancel_ListID_result.is_invalid then
        mod_f_ListOrderCancel_ListID_result
    else
        fields_are_good
;;

let check_field_mod_f_BusinessMessageReject_RefMsgTyp_inner0 (msg_data : mod_businessmessagereject_data)  =
    if (good_string msg_data.mod_f_BusinessMessageReject_RefMsgTyp) then
        fields_are_good
    else
        (field_invalid "Field RefMsgTyp of Message BusinessMessageReject violates the constraint: \"validity constraint.\"")
;;

let check_field_mod_f_BusinessMessageReject_RefMsgTyp_outer (msg_data : mod_businessmessagereject_data)  =
    let check_field_mod_f_BusinessMessageReject_RefMsgTyp_inner0_result = check_field_mod_f_BusinessMessageReject_RefMsgTyp_inner0 msg_data in
    if check_field_mod_f_BusinessMessageReject_RefMsgTyp_inner0_result.is_invalid then
        check_field_mod_f_BusinessMessageReject_RefMsgTyp_inner0_result
    else
        fields_are_good
;;

let check_field_mod_f_BusinessMessageReject_RefMsgTyp (msg_data : mod_businessmessagereject_data)  =
    check_field_mod_f_BusinessMessageReject_RefMsgTyp_outer msg_data
;;

let check_field_mod_f_BusinessMessageReject_BusinessRejectRefID_inner0 (msg_data : mod_businessmessagereject_data)  =
    if ((match msg_data.mod_f_BusinessMessageReject_BusinessRejectRefID with
        | Some cap_string_length_check_var -> (good_string cap_string_length_check_var)
        | None -> true
    )
    ) then
        fields_are_good
    else
        (field_invalid "Field BusinessRejectRefID of Message BusinessMessageReject violates the constraint: \"validity constraint.\"")
;;

let check_field_mod_f_BusinessMessageReject_BusinessRejectRefID_outer (msg_data : mod_businessmessagereject_data)  =
    let check_field_mod_f_BusinessMessageReject_BusinessRejectRefID_inner0_result = check_field_mod_f_BusinessMessageReject_BusinessRejectRefID_inner0 msg_data in
    if check_field_mod_f_BusinessMessageReject_BusinessRejectRefID_inner0_result.is_invalid then
        check_field_mod_f_BusinessMessageReject_BusinessRejectRefID_inner0_result
    else
        fields_are_good
;;

let check_field_mod_f_BusinessMessageReject_BusinessRejectRefID (msg_data : mod_businessmessagereject_data)  =
    (match msg_data.mod_f_BusinessMessageReject_BusinessRejectRefID with
        | None -> fields_are_good
        | Some _ -> (check_field_mod_f_BusinessMessageReject_BusinessRejectRefID_outer msg_data)
    )
;;

let check_field_mod_f_BusinessMessageReject_BusinessRejectReason_inner0 (msg_data : mod_businessmessagereject_data)  =
    if (List.mem msg_data.mod_f_BusinessMessageReject_BusinessRejectReason (MOD_FIX_BusinessRejectReason_Other :: (MOD_FIX_BusinessRejectReason_Unknown :: (MOD_FIX_BusinessRejectReason_Unknown_Security :: (MOD_FIX_BusinessRejectReason_Unsupported_Message :: (MOD_FIX_BusinessRejectReason_Application_Not_Available :: (MOD_FIX_BusinessRejectReason_Conditionally_required_field_missing :: []))))))) then
        fields_are_good
    else
        (field_invalid "Field BusinessRejectReason of Message BusinessMessageReject violates the constraint: \" it in [ BusinessRejectReason.Other, BusinessRejectReason.Unknown, BusinessRejectReason.Unknown_Security, BusinessRejectReason.Unsupported_Message, BusinessRejectReason.Application_Not_Available, BusinessRejectReason.Conditionally_required_field_missing ]\"")
;;

let check_field_mod_f_BusinessMessageReject_BusinessRejectReason_outer (msg_data : mod_businessmessagereject_data)  =
    let check_field_mod_f_BusinessMessageReject_BusinessRejectReason_inner0_result = check_field_mod_f_BusinessMessageReject_BusinessRejectReason_inner0 msg_data in
    if check_field_mod_f_BusinessMessageReject_BusinessRejectReason_inner0_result.is_invalid then
        check_field_mod_f_BusinessMessageReject_BusinessRejectReason_inner0_result
    else
        fields_are_good
;;

let check_field_mod_f_BusinessMessageReject_BusinessRejectReason (msg_data : mod_businessmessagereject_data)  =
    check_field_mod_f_BusinessMessageReject_BusinessRejectReason_outer msg_data
;;

let check_field_mod_f_BusinessMessageReject_Text_inner0 (msg_data : mod_businessmessagereject_data)  =
    if ((match msg_data.mod_f_BusinessMessageReject_Text with
        | Some cap_string_length_check_var -> (good_string cap_string_length_check_var)
        | None -> true
    )
    ) then
        fields_are_good
    else
        (field_invalid "Field Text of Message BusinessMessageReject violates the constraint: \"validity constraint.\"")
;;

let check_field_mod_f_BusinessMessageReject_Text_outer (msg_data : mod_businessmessagereject_data)  =
    let check_field_mod_f_BusinessMessageReject_Text_inner0_result = check_field_mod_f_BusinessMessageReject_Text_inner0 msg_data in
    if check_field_mod_f_BusinessMessageReject_Text_inner0_result.is_invalid then
        check_field_mod_f_BusinessMessageReject_Text_inner0_result
    else
        fields_are_good
;;

let check_field_mod_f_BusinessMessageReject_Text (msg_data : mod_businessmessagereject_data)  =
    (match msg_data.mod_f_BusinessMessageReject_Text with
        | None -> fields_are_good
        | Some _ -> (check_field_mod_f_BusinessMessageReject_Text_outer msg_data)
    )
;;

let check_fields_BusinessMessageReject (msg_data : mod_businessmessagereject_data) (m_state : model_state)  =
    let mod_f_BusinessMessageReject_Text_result = check_field_mod_f_BusinessMessageReject_Text msg_data in
    if mod_f_BusinessMessageReject_Text_result.is_invalid then
        mod_f_BusinessMessageReject_Text_result
    else
        let mod_f_BusinessMessageReject_BusinessRejectReason_result = check_field_mod_f_BusinessMessageReject_BusinessRejectReason msg_data in
        if mod_f_BusinessMessageReject_BusinessRejectReason_result.is_invalid then
            mod_f_BusinessMessageReject_BusinessRejectReason_result
        else
            let mod_f_BusinessMessageReject_BusinessRejectRefID_result = check_field_mod_f_BusinessMessageReject_BusinessRejectRefID msg_data in
            if mod_f_BusinessMessageReject_BusinessRejectRefID_result.is_invalid then
                mod_f_BusinessMessageReject_BusinessRejectRefID_result
            else
                let mod_f_BusinessMessageReject_RefMsgTyp_result = check_field_mod_f_BusinessMessageReject_RefMsgTyp msg_data in
                if mod_f_BusinessMessageReject_RefMsgTyp_result.is_invalid then
                    mod_f_BusinessMessageReject_RefMsgTyp_result
                else
                    fields_are_good
;;

let check_field_mod_f_AllocationReport_AllocReportID_inner0 (msg_data : mod_allocationreport_data)  =
    if (good_string msg_data.mod_f_AllocationReport_AllocReportID) then
        fields_are_good
    else
        (field_invalid "Field AllocReportID of Message AllocationReport violates the constraint: \"validity constraint.\"")
;;

let check_field_mod_f_AllocationReport_AllocReportID_outer (msg_data : mod_allocationreport_data)  =
    let check_field_mod_f_AllocationReport_AllocReportID_inner0_result = check_field_mod_f_AllocationReport_AllocReportID_inner0 msg_data in
    if check_field_mod_f_AllocationReport_AllocReportID_inner0_result.is_invalid then
        check_field_mod_f_AllocationReport_AllocReportID_inner0_result
    else
        fields_are_good
;;

let check_field_mod_f_AllocationReport_AllocReportID (msg_data : mod_allocationreport_data)  =
    check_field_mod_f_AllocationReport_AllocReportID_outer msg_data
;;

let check_field_mod_f_AllocationReport_AllocID_inner0 (msg_data : mod_allocationreport_data)  =
    if ((match msg_data.mod_f_AllocationReport_AllocID with
        | Some cap_string_length_check_var -> (good_string cap_string_length_check_var)
        | None -> true
    )
    ) then
        fields_are_good
    else
        (field_invalid "Field AllocID of Message AllocationReport violates the constraint: \"validity constraint.\"")
;;

let check_field_mod_f_AllocationReport_AllocID_outer (msg_data : mod_allocationreport_data)  =
    let check_field_mod_f_AllocationReport_AllocID_inner0_result = check_field_mod_f_AllocationReport_AllocID_inner0 msg_data in
    if check_field_mod_f_AllocationReport_AllocID_inner0_result.is_invalid then
        check_field_mod_f_AllocationReport_AllocID_inner0_result
    else
        fields_are_good
;;

let check_field_mod_f_AllocationReport_AllocID (msg_data : mod_allocationreport_data)  =
    (match msg_data.mod_f_AllocationReport_AllocID with
        | None -> fields_are_good
        | Some _ -> (check_field_mod_f_AllocationReport_AllocID_outer msg_data)
    )
;;

let check_field_mod_f_AllocationReport_AllocTransType_inner0 (msg_data : mod_allocationreport_data)  =
    if (List.mem msg_data.mod_f_AllocationReport_AllocTransType (MOD_FIX_AllocTransType_New :: (MOD_FIX_AllocTransType_Replace :: (MOD_FIX_AllocTransType_Cancel :: [])))) then
        fields_are_good
    else
        (field_invalid "Field AllocTransType of Message AllocationReport violates the constraint: \" it in [ AllocTransType.New, AllocTransType.Replace, AllocTransType.Cancel ]\"")
;;

let check_field_mod_f_AllocationReport_AllocTransType_outer (msg_data : mod_allocationreport_data)  =
    let check_field_mod_f_AllocationReport_AllocTransType_inner0_result = check_field_mod_f_AllocationReport_AllocTransType_inner0 msg_data in
    if check_field_mod_f_AllocationReport_AllocTransType_inner0_result.is_invalid then
        check_field_mod_f_AllocationReport_AllocTransType_inner0_result
    else
        fields_are_good
;;

let check_field_mod_f_AllocationReport_AllocTransType (msg_data : mod_allocationreport_data)  =
    check_field_mod_f_AllocationReport_AllocTransType_outer msg_data
;;

let check_field_mod_f_AllocationReport_AllocReportRefID_inner0 (msg_data : mod_allocationreport_data)  =
    if ((match msg_data.mod_f_AllocationReport_AllocReportRefID with
        | Some cap_string_length_check_var -> (good_string cap_string_length_check_var)
        | None -> true
    )
    ) then
        fields_are_good
    else
        (field_invalid "Field AllocReportRefID of Message AllocationReport violates the constraint: \"validity constraint.\"")
;;

let check_field_mod_f_AllocationReport_AllocReportRefID_outer (msg_data : mod_allocationreport_data)  =
    let check_field_mod_f_AllocationReport_AllocReportRefID_inner0_result = check_field_mod_f_AllocationReport_AllocReportRefID_inner0 msg_data in
    if check_field_mod_f_AllocationReport_AllocReportRefID_inner0_result.is_invalid then
        check_field_mod_f_AllocationReport_AllocReportRefID_inner0_result
    else
        fields_are_good
;;

let check_field_mod_f_AllocationReport_AllocReportRefID (msg_data : mod_allocationreport_data)  =
    (match msg_data.mod_f_AllocationReport_AllocReportRefID with
        | None -> fields_are_good
        | Some _ -> (check_field_mod_f_AllocationReport_AllocReportRefID_outer msg_data)
    )
;;

let check_field_mod_f_AllocationReport_AllocCancReplaceReason_inner0 (msg_data : mod_allocationreport_data)  =
    if (List.mem msg_data.mod_f_AllocationReport_AllocCancReplaceReason ((Some MOD_FIX_AllocCancReplaceReason_Other) :: [])) then
        fields_are_good
    else
        (field_invalid "Field AllocCancReplaceReason of Message AllocationReport violates the constraint: \" it in [ AllocCancReplaceReason.Other ]\"")
;;

let check_field_mod_f_AllocationReport_AllocCancReplaceReason_outer (msg_data : mod_allocationreport_data)  =
    let check_field_mod_f_AllocationReport_AllocCancReplaceReason_inner0_result = check_field_mod_f_AllocationReport_AllocCancReplaceReason_inner0 msg_data in
    if check_field_mod_f_AllocationReport_AllocCancReplaceReason_inner0_result.is_invalid then
        check_field_mod_f_AllocationReport_AllocCancReplaceReason_inner0_result
    else
        fields_are_good
;;

let check_field_mod_f_AllocationReport_AllocCancReplaceReason (msg_data : mod_allocationreport_data)  =
    (match msg_data.mod_f_AllocationReport_AllocCancReplaceReason with
        | None -> fields_are_good
        | Some _ -> (check_field_mod_f_AllocationReport_AllocCancReplaceReason_outer msg_data)
    )
;;

let check_field_mod_f_AllocationReport_RefAllocID_inner0 (msg_data : mod_allocationreport_data)  =
    if ((match msg_data.mod_f_AllocationReport_RefAllocID with
        | Some cap_string_length_check_var -> (good_string cap_string_length_check_var)
        | None -> true
    )
    ) then
        fields_are_good
    else
        (field_invalid "Field RefAllocID of Message AllocationReport violates the constraint: \"validity constraint.\"")
;;

let check_field_mod_f_AllocationReport_RefAllocID_outer (msg_data : mod_allocationreport_data)  =
    let check_field_mod_f_AllocationReport_RefAllocID_inner0_result = check_field_mod_f_AllocationReport_RefAllocID_inner0 msg_data in
    if check_field_mod_f_AllocationReport_RefAllocID_inner0_result.is_invalid then
        check_field_mod_f_AllocationReport_RefAllocID_inner0_result
    else
        fields_are_good
;;

let check_field_mod_f_AllocationReport_RefAllocID (msg_data : mod_allocationreport_data)  =
    (match msg_data.mod_f_AllocationReport_RefAllocID with
        | None -> fields_are_good
        | Some _ -> (check_field_mod_f_AllocationReport_RefAllocID_outer msg_data)
    )
;;

let check_field_mod_f_AllocationReport_AllocReportType_inner0 (msg_data : mod_allocationreport_data)  =
    if (List.mem msg_data.mod_f_AllocationReport_AllocReportType (MOD_FIX_AllocReportType_Sellside_calculated_using_preliminary :: (MOD_FIX_AllocReportType_Sellside_calculated_without_preliminary :: []))) then
        fields_are_good
    else
        (field_invalid "Field AllocReportType of Message AllocationReport violates the constraint: \" it in [ AllocReportType.Sellside_calculated_using_preliminary, AllocReportType.Sellside_calculated_without_preliminary ]\"")
;;

let check_field_mod_f_AllocationReport_AllocReportType_outer (msg_data : mod_allocationreport_data)  =
    let check_field_mod_f_AllocationReport_AllocReportType_inner0_result = check_field_mod_f_AllocationReport_AllocReportType_inner0 msg_data in
    if check_field_mod_f_AllocationReport_AllocReportType_inner0_result.is_invalid then
        check_field_mod_f_AllocationReport_AllocReportType_inner0_result
    else
        fields_are_good
;;

let check_field_mod_f_AllocationReport_AllocReportType (msg_data : mod_allocationreport_data)  =
    check_field_mod_f_AllocationReport_AllocReportType_outer msg_data
;;

let check_field_mod_f_AllocationReport_AllocStatus_inner0 (msg_data : mod_allocationreport_data)  =
    if (List.mem msg_data.mod_f_AllocationReport_AllocStatus (MOD_FIX_AllocStatus_Accepted :: (MOD_FIX_AllocStatus_received__not_yet_processed_ :: []))) then
        fields_are_good
    else
        (field_invalid "Field AllocStatus of Message AllocationReport violates the constraint: \" it in [ AllocStatus.Accepted, AllocStatus.received__not_yet_processed_ ]\"")
;;

let check_field_mod_f_AllocationReport_AllocStatus_outer (msg_data : mod_allocationreport_data)  =
    let check_field_mod_f_AllocationReport_AllocStatus_inner0_result = check_field_mod_f_AllocationReport_AllocStatus_inner0 msg_data in
    if check_field_mod_f_AllocationReport_AllocStatus_inner0_result.is_invalid then
        check_field_mod_f_AllocationReport_AllocStatus_inner0_result
    else
        fields_are_good
;;

let check_field_mod_f_AllocationReport_AllocStatus (msg_data : mod_allocationreport_data)  =
    check_field_mod_f_AllocationReport_AllocStatus_outer msg_data
;;

let check_field_mod_f_AllocationReport_AllocNoOrdersType_inner0 (msg_data : mod_allocationreport_data)  =
    if (List.mem msg_data.mod_f_AllocationReport_AllocNoOrdersType (MOD_FIX_AllocNoOrdersType_Not_specified :: (MOD_FIX_AllocNoOrdersType_Explicit_list_provided :: []))) then
        fields_are_good
    else
        (field_invalid "Field AllocNoOrdersType of Message AllocationReport violates the constraint: \" it in [ AllocNoOrdersType.Not_specified, AllocNoOrdersType.Explicit_list_provided ]\"")
;;

let check_field_mod_f_AllocationReport_AllocNoOrdersType_outer (msg_data : mod_allocationreport_data)  =
    let check_field_mod_f_AllocationReport_AllocNoOrdersType_inner0_result = check_field_mod_f_AllocationReport_AllocNoOrdersType_inner0 msg_data in
    if check_field_mod_f_AllocationReport_AllocNoOrdersType_inner0_result.is_invalid then
        check_field_mod_f_AllocationReport_AllocNoOrdersType_inner0_result
    else
        fields_are_good
;;

let check_field_mod_f_AllocationReport_AllocNoOrdersType (msg_data : mod_allocationreport_data)  =
    check_field_mod_f_AllocationReport_AllocNoOrdersType_outer msg_data
;;

let check_field_mod_f_AllocationReport_OrdersGrp_inner0 (msg_data : mod_allocationreport_data)  =
    if (checkRGConsistency_OrdersGrp msg_data.mod_f_AllocationReport_OrdersGrp) then
        fields_are_good
    else
        (field_invalid "Field OrdersGrp of Message AllocationReport violates the constraint: \"Consistency Check for Repeating Group Type OrdersGrp.\"")
;;

let check_field_mod_f_AllocationReport_OrdersGrp_inner1 (msg_data : mod_allocationreport_data)  =
    if ((&&) ((match msg_data.mod_f_AllocationReport_OrdersGrp.rg_OrdersGrp_element_4 with
        | Some cap_e_OrdersGrp -> (checkRGConsistency_PartyIDsGrp cap_e_OrdersGrp.mod_f_OrdersGrp_Parties_PartyIDsGrp)
        | None -> true
    )
    ) ((&&) ((match msg_data.mod_f_AllocationReport_OrdersGrp.rg_OrdersGrp_element_3 with
        | Some cap_e_OrdersGrp -> (checkRGConsistency_PartyIDsGrp cap_e_OrdersGrp.mod_f_OrdersGrp_Parties_PartyIDsGrp)
        | None -> true
    )
    ) ((&&) ((match msg_data.mod_f_AllocationReport_OrdersGrp.rg_OrdersGrp_element_2 with
        | Some cap_e_OrdersGrp -> (checkRGConsistency_PartyIDsGrp cap_e_OrdersGrp.mod_f_OrdersGrp_Parties_PartyIDsGrp)
        | None -> true
    )
    ) ((&&) ((match msg_data.mod_f_AllocationReport_OrdersGrp.rg_OrdersGrp_element_1 with
        | Some cap_e_OrdersGrp -> (checkRGConsistency_PartyIDsGrp cap_e_OrdersGrp.mod_f_OrdersGrp_Parties_PartyIDsGrp)
        | None -> true
    )
    ) ((match msg_data.mod_f_AllocationReport_OrdersGrp.rg_OrdersGrp_element_0 with
        | Some cap_e_OrdersGrp -> (checkRGConsistency_PartyIDsGrp cap_e_OrdersGrp.mod_f_OrdersGrp_Parties_PartyIDsGrp)
        | None -> true
    )
    ))))) then
        fields_are_good
    else
        (field_invalid "Field OrdersGrp of Message AllocationReport violates the constraint: \"Consistency Check for Repeating Group Type PartyIDsGrp.\"")
;;

let check_field_mod_f_AllocationReport_OrdersGrp_inner2 (msg_data : mod_allocationreport_data)  =
    if ((&&) ((match msg_data.mod_f_AllocationReport_OrdersGrp.rg_OrdersGrp_element_4 with
        | Some cap_e_OrdersGrp -> ((&&) ((match cap_e_OrdersGrp.mod_f_OrdersGrp_Parties_PartyIDsGrp.rg_PartyIDsGrp_element_4 with
            | Some cap_e_Parties_PartyIDsGrp -> (checkRGConsistency_PartySubIDsGrp cap_e_Parties_PartyIDsGrp.mod_f_PartyIDsGrp_PartySubIDsGrp)
            | None -> true
        )
        ) ((&&) ((match cap_e_OrdersGrp.mod_f_OrdersGrp_Parties_PartyIDsGrp.rg_PartyIDsGrp_element_3 with
            | Some cap_e_Parties_PartyIDsGrp -> (checkRGConsistency_PartySubIDsGrp cap_e_Parties_PartyIDsGrp.mod_f_PartyIDsGrp_PartySubIDsGrp)
            | None -> true
        )
        ) ((&&) ((match cap_e_OrdersGrp.mod_f_OrdersGrp_Parties_PartyIDsGrp.rg_PartyIDsGrp_element_2 with
            | Some cap_e_Parties_PartyIDsGrp -> (checkRGConsistency_PartySubIDsGrp cap_e_Parties_PartyIDsGrp.mod_f_PartyIDsGrp_PartySubIDsGrp)
            | None -> true
        )
        ) ((&&) ((match cap_e_OrdersGrp.mod_f_OrdersGrp_Parties_PartyIDsGrp.rg_PartyIDsGrp_element_1 with
            | Some cap_e_Parties_PartyIDsGrp -> (checkRGConsistency_PartySubIDsGrp cap_e_Parties_PartyIDsGrp.mod_f_PartyIDsGrp_PartySubIDsGrp)
            | None -> true
        )
        ) ((match cap_e_OrdersGrp.mod_f_OrdersGrp_Parties_PartyIDsGrp.rg_PartyIDsGrp_element_0 with
            | Some cap_e_Parties_PartyIDsGrp -> (checkRGConsistency_PartySubIDsGrp cap_e_Parties_PartyIDsGrp.mod_f_PartyIDsGrp_PartySubIDsGrp)
            | None -> true
        )
        )))))
        | None -> true
    )
    ) ((&&) ((match msg_data.mod_f_AllocationReport_OrdersGrp.rg_OrdersGrp_element_3 with
        | Some cap_e_OrdersGrp -> ((&&) ((match cap_e_OrdersGrp.mod_f_OrdersGrp_Parties_PartyIDsGrp.rg_PartyIDsGrp_element_4 with
            | Some cap_e_Parties_PartyIDsGrp -> (checkRGConsistency_PartySubIDsGrp cap_e_Parties_PartyIDsGrp.mod_f_PartyIDsGrp_PartySubIDsGrp)
            | None -> true
        )
        ) ((&&) ((match cap_e_OrdersGrp.mod_f_OrdersGrp_Parties_PartyIDsGrp.rg_PartyIDsGrp_element_3 with
            | Some cap_e_Parties_PartyIDsGrp -> (checkRGConsistency_PartySubIDsGrp cap_e_Parties_PartyIDsGrp.mod_f_PartyIDsGrp_PartySubIDsGrp)
            | None -> true
        )
        ) ((&&) ((match cap_e_OrdersGrp.mod_f_OrdersGrp_Parties_PartyIDsGrp.rg_PartyIDsGrp_element_2 with
            | Some cap_e_Parties_PartyIDsGrp -> (checkRGConsistency_PartySubIDsGrp cap_e_Parties_PartyIDsGrp.mod_f_PartyIDsGrp_PartySubIDsGrp)
            | None -> true
        )
        ) ((&&) ((match cap_e_OrdersGrp.mod_f_OrdersGrp_Parties_PartyIDsGrp.rg_PartyIDsGrp_element_1 with
            | Some cap_e_Parties_PartyIDsGrp -> (checkRGConsistency_PartySubIDsGrp cap_e_Parties_PartyIDsGrp.mod_f_PartyIDsGrp_PartySubIDsGrp)
            | None -> true
        )
        ) ((match cap_e_OrdersGrp.mod_f_OrdersGrp_Parties_PartyIDsGrp.rg_PartyIDsGrp_element_0 with
            | Some cap_e_Parties_PartyIDsGrp -> (checkRGConsistency_PartySubIDsGrp cap_e_Parties_PartyIDsGrp.mod_f_PartyIDsGrp_PartySubIDsGrp)
            | None -> true
        )
        )))))
        | None -> true
    )
    ) ((&&) ((match msg_data.mod_f_AllocationReport_OrdersGrp.rg_OrdersGrp_element_2 with
        | Some cap_e_OrdersGrp -> ((&&) ((match cap_e_OrdersGrp.mod_f_OrdersGrp_Parties_PartyIDsGrp.rg_PartyIDsGrp_element_4 with
            | Some cap_e_Parties_PartyIDsGrp -> (checkRGConsistency_PartySubIDsGrp cap_e_Parties_PartyIDsGrp.mod_f_PartyIDsGrp_PartySubIDsGrp)
            | None -> true
        )
        ) ((&&) ((match cap_e_OrdersGrp.mod_f_OrdersGrp_Parties_PartyIDsGrp.rg_PartyIDsGrp_element_3 with
            | Some cap_e_Parties_PartyIDsGrp -> (checkRGConsistency_PartySubIDsGrp cap_e_Parties_PartyIDsGrp.mod_f_PartyIDsGrp_PartySubIDsGrp)
            | None -> true
        )
        ) ((&&) ((match cap_e_OrdersGrp.mod_f_OrdersGrp_Parties_PartyIDsGrp.rg_PartyIDsGrp_element_2 with
            | Some cap_e_Parties_PartyIDsGrp -> (checkRGConsistency_PartySubIDsGrp cap_e_Parties_PartyIDsGrp.mod_f_PartyIDsGrp_PartySubIDsGrp)
            | None -> true
        )
        ) ((&&) ((match cap_e_OrdersGrp.mod_f_OrdersGrp_Parties_PartyIDsGrp.rg_PartyIDsGrp_element_1 with
            | Some cap_e_Parties_PartyIDsGrp -> (checkRGConsistency_PartySubIDsGrp cap_e_Parties_PartyIDsGrp.mod_f_PartyIDsGrp_PartySubIDsGrp)
            | None -> true
        )
        ) ((match cap_e_OrdersGrp.mod_f_OrdersGrp_Parties_PartyIDsGrp.rg_PartyIDsGrp_element_0 with
            | Some cap_e_Parties_PartyIDsGrp -> (checkRGConsistency_PartySubIDsGrp cap_e_Parties_PartyIDsGrp.mod_f_PartyIDsGrp_PartySubIDsGrp)
            | None -> true
        )
        )))))
        | None -> true
    )
    ) ((&&) ((match msg_data.mod_f_AllocationReport_OrdersGrp.rg_OrdersGrp_element_1 with
        | Some cap_e_OrdersGrp -> ((&&) ((match cap_e_OrdersGrp.mod_f_OrdersGrp_Parties_PartyIDsGrp.rg_PartyIDsGrp_element_4 with
            | Some cap_e_Parties_PartyIDsGrp -> (checkRGConsistency_PartySubIDsGrp cap_e_Parties_PartyIDsGrp.mod_f_PartyIDsGrp_PartySubIDsGrp)
            | None -> true
        )
        ) ((&&) ((match cap_e_OrdersGrp.mod_f_OrdersGrp_Parties_PartyIDsGrp.rg_PartyIDsGrp_element_3 with
            | Some cap_e_Parties_PartyIDsGrp -> (checkRGConsistency_PartySubIDsGrp cap_e_Parties_PartyIDsGrp.mod_f_PartyIDsGrp_PartySubIDsGrp)
            | None -> true
        )
        ) ((&&) ((match cap_e_OrdersGrp.mod_f_OrdersGrp_Parties_PartyIDsGrp.rg_PartyIDsGrp_element_2 with
            | Some cap_e_Parties_PartyIDsGrp -> (checkRGConsistency_PartySubIDsGrp cap_e_Parties_PartyIDsGrp.mod_f_PartyIDsGrp_PartySubIDsGrp)
            | None -> true
        )
        ) ((&&) ((match cap_e_OrdersGrp.mod_f_OrdersGrp_Parties_PartyIDsGrp.rg_PartyIDsGrp_element_1 with
            | Some cap_e_Parties_PartyIDsGrp -> (checkRGConsistency_PartySubIDsGrp cap_e_Parties_PartyIDsGrp.mod_f_PartyIDsGrp_PartySubIDsGrp)
            | None -> true
        )
        ) ((match cap_e_OrdersGrp.mod_f_OrdersGrp_Parties_PartyIDsGrp.rg_PartyIDsGrp_element_0 with
            | Some cap_e_Parties_PartyIDsGrp -> (checkRGConsistency_PartySubIDsGrp cap_e_Parties_PartyIDsGrp.mod_f_PartyIDsGrp_PartySubIDsGrp)
            | None -> true
        )
        )))))
        | None -> true
    )
    ) ((match msg_data.mod_f_AllocationReport_OrdersGrp.rg_OrdersGrp_element_0 with
        | Some cap_e_OrdersGrp -> ((&&) ((match cap_e_OrdersGrp.mod_f_OrdersGrp_Parties_PartyIDsGrp.rg_PartyIDsGrp_element_4 with
            | Some cap_e_Parties_PartyIDsGrp -> (checkRGConsistency_PartySubIDsGrp cap_e_Parties_PartyIDsGrp.mod_f_PartyIDsGrp_PartySubIDsGrp)
            | None -> true
        )
        ) ((&&) ((match cap_e_OrdersGrp.mod_f_OrdersGrp_Parties_PartyIDsGrp.rg_PartyIDsGrp_element_3 with
            | Some cap_e_Parties_PartyIDsGrp -> (checkRGConsistency_PartySubIDsGrp cap_e_Parties_PartyIDsGrp.mod_f_PartyIDsGrp_PartySubIDsGrp)
            | None -> true
        )
        ) ((&&) ((match cap_e_OrdersGrp.mod_f_OrdersGrp_Parties_PartyIDsGrp.rg_PartyIDsGrp_element_2 with
            | Some cap_e_Parties_PartyIDsGrp -> (checkRGConsistency_PartySubIDsGrp cap_e_Parties_PartyIDsGrp.mod_f_PartyIDsGrp_PartySubIDsGrp)
            | None -> true
        )
        ) ((&&) ((match cap_e_OrdersGrp.mod_f_OrdersGrp_Parties_PartyIDsGrp.rg_PartyIDsGrp_element_1 with
            | Some cap_e_Parties_PartyIDsGrp -> (checkRGConsistency_PartySubIDsGrp cap_e_Parties_PartyIDsGrp.mod_f_PartyIDsGrp_PartySubIDsGrp)
            | None -> true
        )
        ) ((match cap_e_OrdersGrp.mod_f_OrdersGrp_Parties_PartyIDsGrp.rg_PartyIDsGrp_element_0 with
            | Some cap_e_Parties_PartyIDsGrp -> (checkRGConsistency_PartySubIDsGrp cap_e_Parties_PartyIDsGrp.mod_f_PartyIDsGrp_PartySubIDsGrp)
            | None -> true
        )
        )))))
        | None -> true
    )
    ))))) then
        fields_are_good
    else
        (field_invalid "Field OrdersGrp of Message AllocationReport violates the constraint: \"Consistency Check for Repeating Group Type PartySubIDsGrp.\"")
;;

let check_field_mod_f_AllocationReport_OrdersGrp_inner3 (msg_data : mod_allocationreport_data)  =
    if ((&&) ((match msg_data.mod_f_AllocationReport_OrdersGrp.rg_OrdersGrp_element_4 with
        | Some cap_e_OrdersGrp -> (checkRGConsistency_SecurityAltIDGrp cap_e_OrdersGrp.mod_f_OrdersGrp_Instrument_SecurityAltIDGrp)
        | None -> true
    )
    ) ((&&) ((match msg_data.mod_f_AllocationReport_OrdersGrp.rg_OrdersGrp_element_3 with
        | Some cap_e_OrdersGrp -> (checkRGConsistency_SecurityAltIDGrp cap_e_OrdersGrp.mod_f_OrdersGrp_Instrument_SecurityAltIDGrp)
        | None -> true
    )
    ) ((&&) ((match msg_data.mod_f_AllocationReport_OrdersGrp.rg_OrdersGrp_element_2 with
        | Some cap_e_OrdersGrp -> (checkRGConsistency_SecurityAltIDGrp cap_e_OrdersGrp.mod_f_OrdersGrp_Instrument_SecurityAltIDGrp)
        | None -> true
    )
    ) ((&&) ((match msg_data.mod_f_AllocationReport_OrdersGrp.rg_OrdersGrp_element_1 with
        | Some cap_e_OrdersGrp -> (checkRGConsistency_SecurityAltIDGrp cap_e_OrdersGrp.mod_f_OrdersGrp_Instrument_SecurityAltIDGrp)
        | None -> true
    )
    ) ((match msg_data.mod_f_AllocationReport_OrdersGrp.rg_OrdersGrp_element_0 with
        | Some cap_e_OrdersGrp -> (checkRGConsistency_SecurityAltIDGrp cap_e_OrdersGrp.mod_f_OrdersGrp_Instrument_SecurityAltIDGrp)
        | None -> true
    )
    ))))) then
        fields_are_good
    else
        (field_invalid "Field OrdersGrp of Message AllocationReport violates the constraint: \"Consistency Check for Repeating Group Type SecurityAltIDGrp.\"")
;;

let check_field_mod_f_AllocationReport_OrdersGrp_outer (msg_data : mod_allocationreport_data)  =
    let check_field_mod_f_AllocationReport_OrdersGrp_inner3_result = check_field_mod_f_AllocationReport_OrdersGrp_inner3 msg_data in
    if check_field_mod_f_AllocationReport_OrdersGrp_inner3_result.is_invalid then
        check_field_mod_f_AllocationReport_OrdersGrp_inner3_result
    else
        let check_field_mod_f_AllocationReport_OrdersGrp_inner2_result = check_field_mod_f_AllocationReport_OrdersGrp_inner2 msg_data in
        if check_field_mod_f_AllocationReport_OrdersGrp_inner2_result.is_invalid then
            check_field_mod_f_AllocationReport_OrdersGrp_inner2_result
        else
            let check_field_mod_f_AllocationReport_OrdersGrp_inner1_result = check_field_mod_f_AllocationReport_OrdersGrp_inner1 msg_data in
            if check_field_mod_f_AllocationReport_OrdersGrp_inner1_result.is_invalid then
                check_field_mod_f_AllocationReport_OrdersGrp_inner1_result
            else
                let check_field_mod_f_AllocationReport_OrdersGrp_inner0_result = check_field_mod_f_AllocationReport_OrdersGrp_inner0 msg_data in
                if check_field_mod_f_AllocationReport_OrdersGrp_inner0_result.is_invalid then
                    check_field_mod_f_AllocationReport_OrdersGrp_inner0_result
                else
                    fields_are_good
;;

let check_field_mod_f_AllocationReport_OrdersGrp (msg_data : mod_allocationreport_data)  =
    check_field_mod_f_AllocationReport_OrdersGrp_outer msg_data
;;

let check_field_mod_f_AllocationReport_ExecsGrp_inner0 (msg_data : mod_allocationreport_data)  =
    if (checkRGConsistency_ExecsGrp msg_data.mod_f_AllocationReport_ExecsGrp) then
        fields_are_good
    else
        (field_invalid "Field ExecsGrp of Message AllocationReport violates the constraint: \"Consistency Check for Repeating Group Type ExecsGrp.\"")
;;

let check_field_mod_f_AllocationReport_ExecsGrp_outer (msg_data : mod_allocationreport_data)  =
    let check_field_mod_f_AllocationReport_ExecsGrp_inner0_result = check_field_mod_f_AllocationReport_ExecsGrp_inner0 msg_data in
    if check_field_mod_f_AllocationReport_ExecsGrp_inner0_result.is_invalid then
        check_field_mod_f_AllocationReport_ExecsGrp_inner0_result
    else
        fields_are_good
;;

let check_field_mod_f_AllocationReport_ExecsGrp (msg_data : mod_allocationreport_data)  =
    check_field_mod_f_AllocationReport_ExecsGrp_outer msg_data
;;

let check_field_mod_f_AllocationReport_Instrument_CFICode_inner0 (msg_data : mod_allocationreport_data)  =
    if (good_string msg_data.mod_f_AllocationReport_Instrument_CFICode) then
        fields_are_good
    else
        (field_invalid "Field CFICode of Message AllocationReport violates the constraint: \"validity constraint.\"")
;;

let check_field_mod_f_AllocationReport_Instrument_CFICode_outer (msg_data : mod_allocationreport_data)  =
    let check_field_mod_f_AllocationReport_Instrument_CFICode_inner0_result = check_field_mod_f_AllocationReport_Instrument_CFICode_inner0 msg_data in
    if check_field_mod_f_AllocationReport_Instrument_CFICode_inner0_result.is_invalid then
        check_field_mod_f_AllocationReport_Instrument_CFICode_inner0_result
    else
        fields_are_good
;;

let check_field_mod_f_AllocationReport_Instrument_CFICode (msg_data : mod_allocationreport_data)  =
    check_field_mod_f_AllocationReport_Instrument_CFICode_outer msg_data
;;

let check_field_mod_f_AllocationReport_QtyType_inner0 (msg_data : mod_allocationreport_data)  =
    if (List.mem msg_data.mod_f_AllocationReport_QtyType ((Some MOD_FIX_QtyType_units__shares__par__currency___Always_interpreted_as_par_by_MarketAxess_) :: [])) then
        fields_are_good
    else
        (field_invalid "Field QtyType of Message AllocationReport violates the constraint: \" it in [ QtyType.units__shares__par__currency___Always_interpreted_as_par_by_MarketAxess_ ]\"")
;;

let check_field_mod_f_AllocationReport_QtyType_outer (msg_data : mod_allocationreport_data)  =
    let check_field_mod_f_AllocationReport_QtyType_inner0_result = check_field_mod_f_AllocationReport_QtyType_inner0 msg_data in
    if check_field_mod_f_AllocationReport_QtyType_inner0_result.is_invalid then
        check_field_mod_f_AllocationReport_QtyType_inner0_result
    else
        fields_are_good
;;

let check_field_mod_f_AllocationReport_QtyType (msg_data : mod_allocationreport_data)  =
    (match msg_data.mod_f_AllocationReport_QtyType with
        | None -> fields_are_good
        | Some _ -> (check_field_mod_f_AllocationReport_QtyType_outer msg_data)
    )
;;

let check_field_mod_f_AllocationReport_PriceType_inner0 (msg_data : mod_allocationreport_data)  =
    if (List.mem msg_data.mod_f_AllocationReport_PriceType ((Some MOD_FIX_PriceType_Percentage) :: ((Some MOD_FIX_PriceType_Spread) :: ((Some MOD_FIX_PriceType_Yield) :: [])))) then
        fields_are_good
    else
        (field_invalid "Field PriceType of Message AllocationReport violates the constraint: \" it in [ PriceType.Percentage, PriceType.Spread, PriceType.Yield ]\"")
;;

let check_field_mod_f_AllocationReport_PriceType_outer (msg_data : mod_allocationreport_data)  =
    let check_field_mod_f_AllocationReport_PriceType_inner0_result = check_field_mod_f_AllocationReport_PriceType_inner0 msg_data in
    if check_field_mod_f_AllocationReport_PriceType_inner0_result.is_invalid then
        check_field_mod_f_AllocationReport_PriceType_inner0_result
    else
        fields_are_good
;;

let check_field_mod_f_AllocationReport_PriceType (msg_data : mod_allocationreport_data)  =
    (match msg_data.mod_f_AllocationReport_PriceType with
        | None -> fields_are_good
        | Some _ -> (check_field_mod_f_AllocationReport_PriceType_outer msg_data)
    )
;;

let check_field_mod_f_AllocationReport_Currency_inner0 (msg_data : mod_allocationreport_data)  =
    if ((match msg_data.mod_f_AllocationReport_Currency with
        | Some cap_string_length_check_var -> (good_string cap_string_length_check_var)
        | None -> true
    )
    ) then
        fields_are_good
    else
        (field_invalid "Field Currency of Message AllocationReport violates the constraint: \"validity constraint.\"")
;;

let check_field_mod_f_AllocationReport_Currency_outer (msg_data : mod_allocationreport_data)  =
    let check_field_mod_f_AllocationReport_Currency_inner0_result = check_field_mod_f_AllocationReport_Currency_inner0 msg_data in
    if check_field_mod_f_AllocationReport_Currency_inner0_result.is_invalid then
        check_field_mod_f_AllocationReport_Currency_inner0_result
    else
        fields_are_good
;;

let check_field_mod_f_AllocationReport_Currency (msg_data : mod_allocationreport_data)  =
    (match msg_data.mod_f_AllocationReport_Currency with
        | None -> fields_are_good
        | Some _ -> (check_field_mod_f_AllocationReport_Currency_outer msg_data)
    )
;;

let check_field_mod_f_AllocationReport_Parties_PartyIDsGrp_inner0 (msg_data : mod_allocationreport_data)  =
    if (checkRGConsistency_PartyIDsGrp msg_data.mod_f_AllocationReport_Parties_PartyIDsGrp) then
        fields_are_good
    else
        (field_invalid "Field PartyIDsGrp of Message AllocationReport violates the constraint: \"Consistency Check for Repeating Group Type PartyIDsGrp.\"")
;;

let check_field_mod_f_AllocationReport_Parties_PartyIDsGrp_inner1 (msg_data : mod_allocationreport_data)  =
    if ((&&) ((match msg_data.mod_f_AllocationReport_Parties_PartyIDsGrp.rg_PartyIDsGrp_element_4 with
        | Some cap_e_Parties_PartyIDsGrp -> (checkRGConsistency_PartySubIDsGrp cap_e_Parties_PartyIDsGrp.mod_f_PartyIDsGrp_PartySubIDsGrp)
        | None -> true
    )
    ) ((&&) ((match msg_data.mod_f_AllocationReport_Parties_PartyIDsGrp.rg_PartyIDsGrp_element_3 with
        | Some cap_e_Parties_PartyIDsGrp -> (checkRGConsistency_PartySubIDsGrp cap_e_Parties_PartyIDsGrp.mod_f_PartyIDsGrp_PartySubIDsGrp)
        | None -> true
    )
    ) ((&&) ((match msg_data.mod_f_AllocationReport_Parties_PartyIDsGrp.rg_PartyIDsGrp_element_2 with
        | Some cap_e_Parties_PartyIDsGrp -> (checkRGConsistency_PartySubIDsGrp cap_e_Parties_PartyIDsGrp.mod_f_PartyIDsGrp_PartySubIDsGrp)
        | None -> true
    )
    ) ((&&) ((match msg_data.mod_f_AllocationReport_Parties_PartyIDsGrp.rg_PartyIDsGrp_element_1 with
        | Some cap_e_Parties_PartyIDsGrp -> (checkRGConsistency_PartySubIDsGrp cap_e_Parties_PartyIDsGrp.mod_f_PartyIDsGrp_PartySubIDsGrp)
        | None -> true
    )
    ) ((match msg_data.mod_f_AllocationReport_Parties_PartyIDsGrp.rg_PartyIDsGrp_element_0 with
        | Some cap_e_Parties_PartyIDsGrp -> (checkRGConsistency_PartySubIDsGrp cap_e_Parties_PartyIDsGrp.mod_f_PartyIDsGrp_PartySubIDsGrp)
        | None -> true
    )
    ))))) then
        fields_are_good
    else
        (field_invalid "Field PartyIDsGrp of Message AllocationReport violates the constraint: \"Consistency Check for Repeating Group Type PartySubIDsGrp.\"")
;;

let check_field_mod_f_AllocationReport_Parties_PartyIDsGrp_outer (msg_data : mod_allocationreport_data)  =
    let check_field_mod_f_AllocationReport_Parties_PartyIDsGrp_inner1_result = check_field_mod_f_AllocationReport_Parties_PartyIDsGrp_inner1 msg_data in
    if check_field_mod_f_AllocationReport_Parties_PartyIDsGrp_inner1_result.is_invalid then
        check_field_mod_f_AllocationReport_Parties_PartyIDsGrp_inner1_result
    else
        let check_field_mod_f_AllocationReport_Parties_PartyIDsGrp_inner0_result = check_field_mod_f_AllocationReport_Parties_PartyIDsGrp_inner0 msg_data in
        if check_field_mod_f_AllocationReport_Parties_PartyIDsGrp_inner0_result.is_invalid then
            check_field_mod_f_AllocationReport_Parties_PartyIDsGrp_inner0_result
        else
            fields_are_good
;;

let check_field_mod_f_AllocationReport_Parties_PartyIDsGrp (msg_data : mod_allocationreport_data)  =
    check_field_mod_f_AllocationReport_Parties_PartyIDsGrp_outer msg_data
;;

let check_field_mod_f_AllocationReport_Text_inner0 (msg_data : mod_allocationreport_data)  =
    if ((match msg_data.mod_f_AllocationReport_Text with
        | Some cap_string_length_check_var -> (good_string cap_string_length_check_var)
        | None -> true
    )
    ) then
        fields_are_good
    else
        (field_invalid "Field Text of Message AllocationReport violates the constraint: \"validity constraint.\"")
;;

let check_field_mod_f_AllocationReport_Text_outer (msg_data : mod_allocationreport_data)  =
    let check_field_mod_f_AllocationReport_Text_inner0_result = check_field_mod_f_AllocationReport_Text_inner0 msg_data in
    if check_field_mod_f_AllocationReport_Text_inner0_result.is_invalid then
        check_field_mod_f_AllocationReport_Text_inner0_result
    else
        fields_are_good
;;

let check_field_mod_f_AllocationReport_Text (msg_data : mod_allocationreport_data)  =
    (match msg_data.mod_f_AllocationReport_Text with
        | None -> fields_are_good
        | Some _ -> (check_field_mod_f_AllocationReport_Text_outer msg_data)
    )
;;

let check_field_mod_f_AllocationReport_YieldType_inner0 (msg_data : mod_allocationreport_data)  =
    if (List.mem msg_data.mod_f_AllocationReport_YieldType ((Some MOD_FIX_YieldType_CALL) :: ((Some MOD_FIX_YieldType_MATURITY) :: ((Some MOD_FIX_YieldType_PUT) :: [])))) then
        fields_are_good
    else
        (field_invalid "Field YieldType of Message AllocationReport violates the constraint: \" it in [ YieldType.CALL, YieldType.MATURITY, YieldType.PUT ]\"")
;;

let check_field_mod_f_AllocationReport_YieldType_outer (msg_data : mod_allocationreport_data)  =
    let check_field_mod_f_AllocationReport_YieldType_inner0_result = check_field_mod_f_AllocationReport_YieldType_inner0 msg_data in
    if check_field_mod_f_AllocationReport_YieldType_inner0_result.is_invalid then
        check_field_mod_f_AllocationReport_YieldType_inner0_result
    else
        fields_are_good
;;

let check_field_mod_f_AllocationReport_YieldType (msg_data : mod_allocationreport_data)  =
    (match msg_data.mod_f_AllocationReport_YieldType with
        | None -> fields_are_good
        | Some _ -> (check_field_mod_f_AllocationReport_YieldType_outer msg_data)
    )
;;

let check_field_mod_f_AllocationReport_AllocsGrp_inner0 (msg_data : mod_allocationreport_data)  =
    if (checkRGConsistency_AllocsGrp msg_data.mod_f_AllocationReport_AllocsGrp) then
        fields_are_good
    else
        (field_invalid "Field AllocsGrp of Message AllocationReport violates the constraint: \"Consistency Check for Repeating Group Type AllocsGrp.\"")
;;

let check_field_mod_f_AllocationReport_AllocsGrp_outer (msg_data : mod_allocationreport_data)  =
    let check_field_mod_f_AllocationReport_AllocsGrp_inner0_result = check_field_mod_f_AllocationReport_AllocsGrp_inner0 msg_data in
    if check_field_mod_f_AllocationReport_AllocsGrp_inner0_result.is_invalid then
        check_field_mod_f_AllocationReport_AllocsGrp_inner0_result
    else
        fields_are_good
;;

let check_field_mod_f_AllocationReport_AllocsGrp (msg_data : mod_allocationreport_data)  =
    check_field_mod_f_AllocationReport_AllocsGrp_outer msg_data
;;

let check_field_mod_f_AllocationReport_Notes_inner0 (msg_data : mod_allocationreport_data)  =
    if ((match msg_data.mod_f_AllocationReport_Notes with
        | Some cap_string_length_check_var -> (good_string cap_string_length_check_var)
        | None -> true
    )
    ) then
        fields_are_good
    else
        (field_invalid "Field Notes of Message AllocationReport violates the constraint: \"validity constraint.\"")
;;

let check_field_mod_f_AllocationReport_Notes_outer (msg_data : mod_allocationreport_data)  =
    let check_field_mod_f_AllocationReport_Notes_inner0_result = check_field_mod_f_AllocationReport_Notes_inner0 msg_data in
    if check_field_mod_f_AllocationReport_Notes_inner0_result.is_invalid then
        check_field_mod_f_AllocationReport_Notes_inner0_result
    else
        fields_are_good
;;

let check_field_mod_f_AllocationReport_Notes (msg_data : mod_allocationreport_data)  =
    (match msg_data.mod_f_AllocationReport_Notes with
        | None -> fields_are_good
        | Some _ -> (check_field_mod_f_AllocationReport_Notes_outer msg_data)
    )
;;

let check_field_mod_f_AllocationReport_MKTXPricingProcess_inner0 (msg_data : mod_allocationreport_data)  =
    if (List.mem msg_data.mod_f_AllocationReport_MKTXPricingProcess ((Some MOD_FIX_MKTXPricingProcess_Phone_Spot) :: ((Some MOD_FIX_MKTXPricingProcess_OneStep) :: ((Some MOD_FIX_MKTXPricingProcess_Standard) :: ((Some MOD_FIX_MKTXPricingProcess_Delayed_Spot) :: []))))) then
        fields_are_good
    else
        (field_invalid "Field MKTXPricingProcess of Message AllocationReport violates the constraint: \" it in [ MKTXPricingProcess.Phone_Spot, MKTXPricingProcess.OneStep, MKTXPricingProcess.Standard, MKTXPricingProcess.Delayed_Spot ]\"")
;;

let check_field_mod_f_AllocationReport_MKTXPricingProcess_outer (msg_data : mod_allocationreport_data)  =
    let check_field_mod_f_AllocationReport_MKTXPricingProcess_inner0_result = check_field_mod_f_AllocationReport_MKTXPricingProcess_inner0 msg_data in
    if check_field_mod_f_AllocationReport_MKTXPricingProcess_inner0_result.is_invalid then
        check_field_mod_f_AllocationReport_MKTXPricingProcess_inner0_result
    else
        fields_are_good
;;

let check_field_mod_f_AllocationReport_MKTXPricingProcess (msg_data : mod_allocationreport_data)  =
    (match msg_data.mod_f_AllocationReport_MKTXPricingProcess with
        | None -> fields_are_good
        | Some _ -> (check_field_mod_f_AllocationReport_MKTXPricingProcess_outer msg_data)
    )
;;

let check_fields_AllocationReport (msg_data : mod_allocationreport_data) (m_state : model_state)  =
    let mod_f_AllocationReport_MKTXPricingProcess_result = check_field_mod_f_AllocationReport_MKTXPricingProcess msg_data in
    if mod_f_AllocationReport_MKTXPricingProcess_result.is_invalid then
        mod_f_AllocationReport_MKTXPricingProcess_result
    else
        let mod_f_AllocationReport_Notes_result = check_field_mod_f_AllocationReport_Notes msg_data in
        if mod_f_AllocationReport_Notes_result.is_invalid then
            mod_f_AllocationReport_Notes_result
        else
            let mod_f_AllocationReport_AllocsGrp_result = check_field_mod_f_AllocationReport_AllocsGrp msg_data in
            if mod_f_AllocationReport_AllocsGrp_result.is_invalid then
                mod_f_AllocationReport_AllocsGrp_result
            else
                let mod_f_AllocationReport_YieldType_result = check_field_mod_f_AllocationReport_YieldType msg_data in
                if mod_f_AllocationReport_YieldType_result.is_invalid then
                    mod_f_AllocationReport_YieldType_result
                else
                    let mod_f_AllocationReport_Text_result = check_field_mod_f_AllocationReport_Text msg_data in
                    if mod_f_AllocationReport_Text_result.is_invalid then
                        mod_f_AllocationReport_Text_result
                    else
                        let mod_f_AllocationReport_Parties_PartyIDsGrp_result = check_field_mod_f_AllocationReport_Parties_PartyIDsGrp msg_data in
                        if mod_f_AllocationReport_Parties_PartyIDsGrp_result.is_invalid then
                            mod_f_AllocationReport_Parties_PartyIDsGrp_result
                        else
                            let mod_f_AllocationReport_Currency_result = check_field_mod_f_AllocationReport_Currency msg_data in
                            if mod_f_AllocationReport_Currency_result.is_invalid then
                                mod_f_AllocationReport_Currency_result
                            else
                                let mod_f_AllocationReport_PriceType_result = check_field_mod_f_AllocationReport_PriceType msg_data in
                                if mod_f_AllocationReport_PriceType_result.is_invalid then
                                    mod_f_AllocationReport_PriceType_result
                                else
                                    let mod_f_AllocationReport_QtyType_result = check_field_mod_f_AllocationReport_QtyType msg_data in
                                    if mod_f_AllocationReport_QtyType_result.is_invalid then
                                        mod_f_AllocationReport_QtyType_result
                                    else
                                        let mod_f_AllocationReport_Instrument_CFICode_result = check_field_mod_f_AllocationReport_Instrument_CFICode msg_data in
                                        if mod_f_AllocationReport_Instrument_CFICode_result.is_invalid then
                                            mod_f_AllocationReport_Instrument_CFICode_result
                                        else
                                            let mod_f_AllocationReport_ExecsGrp_result = check_field_mod_f_AllocationReport_ExecsGrp msg_data in
                                            if mod_f_AllocationReport_ExecsGrp_result.is_invalid then
                                                mod_f_AllocationReport_ExecsGrp_result
                                            else
                                                let mod_f_AllocationReport_OrdersGrp_result = check_field_mod_f_AllocationReport_OrdersGrp msg_data in
                                                if mod_f_AllocationReport_OrdersGrp_result.is_invalid then
                                                    mod_f_AllocationReport_OrdersGrp_result
                                                else
                                                    let mod_f_AllocationReport_AllocNoOrdersType_result = check_field_mod_f_AllocationReport_AllocNoOrdersType msg_data in
                                                    if mod_f_AllocationReport_AllocNoOrdersType_result.is_invalid then
                                                        mod_f_AllocationReport_AllocNoOrdersType_result
                                                    else
                                                        let mod_f_AllocationReport_AllocStatus_result = check_field_mod_f_AllocationReport_AllocStatus msg_data in
                                                        if mod_f_AllocationReport_AllocStatus_result.is_invalid then
                                                            mod_f_AllocationReport_AllocStatus_result
                                                        else
                                                            let mod_f_AllocationReport_AllocReportType_result = check_field_mod_f_AllocationReport_AllocReportType msg_data in
                                                            if mod_f_AllocationReport_AllocReportType_result.is_invalid then
                                                                mod_f_AllocationReport_AllocReportType_result
                                                            else
                                                                let mod_f_AllocationReport_RefAllocID_result = check_field_mod_f_AllocationReport_RefAllocID msg_data in
                                                                if mod_f_AllocationReport_RefAllocID_result.is_invalid then
                                                                    mod_f_AllocationReport_RefAllocID_result
                                                                else
                                                                    let mod_f_AllocationReport_AllocCancReplaceReason_result = check_field_mod_f_AllocationReport_AllocCancReplaceReason msg_data in
                                                                    if mod_f_AllocationReport_AllocCancReplaceReason_result.is_invalid then
                                                                        mod_f_AllocationReport_AllocCancReplaceReason_result
                                                                    else
                                                                        let mod_f_AllocationReport_AllocReportRefID_result = check_field_mod_f_AllocationReport_AllocReportRefID msg_data in
                                                                        if mod_f_AllocationReport_AllocReportRefID_result.is_invalid then
                                                                            mod_f_AllocationReport_AllocReportRefID_result
                                                                        else
                                                                            let mod_f_AllocationReport_AllocTransType_result = check_field_mod_f_AllocationReport_AllocTransType msg_data in
                                                                            if mod_f_AllocationReport_AllocTransType_result.is_invalid then
                                                                                mod_f_AllocationReport_AllocTransType_result
                                                                            else
                                                                                let mod_f_AllocationReport_AllocID_result = check_field_mod_f_AllocationReport_AllocID msg_data in
                                                                                if mod_f_AllocationReport_AllocID_result.is_invalid then
                                                                                    mod_f_AllocationReport_AllocID_result
                                                                                else
                                                                                    let mod_f_AllocationReport_AllocReportID_result = check_field_mod_f_AllocationReport_AllocReportID msg_data in
                                                                                    if mod_f_AllocationReport_AllocReportID_result.is_invalid then
                                                                                        mod_f_AllocationReport_AllocReportID_result
                                                                                    else
                                                                                        fields_are_good
;;

let check_field_mod_f_AllocationReportACK_AllocReportID_inner0 (msg_data : mod_allocationreportack_data)  =
    if (good_string msg_data.mod_f_AllocationReportACK_AllocReportID) then
        fields_are_good
    else
        (field_invalid "Field AllocReportID of Message AllocationReportACK violates the constraint: \"validity constraint.\"")
;;

let check_field_mod_f_AllocationReportACK_AllocReportID_outer (msg_data : mod_allocationreportack_data)  =
    let check_field_mod_f_AllocationReportACK_AllocReportID_inner0_result = check_field_mod_f_AllocationReportACK_AllocReportID_inner0 msg_data in
    if check_field_mod_f_AllocationReportACK_AllocReportID_inner0_result.is_invalid then
        check_field_mod_f_AllocationReportACK_AllocReportID_inner0_result
    else
        fields_are_good
;;

let check_field_mod_f_AllocationReportACK_AllocReportID (msg_data : mod_allocationreportack_data)  =
    check_field_mod_f_AllocationReportACK_AllocReportID_outer msg_data
;;

let check_field_mod_f_AllocationReportACK_AllocID_inner0 (msg_data : mod_allocationreportack_data)  =
    if (good_string msg_data.mod_f_AllocationReportACK_AllocID) then
        fields_are_good
    else
        (field_invalid "Field AllocID of Message AllocationReportACK violates the constraint: \"validity constraint.\"")
;;

let check_field_mod_f_AllocationReportACK_AllocID_outer (msg_data : mod_allocationreportack_data)  =
    let check_field_mod_f_AllocationReportACK_AllocID_inner0_result = check_field_mod_f_AllocationReportACK_AllocID_inner0 msg_data in
    if check_field_mod_f_AllocationReportACK_AllocID_inner0_result.is_invalid then
        check_field_mod_f_AllocationReportACK_AllocID_inner0_result
    else
        fields_are_good
;;

let check_field_mod_f_AllocationReportACK_AllocID (msg_data : mod_allocationreportack_data)  =
    check_field_mod_f_AllocationReportACK_AllocID_outer msg_data
;;

let check_field_mod_f_AllocationReportACK_AllocStatus_inner0 (msg_data : mod_allocationreportack_data)  =
    if (List.mem msg_data.mod_f_AllocationReportACK_AllocStatus (MOD_FIX_AllocStatus_Accepted :: (MOD_FIX_AllocStatus_block_level_reject :: (MOD_FIX_AllocStatus_received__not_yet_processed_ :: [])))) then
        fields_are_good
    else
        (field_invalid "Field AllocStatus of Message AllocationReportACK violates the constraint: \" it in [ AllocStatus.Accepted, AllocStatus.block_level_reject, AllocStatus.received__not_yet_processed_ ]\"")
;;

let check_field_mod_f_AllocationReportACK_AllocStatus_outer (msg_data : mod_allocationreportack_data)  =
    let check_field_mod_f_AllocationReportACK_AllocStatus_inner0_result = check_field_mod_f_AllocationReportACK_AllocStatus_inner0 msg_data in
    if check_field_mod_f_AllocationReportACK_AllocStatus_inner0_result.is_invalid then
        check_field_mod_f_AllocationReportACK_AllocStatus_inner0_result
    else
        fields_are_good
;;

let check_field_mod_f_AllocationReportACK_AllocStatus (msg_data : mod_allocationreportack_data)  =
    check_field_mod_f_AllocationReportACK_AllocStatus_outer msg_data
;;

let check_field_mod_f_AllocationReportACK_AllocRejCode_inner0 (msg_data : mod_allocationreportack_data)  =
    if (List.mem msg_data.mod_f_AllocationReportACK_AllocRejCode ((Some MOD_FIX_AllocRejCode_Unknown_account_s_) :: ((Some MOD_FIX_AllocRejCode_Incorrect_quantity) :: ((Some MOD_FIX_AllocRejCode_Unknown_executing_broker__dealer_) :: ((Some MOD_FIX_AllocRejCode_unknown_OrderID) :: ((Some MOD_FIX_AllocRejCode_Unknown_ListID) :: ((Some MOD_FIX_AllocRejCode_Other) :: ((Some MOD_FIX_AllocRejCode_Incorrect_allocated_quantity) :: ((Some MOD_FIX_AllocRejCode_calculation_difference) :: ((Some MOD_FIX_AllocRejCode_unknown_or_stale_ExecID) :: ((Some MOD_FIX_AllocRejCode_mismatched_data_value) :: ((Some MOD_FIX_AllocRejCode_Unknown_ClOrdID) :: [])))))))))))) then
        fields_are_good
    else
        (field_invalid "Field AllocRejCode of Message AllocationReportACK violates the constraint: \" it in [ AllocRejCode.Unknown_account_s_, AllocRejCode.Incorrect_quantity, AllocRejCode.Unknown_executing_broker__dealer_, AllocRejCode.unknown_OrderID, AllocRejCode.Unknown_ListID, AllocRejCode.Other, AllocRejCode.Incorrect_allocated_quantity, AllocRejCode.calculation_difference, AllocRejCode.unknown_or_stale_ExecID, AllocRejCode.mismatched_data_value, AllocRejCode.Unknown_ClOrdID ]\"")
;;

let check_field_mod_f_AllocationReportACK_AllocRejCode_outer (msg_data : mod_allocationreportack_data)  =
    let check_field_mod_f_AllocationReportACK_AllocRejCode_inner0_result = check_field_mod_f_AllocationReportACK_AllocRejCode_inner0 msg_data in
    if check_field_mod_f_AllocationReportACK_AllocRejCode_inner0_result.is_invalid then
        check_field_mod_f_AllocationReportACK_AllocRejCode_inner0_result
    else
        fields_are_good
;;

let check_field_mod_f_AllocationReportACK_AllocRejCode (msg_data : mod_allocationreportack_data)  =
    (match msg_data.mod_f_AllocationReportACK_AllocRejCode with
        | None -> fields_are_good
        | Some _ -> (check_field_mod_f_AllocationReportACK_AllocRejCode_outer msg_data)
    )
;;

let check_field_mod_f_AllocationReportACK_AllocReportType_inner0 (msg_data : mod_allocationreportack_data)  =
    if (List.mem msg_data.mod_f_AllocationReportACK_AllocReportType ((Some MOD_FIX_AllocReportType_Sellside_calculated_using_preliminary) :: ((Some MOD_FIX_AllocReportType_Sellside_calculated_without_preliminary) :: []))) then
        fields_are_good
    else
        (field_invalid "Field AllocReportType of Message AllocationReportACK violates the constraint: \" it in [ AllocReportType.Sellside_calculated_using_preliminary, AllocReportType.Sellside_calculated_without_preliminary ]\"")
;;

let check_field_mod_f_AllocationReportACK_AllocReportType_outer (msg_data : mod_allocationreportack_data)  =
    let check_field_mod_f_AllocationReportACK_AllocReportType_inner0_result = check_field_mod_f_AllocationReportACK_AllocReportType_inner0 msg_data in
    if check_field_mod_f_AllocationReportACK_AllocReportType_inner0_result.is_invalid then
        check_field_mod_f_AllocationReportACK_AllocReportType_inner0_result
    else
        fields_are_good
;;

let check_field_mod_f_AllocationReportACK_AllocReportType (msg_data : mod_allocationreportack_data)  =
    (match msg_data.mod_f_AllocationReportACK_AllocReportType with
        | None -> fields_are_good
        | Some _ -> (check_field_mod_f_AllocationReportACK_AllocReportType_outer msg_data)
    )
;;

let check_field_mod_f_AllocationReportACK_Text_inner0 (msg_data : mod_allocationreportack_data)  =
    if ((match msg_data.mod_f_AllocationReportACK_Text with
        | Some cap_string_length_check_var -> (good_string cap_string_length_check_var)
        | None -> true
    )
    ) then
        fields_are_good
    else
        (field_invalid "Field Text of Message AllocationReportACK violates the constraint: \"validity constraint.\"")
;;

let check_field_mod_f_AllocationReportACK_Text_outer (msg_data : mod_allocationreportack_data)  =
    let check_field_mod_f_AllocationReportACK_Text_inner0_result = check_field_mod_f_AllocationReportACK_Text_inner0 msg_data in
    if check_field_mod_f_AllocationReportACK_Text_inner0_result.is_invalid then
        check_field_mod_f_AllocationReportACK_Text_inner0_result
    else
        fields_are_good
;;

let check_field_mod_f_AllocationReportACK_Text (msg_data : mod_allocationreportack_data)  =
    (match msg_data.mod_f_AllocationReportACK_Text with
        | None -> fields_are_good
        | Some _ -> (check_field_mod_f_AllocationReportACK_Text_outer msg_data)
    )
;;

let check_fields_AllocationReportACK (msg_data : mod_allocationreportack_data) (m_state : model_state)  =
    let mod_f_AllocationReportACK_Text_result = check_field_mod_f_AllocationReportACK_Text msg_data in
    if mod_f_AllocationReportACK_Text_result.is_invalid then
        mod_f_AllocationReportACK_Text_result
    else
        let mod_f_AllocationReportACK_AllocReportType_result = check_field_mod_f_AllocationReportACK_AllocReportType msg_data in
        if mod_f_AllocationReportACK_AllocReportType_result.is_invalid then
            mod_f_AllocationReportACK_AllocReportType_result
        else
            let mod_f_AllocationReportACK_AllocRejCode_result = check_field_mod_f_AllocationReportACK_AllocRejCode msg_data in
            if mod_f_AllocationReportACK_AllocRejCode_result.is_invalid then
                mod_f_AllocationReportACK_AllocRejCode_result
            else
                let mod_f_AllocationReportACK_AllocStatus_result = check_field_mod_f_AllocationReportACK_AllocStatus msg_data in
                if mod_f_AllocationReportACK_AllocStatus_result.is_invalid then
                    mod_f_AllocationReportACK_AllocStatus_result
                else
                    let mod_f_AllocationReportACK_AllocID_result = check_field_mod_f_AllocationReportACK_AllocID msg_data in
                    if mod_f_AllocationReportACK_AllocID_result.is_invalid then
                        mod_f_AllocationReportACK_AllocID_result
                    else
                        let mod_f_AllocationReportACK_AllocReportID_result = check_field_mod_f_AllocationReportACK_AllocReportID msg_data in
                        if mod_f_AllocationReportACK_AllocReportID_result.is_invalid then
                            mod_f_AllocationReportACK_AllocReportID_result
                        else
                            fields_are_good
;;

let check_field_mod_f_AllocationInstruction_AllocID_inner0 (msg_data : mod_allocationinstruction_data)  =
    if (good_string msg_data.mod_f_AllocationInstruction_AllocID) then
        fields_are_good
    else
        (field_invalid "Field AllocID of Message AllocationInstruction violates the constraint: \"validity constraint.\"")
;;

let check_field_mod_f_AllocationInstruction_AllocID_outer (msg_data : mod_allocationinstruction_data)  =
    let check_field_mod_f_AllocationInstruction_AllocID_inner0_result = check_field_mod_f_AllocationInstruction_AllocID_inner0 msg_data in
    if check_field_mod_f_AllocationInstruction_AllocID_inner0_result.is_invalid then
        check_field_mod_f_AllocationInstruction_AllocID_inner0_result
    else
        fields_are_good
;;

let check_field_mod_f_AllocationInstruction_AllocID (msg_data : mod_allocationinstruction_data)  =
    check_field_mod_f_AllocationInstruction_AllocID_outer msg_data
;;

let check_field_mod_f_AllocationInstruction_AllocTransType_inner0 (msg_data : mod_allocationinstruction_data)  =
    if (List.mem msg_data.mod_f_AllocationInstruction_AllocTransType (MOD_FIX_AllocTransType_New :: (MOD_FIX_AllocTransType_Replace :: (MOD_FIX_AllocTransType_Cancel :: (MOD_FIX_AllocTransType_Preliminary :: (MOD_FIX_AllocTransType_Calculated :: [])))))) then
        fields_are_good
    else
        (field_invalid "Field AllocTransType of Message AllocationInstruction violates the constraint: \" it in [ AllocTransType.New, AllocTransType.Replace, AllocTransType.Cancel, AllocTransType.Preliminary, AllocTransType.Calculated ]\"")
;;

let check_field_mod_f_AllocationInstruction_AllocTransType_outer (msg_data : mod_allocationinstruction_data)  =
    let check_field_mod_f_AllocationInstruction_AllocTransType_inner0_result = check_field_mod_f_AllocationInstruction_AllocTransType_inner0 msg_data in
    if check_field_mod_f_AllocationInstruction_AllocTransType_inner0_result.is_invalid then
        check_field_mod_f_AllocationInstruction_AllocTransType_inner0_result
    else
        fields_are_good
;;

let check_field_mod_f_AllocationInstruction_AllocTransType (msg_data : mod_allocationinstruction_data)  =
    check_field_mod_f_AllocationInstruction_AllocTransType_outer msg_data
;;

let check_field_mod_f_AllocationInstruction_AllocType_inner0 (msg_data : mod_allocationinstruction_data)  =
    if (List.mem msg_data.mod_f_AllocationInstruction_AllocType (MOD_FIX_AllocType_Buyside_preliminary :: [])) then
        fields_are_good
    else
        (field_invalid "Field AllocType of Message AllocationInstruction violates the constraint: \" it in [ AllocType.Buyside_preliminary ]\"")
;;

let check_field_mod_f_AllocationInstruction_AllocType_outer (msg_data : mod_allocationinstruction_data)  =
    let check_field_mod_f_AllocationInstruction_AllocType_inner0_result = check_field_mod_f_AllocationInstruction_AllocType_inner0 msg_data in
    if check_field_mod_f_AllocationInstruction_AllocType_inner0_result.is_invalid then
        check_field_mod_f_AllocationInstruction_AllocType_inner0_result
    else
        fields_are_good
;;

let check_field_mod_f_AllocationInstruction_AllocType (msg_data : mod_allocationinstruction_data)  =
    check_field_mod_f_AllocationInstruction_AllocType_outer msg_data
;;

let check_field_mod_f_AllocationInstruction_RefAllocID_inner0 (msg_data : mod_allocationinstruction_data)  =
    if ((match msg_data.mod_f_AllocationInstruction_RefAllocID with
        | Some cap_string_length_check_var -> (good_string cap_string_length_check_var)
        | None -> true
    )
    ) then
        fields_are_good
    else
        (field_invalid "Field RefAllocID of Message AllocationInstruction violates the constraint: \"validity constraint.\"")
;;

let check_field_mod_f_AllocationInstruction_RefAllocID_outer (msg_data : mod_allocationinstruction_data)  =
    let check_field_mod_f_AllocationInstruction_RefAllocID_inner0_result = check_field_mod_f_AllocationInstruction_RefAllocID_inner0 msg_data in
    if check_field_mod_f_AllocationInstruction_RefAllocID_inner0_result.is_invalid then
        check_field_mod_f_AllocationInstruction_RefAllocID_inner0_result
    else
        fields_are_good
;;

let check_field_mod_f_AllocationInstruction_RefAllocID (msg_data : mod_allocationinstruction_data)  =
    (match msg_data.mod_f_AllocationInstruction_RefAllocID with
        | None -> fields_are_good
        | Some _ -> (check_field_mod_f_AllocationInstruction_RefAllocID_outer msg_data)
    )
;;

let check_field_mod_f_AllocationInstruction_AllocCancReplaceReason_inner0 (msg_data : mod_allocationinstruction_data)  =
    if (List.mem msg_data.mod_f_AllocationInstruction_AllocCancReplaceReason ((Some MOD_FIX_AllocCancReplaceReason_Original_details_incomplete___incorrect) :: ((Some MOD_FIX_AllocCancReplaceReason_Other) :: []))) then
        fields_are_good
    else
        (field_invalid "Field AllocCancReplaceReason of Message AllocationInstruction violates the constraint: \" it in [ AllocCancReplaceReason.Original_details_incomplete___incorrect, AllocCancReplaceReason.Other ]\"")
;;

let check_field_mod_f_AllocationInstruction_AllocCancReplaceReason_outer (msg_data : mod_allocationinstruction_data)  =
    let check_field_mod_f_AllocationInstruction_AllocCancReplaceReason_inner0_result = check_field_mod_f_AllocationInstruction_AllocCancReplaceReason_inner0 msg_data in
    if check_field_mod_f_AllocationInstruction_AllocCancReplaceReason_inner0_result.is_invalid then
        check_field_mod_f_AllocationInstruction_AllocCancReplaceReason_inner0_result
    else
        fields_are_good
;;

let check_field_mod_f_AllocationInstruction_AllocCancReplaceReason (msg_data : mod_allocationinstruction_data)  =
    (match msg_data.mod_f_AllocationInstruction_AllocCancReplaceReason with
        | None -> fields_are_good
        | Some _ -> (check_field_mod_f_AllocationInstruction_AllocCancReplaceReason_outer msg_data)
    )
;;

let check_field_mod_f_AllocationInstruction_AllocNoOrdersType_inner0 (msg_data : mod_allocationinstruction_data)  =
    if (List.mem msg_data.mod_f_AllocationInstruction_AllocNoOrdersType (MOD_FIX_AllocNoOrdersType_Not_specified :: (MOD_FIX_AllocNoOrdersType_Explicit_list_provided :: []))) then
        fields_are_good
    else
        (field_invalid "Field AllocNoOrdersType of Message AllocationInstruction violates the constraint: \" it in [ AllocNoOrdersType.Not_specified, AllocNoOrdersType.Explicit_list_provided ]\"")
;;

let check_field_mod_f_AllocationInstruction_AllocNoOrdersType_outer (msg_data : mod_allocationinstruction_data)  =
    let check_field_mod_f_AllocationInstruction_AllocNoOrdersType_inner0_result = check_field_mod_f_AllocationInstruction_AllocNoOrdersType_inner0 msg_data in
    if check_field_mod_f_AllocationInstruction_AllocNoOrdersType_inner0_result.is_invalid then
        check_field_mod_f_AllocationInstruction_AllocNoOrdersType_inner0_result
    else
        fields_are_good
;;

let check_field_mod_f_AllocationInstruction_AllocNoOrdersType (msg_data : mod_allocationinstruction_data)  =
    check_field_mod_f_AllocationInstruction_AllocNoOrdersType_outer msg_data
;;

let check_field_mod_f_AllocationInstruction_OrdersGrp_inner0 (msg_data : mod_allocationinstruction_data)  =
    if (checkRGConsistency_OrdersGrp msg_data.mod_f_AllocationInstruction_OrdersGrp) then
        fields_are_good
    else
        (field_invalid "Field OrdersGrp of Message AllocationInstruction violates the constraint: \"Consistency Check for Repeating Group Type OrdersGrp.\"")
;;

let check_field_mod_f_AllocationInstruction_OrdersGrp_inner1 (msg_data : mod_allocationinstruction_data)  =
    if ((&&) ((match msg_data.mod_f_AllocationInstruction_OrdersGrp.rg_OrdersGrp_element_4 with
        | Some cap_e_OrdersGrp -> (checkRGConsistency_PartyIDsGrp cap_e_OrdersGrp.mod_f_OrdersGrp_Parties_PartyIDsGrp)
        | None -> true
    )
    ) ((&&) ((match msg_data.mod_f_AllocationInstruction_OrdersGrp.rg_OrdersGrp_element_3 with
        | Some cap_e_OrdersGrp -> (checkRGConsistency_PartyIDsGrp cap_e_OrdersGrp.mod_f_OrdersGrp_Parties_PartyIDsGrp)
        | None -> true
    )
    ) ((&&) ((match msg_data.mod_f_AllocationInstruction_OrdersGrp.rg_OrdersGrp_element_2 with
        | Some cap_e_OrdersGrp -> (checkRGConsistency_PartyIDsGrp cap_e_OrdersGrp.mod_f_OrdersGrp_Parties_PartyIDsGrp)
        | None -> true
    )
    ) ((&&) ((match msg_data.mod_f_AllocationInstruction_OrdersGrp.rg_OrdersGrp_element_1 with
        | Some cap_e_OrdersGrp -> (checkRGConsistency_PartyIDsGrp cap_e_OrdersGrp.mod_f_OrdersGrp_Parties_PartyIDsGrp)
        | None -> true
    )
    ) ((match msg_data.mod_f_AllocationInstruction_OrdersGrp.rg_OrdersGrp_element_0 with
        | Some cap_e_OrdersGrp -> (checkRGConsistency_PartyIDsGrp cap_e_OrdersGrp.mod_f_OrdersGrp_Parties_PartyIDsGrp)
        | None -> true
    )
    ))))) then
        fields_are_good
    else
        (field_invalid "Field OrdersGrp of Message AllocationInstruction violates the constraint: \"Consistency Check for Repeating Group Type PartyIDsGrp.\"")
;;

let check_field_mod_f_AllocationInstruction_OrdersGrp_inner2 (msg_data : mod_allocationinstruction_data)  =
    if ((&&) ((match msg_data.mod_f_AllocationInstruction_OrdersGrp.rg_OrdersGrp_element_4 with
        | Some cap_e_OrdersGrp -> ((&&) ((match cap_e_OrdersGrp.mod_f_OrdersGrp_Parties_PartyIDsGrp.rg_PartyIDsGrp_element_4 with
            | Some cap_e_Parties_PartyIDsGrp -> (checkRGConsistency_PartySubIDsGrp cap_e_Parties_PartyIDsGrp.mod_f_PartyIDsGrp_PartySubIDsGrp)
            | None -> true
        )
        ) ((&&) ((match cap_e_OrdersGrp.mod_f_OrdersGrp_Parties_PartyIDsGrp.rg_PartyIDsGrp_element_3 with
            | Some cap_e_Parties_PartyIDsGrp -> (checkRGConsistency_PartySubIDsGrp cap_e_Parties_PartyIDsGrp.mod_f_PartyIDsGrp_PartySubIDsGrp)
            | None -> true
        )
        ) ((&&) ((match cap_e_OrdersGrp.mod_f_OrdersGrp_Parties_PartyIDsGrp.rg_PartyIDsGrp_element_2 with
            | Some cap_e_Parties_PartyIDsGrp -> (checkRGConsistency_PartySubIDsGrp cap_e_Parties_PartyIDsGrp.mod_f_PartyIDsGrp_PartySubIDsGrp)
            | None -> true
        )
        ) ((&&) ((match cap_e_OrdersGrp.mod_f_OrdersGrp_Parties_PartyIDsGrp.rg_PartyIDsGrp_element_1 with
            | Some cap_e_Parties_PartyIDsGrp -> (checkRGConsistency_PartySubIDsGrp cap_e_Parties_PartyIDsGrp.mod_f_PartyIDsGrp_PartySubIDsGrp)
            | None -> true
        )
        ) ((match cap_e_OrdersGrp.mod_f_OrdersGrp_Parties_PartyIDsGrp.rg_PartyIDsGrp_element_0 with
            | Some cap_e_Parties_PartyIDsGrp -> (checkRGConsistency_PartySubIDsGrp cap_e_Parties_PartyIDsGrp.mod_f_PartyIDsGrp_PartySubIDsGrp)
            | None -> true
        )
        )))))
        | None -> true
    )
    ) ((&&) ((match msg_data.mod_f_AllocationInstruction_OrdersGrp.rg_OrdersGrp_element_3 with
        | Some cap_e_OrdersGrp -> ((&&) ((match cap_e_OrdersGrp.mod_f_OrdersGrp_Parties_PartyIDsGrp.rg_PartyIDsGrp_element_4 with
            | Some cap_e_Parties_PartyIDsGrp -> (checkRGConsistency_PartySubIDsGrp cap_e_Parties_PartyIDsGrp.mod_f_PartyIDsGrp_PartySubIDsGrp)
            | None -> true
        )
        ) ((&&) ((match cap_e_OrdersGrp.mod_f_OrdersGrp_Parties_PartyIDsGrp.rg_PartyIDsGrp_element_3 with
            | Some cap_e_Parties_PartyIDsGrp -> (checkRGConsistency_PartySubIDsGrp cap_e_Parties_PartyIDsGrp.mod_f_PartyIDsGrp_PartySubIDsGrp)
            | None -> true
        )
        ) ((&&) ((match cap_e_OrdersGrp.mod_f_OrdersGrp_Parties_PartyIDsGrp.rg_PartyIDsGrp_element_2 with
            | Some cap_e_Parties_PartyIDsGrp -> (checkRGConsistency_PartySubIDsGrp cap_e_Parties_PartyIDsGrp.mod_f_PartyIDsGrp_PartySubIDsGrp)
            | None -> true
        )
        ) ((&&) ((match cap_e_OrdersGrp.mod_f_OrdersGrp_Parties_PartyIDsGrp.rg_PartyIDsGrp_element_1 with
            | Some cap_e_Parties_PartyIDsGrp -> (checkRGConsistency_PartySubIDsGrp cap_e_Parties_PartyIDsGrp.mod_f_PartyIDsGrp_PartySubIDsGrp)
            | None -> true
        )
        ) ((match cap_e_OrdersGrp.mod_f_OrdersGrp_Parties_PartyIDsGrp.rg_PartyIDsGrp_element_0 with
            | Some cap_e_Parties_PartyIDsGrp -> (checkRGConsistency_PartySubIDsGrp cap_e_Parties_PartyIDsGrp.mod_f_PartyIDsGrp_PartySubIDsGrp)
            | None -> true
        )
        )))))
        | None -> true
    )
    ) ((&&) ((match msg_data.mod_f_AllocationInstruction_OrdersGrp.rg_OrdersGrp_element_2 with
        | Some cap_e_OrdersGrp -> ((&&) ((match cap_e_OrdersGrp.mod_f_OrdersGrp_Parties_PartyIDsGrp.rg_PartyIDsGrp_element_4 with
            | Some cap_e_Parties_PartyIDsGrp -> (checkRGConsistency_PartySubIDsGrp cap_e_Parties_PartyIDsGrp.mod_f_PartyIDsGrp_PartySubIDsGrp)
            | None -> true
        )
        ) ((&&) ((match cap_e_OrdersGrp.mod_f_OrdersGrp_Parties_PartyIDsGrp.rg_PartyIDsGrp_element_3 with
            | Some cap_e_Parties_PartyIDsGrp -> (checkRGConsistency_PartySubIDsGrp cap_e_Parties_PartyIDsGrp.mod_f_PartyIDsGrp_PartySubIDsGrp)
            | None -> true
        )
        ) ((&&) ((match cap_e_OrdersGrp.mod_f_OrdersGrp_Parties_PartyIDsGrp.rg_PartyIDsGrp_element_2 with
            | Some cap_e_Parties_PartyIDsGrp -> (checkRGConsistency_PartySubIDsGrp cap_e_Parties_PartyIDsGrp.mod_f_PartyIDsGrp_PartySubIDsGrp)
            | None -> true
        )
        ) ((&&) ((match cap_e_OrdersGrp.mod_f_OrdersGrp_Parties_PartyIDsGrp.rg_PartyIDsGrp_element_1 with
            | Some cap_e_Parties_PartyIDsGrp -> (checkRGConsistency_PartySubIDsGrp cap_e_Parties_PartyIDsGrp.mod_f_PartyIDsGrp_PartySubIDsGrp)
            | None -> true
        )
        ) ((match cap_e_OrdersGrp.mod_f_OrdersGrp_Parties_PartyIDsGrp.rg_PartyIDsGrp_element_0 with
            | Some cap_e_Parties_PartyIDsGrp -> (checkRGConsistency_PartySubIDsGrp cap_e_Parties_PartyIDsGrp.mod_f_PartyIDsGrp_PartySubIDsGrp)
            | None -> true
        )
        )))))
        | None -> true
    )
    ) ((&&) ((match msg_data.mod_f_AllocationInstruction_OrdersGrp.rg_OrdersGrp_element_1 with
        | Some cap_e_OrdersGrp -> ((&&) ((match cap_e_OrdersGrp.mod_f_OrdersGrp_Parties_PartyIDsGrp.rg_PartyIDsGrp_element_4 with
            | Some cap_e_Parties_PartyIDsGrp -> (checkRGConsistency_PartySubIDsGrp cap_e_Parties_PartyIDsGrp.mod_f_PartyIDsGrp_PartySubIDsGrp)
            | None -> true
        )
        ) ((&&) ((match cap_e_OrdersGrp.mod_f_OrdersGrp_Parties_PartyIDsGrp.rg_PartyIDsGrp_element_3 with
            | Some cap_e_Parties_PartyIDsGrp -> (checkRGConsistency_PartySubIDsGrp cap_e_Parties_PartyIDsGrp.mod_f_PartyIDsGrp_PartySubIDsGrp)
            | None -> true
        )
        ) ((&&) ((match cap_e_OrdersGrp.mod_f_OrdersGrp_Parties_PartyIDsGrp.rg_PartyIDsGrp_element_2 with
            | Some cap_e_Parties_PartyIDsGrp -> (checkRGConsistency_PartySubIDsGrp cap_e_Parties_PartyIDsGrp.mod_f_PartyIDsGrp_PartySubIDsGrp)
            | None -> true
        )
        ) ((&&) ((match cap_e_OrdersGrp.mod_f_OrdersGrp_Parties_PartyIDsGrp.rg_PartyIDsGrp_element_1 with
            | Some cap_e_Parties_PartyIDsGrp -> (checkRGConsistency_PartySubIDsGrp cap_e_Parties_PartyIDsGrp.mod_f_PartyIDsGrp_PartySubIDsGrp)
            | None -> true
        )
        ) ((match cap_e_OrdersGrp.mod_f_OrdersGrp_Parties_PartyIDsGrp.rg_PartyIDsGrp_element_0 with
            | Some cap_e_Parties_PartyIDsGrp -> (checkRGConsistency_PartySubIDsGrp cap_e_Parties_PartyIDsGrp.mod_f_PartyIDsGrp_PartySubIDsGrp)
            | None -> true
        )
        )))))
        | None -> true
    )
    ) ((match msg_data.mod_f_AllocationInstruction_OrdersGrp.rg_OrdersGrp_element_0 with
        | Some cap_e_OrdersGrp -> ((&&) ((match cap_e_OrdersGrp.mod_f_OrdersGrp_Parties_PartyIDsGrp.rg_PartyIDsGrp_element_4 with
            | Some cap_e_Parties_PartyIDsGrp -> (checkRGConsistency_PartySubIDsGrp cap_e_Parties_PartyIDsGrp.mod_f_PartyIDsGrp_PartySubIDsGrp)
            | None -> true
        )
        ) ((&&) ((match cap_e_OrdersGrp.mod_f_OrdersGrp_Parties_PartyIDsGrp.rg_PartyIDsGrp_element_3 with
            | Some cap_e_Parties_PartyIDsGrp -> (checkRGConsistency_PartySubIDsGrp cap_e_Parties_PartyIDsGrp.mod_f_PartyIDsGrp_PartySubIDsGrp)
            | None -> true
        )
        ) ((&&) ((match cap_e_OrdersGrp.mod_f_OrdersGrp_Parties_PartyIDsGrp.rg_PartyIDsGrp_element_2 with
            | Some cap_e_Parties_PartyIDsGrp -> (checkRGConsistency_PartySubIDsGrp cap_e_Parties_PartyIDsGrp.mod_f_PartyIDsGrp_PartySubIDsGrp)
            | None -> true
        )
        ) ((&&) ((match cap_e_OrdersGrp.mod_f_OrdersGrp_Parties_PartyIDsGrp.rg_PartyIDsGrp_element_1 with
            | Some cap_e_Parties_PartyIDsGrp -> (checkRGConsistency_PartySubIDsGrp cap_e_Parties_PartyIDsGrp.mod_f_PartyIDsGrp_PartySubIDsGrp)
            | None -> true
        )
        ) ((match cap_e_OrdersGrp.mod_f_OrdersGrp_Parties_PartyIDsGrp.rg_PartyIDsGrp_element_0 with
            | Some cap_e_Parties_PartyIDsGrp -> (checkRGConsistency_PartySubIDsGrp cap_e_Parties_PartyIDsGrp.mod_f_PartyIDsGrp_PartySubIDsGrp)
            | None -> true
        )
        )))))
        | None -> true
    )
    ))))) then
        fields_are_good
    else
        (field_invalid "Field OrdersGrp of Message AllocationInstruction violates the constraint: \"Consistency Check for Repeating Group Type PartySubIDsGrp.\"")
;;

let check_field_mod_f_AllocationInstruction_OrdersGrp_inner3 (msg_data : mod_allocationinstruction_data)  =
    if ((&&) ((match msg_data.mod_f_AllocationInstruction_OrdersGrp.rg_OrdersGrp_element_4 with
        | Some cap_e_OrdersGrp -> (checkRGConsistency_SecurityAltIDGrp cap_e_OrdersGrp.mod_f_OrdersGrp_Instrument_SecurityAltIDGrp)
        | None -> true
    )
    ) ((&&) ((match msg_data.mod_f_AllocationInstruction_OrdersGrp.rg_OrdersGrp_element_3 with
        | Some cap_e_OrdersGrp -> (checkRGConsistency_SecurityAltIDGrp cap_e_OrdersGrp.mod_f_OrdersGrp_Instrument_SecurityAltIDGrp)
        | None -> true
    )
    ) ((&&) ((match msg_data.mod_f_AllocationInstruction_OrdersGrp.rg_OrdersGrp_element_2 with
        | Some cap_e_OrdersGrp -> (checkRGConsistency_SecurityAltIDGrp cap_e_OrdersGrp.mod_f_OrdersGrp_Instrument_SecurityAltIDGrp)
        | None -> true
    )
    ) ((&&) ((match msg_data.mod_f_AllocationInstruction_OrdersGrp.rg_OrdersGrp_element_1 with
        | Some cap_e_OrdersGrp -> (checkRGConsistency_SecurityAltIDGrp cap_e_OrdersGrp.mod_f_OrdersGrp_Instrument_SecurityAltIDGrp)
        | None -> true
    )
    ) ((match msg_data.mod_f_AllocationInstruction_OrdersGrp.rg_OrdersGrp_element_0 with
        | Some cap_e_OrdersGrp -> (checkRGConsistency_SecurityAltIDGrp cap_e_OrdersGrp.mod_f_OrdersGrp_Instrument_SecurityAltIDGrp)
        | None -> true
    )
    ))))) then
        fields_are_good
    else
        (field_invalid "Field OrdersGrp of Message AllocationInstruction violates the constraint: \"Consistency Check for Repeating Group Type SecurityAltIDGrp.\"")
;;

let check_field_mod_f_AllocationInstruction_OrdersGrp_outer (msg_data : mod_allocationinstruction_data)  =
    let check_field_mod_f_AllocationInstruction_OrdersGrp_inner3_result = check_field_mod_f_AllocationInstruction_OrdersGrp_inner3 msg_data in
    if check_field_mod_f_AllocationInstruction_OrdersGrp_inner3_result.is_invalid then
        check_field_mod_f_AllocationInstruction_OrdersGrp_inner3_result
    else
        let check_field_mod_f_AllocationInstruction_OrdersGrp_inner2_result = check_field_mod_f_AllocationInstruction_OrdersGrp_inner2 msg_data in
        if check_field_mod_f_AllocationInstruction_OrdersGrp_inner2_result.is_invalid then
            check_field_mod_f_AllocationInstruction_OrdersGrp_inner2_result
        else
            let check_field_mod_f_AllocationInstruction_OrdersGrp_inner1_result = check_field_mod_f_AllocationInstruction_OrdersGrp_inner1 msg_data in
            if check_field_mod_f_AllocationInstruction_OrdersGrp_inner1_result.is_invalid then
                check_field_mod_f_AllocationInstruction_OrdersGrp_inner1_result
            else
                let check_field_mod_f_AllocationInstruction_OrdersGrp_inner0_result = check_field_mod_f_AllocationInstruction_OrdersGrp_inner0 msg_data in
                if check_field_mod_f_AllocationInstruction_OrdersGrp_inner0_result.is_invalid then
                    check_field_mod_f_AllocationInstruction_OrdersGrp_inner0_result
                else
                    fields_are_good
;;

let check_field_mod_f_AllocationInstruction_OrdersGrp (msg_data : mod_allocationinstruction_data)  =
    check_field_mod_f_AllocationInstruction_OrdersGrp_outer msg_data
;;

let check_field_mod_f_AllocationInstruction_ExecsGrp_inner0 (msg_data : mod_allocationinstruction_data)  =
    if (checkRGConsistency_ExecsGrp msg_data.mod_f_AllocationInstruction_ExecsGrp) then
        fields_are_good
    else
        (field_invalid "Field ExecsGrp of Message AllocationInstruction violates the constraint: \"Consistency Check for Repeating Group Type ExecsGrp.\"")
;;

let check_field_mod_f_AllocationInstruction_ExecsGrp_outer (msg_data : mod_allocationinstruction_data)  =
    let check_field_mod_f_AllocationInstruction_ExecsGrp_inner0_result = check_field_mod_f_AllocationInstruction_ExecsGrp_inner0 msg_data in
    if check_field_mod_f_AllocationInstruction_ExecsGrp_inner0_result.is_invalid then
        check_field_mod_f_AllocationInstruction_ExecsGrp_inner0_result
    else
        fields_are_good
;;

let check_field_mod_f_AllocationInstruction_ExecsGrp (msg_data : mod_allocationinstruction_data)  =
    check_field_mod_f_AllocationInstruction_ExecsGrp_outer msg_data
;;

let check_field_mod_f_AllocationInstruction_Instrument_CFICode_inner0 (msg_data : mod_allocationinstruction_data)  =
    if (good_string msg_data.mod_f_AllocationInstruction_Instrument_CFICode) then
        fields_are_good
    else
        (field_invalid "Field CFICode of Message AllocationInstruction violates the constraint: \"validity constraint.\"")
;;

let check_field_mod_f_AllocationInstruction_Instrument_CFICode_outer (msg_data : mod_allocationinstruction_data)  =
    let check_field_mod_f_AllocationInstruction_Instrument_CFICode_inner0_result = check_field_mod_f_AllocationInstruction_Instrument_CFICode_inner0 msg_data in
    if check_field_mod_f_AllocationInstruction_Instrument_CFICode_inner0_result.is_invalid then
        check_field_mod_f_AllocationInstruction_Instrument_CFICode_inner0_result
    else
        fields_are_good
;;

let check_field_mod_f_AllocationInstruction_Instrument_CFICode (msg_data : mod_allocationinstruction_data)  =
    check_field_mod_f_AllocationInstruction_Instrument_CFICode_outer msg_data
;;

let check_field_mod_f_AllocationInstruction_Text_inner0 (msg_data : mod_allocationinstruction_data)  =
    if ((match msg_data.mod_f_AllocationInstruction_Text with
        | Some cap_string_length_check_var -> (good_string cap_string_length_check_var)
        | None -> true
    )
    ) then
        fields_are_good
    else
        (field_invalid "Field Text of Message AllocationInstruction violates the constraint: \"validity constraint.\"")
;;

let check_field_mod_f_AllocationInstruction_Text_outer (msg_data : mod_allocationinstruction_data)  =
    let check_field_mod_f_AllocationInstruction_Text_inner0_result = check_field_mod_f_AllocationInstruction_Text_inner0 msg_data in
    if check_field_mod_f_AllocationInstruction_Text_inner0_result.is_invalid then
        check_field_mod_f_AllocationInstruction_Text_inner0_result
    else
        fields_are_good
;;

let check_field_mod_f_AllocationInstruction_Text (msg_data : mod_allocationinstruction_data)  =
    (match msg_data.mod_f_AllocationInstruction_Text with
        | None -> fields_are_good
        | Some _ -> (check_field_mod_f_AllocationInstruction_Text_outer msg_data)
    )
;;

let check_field_mod_f_AllocationInstruction_AllocsGrp_inner0 (msg_data : mod_allocationinstruction_data)  =
    if (checkRGConsistency_AllocsGrp msg_data.mod_f_AllocationInstruction_AllocsGrp) then
        fields_are_good
    else
        (field_invalid "Field AllocsGrp of Message AllocationInstruction violates the constraint: \"Consistency Check for Repeating Group Type AllocsGrp.\"")
;;

let check_field_mod_f_AllocationInstruction_AllocsGrp_outer (msg_data : mod_allocationinstruction_data)  =
    let check_field_mod_f_AllocationInstruction_AllocsGrp_inner0_result = check_field_mod_f_AllocationInstruction_AllocsGrp_inner0 msg_data in
    if check_field_mod_f_AllocationInstruction_AllocsGrp_inner0_result.is_invalid then
        check_field_mod_f_AllocationInstruction_AllocsGrp_inner0_result
    else
        fields_are_good
;;

let check_field_mod_f_AllocationInstruction_AllocsGrp (msg_data : mod_allocationinstruction_data)  =
    check_field_mod_f_AllocationInstruction_AllocsGrp_outer msg_data
;;

let check_fields_AllocationInstruction (msg_data : mod_allocationinstruction_data) (m_state : model_state)  =
    let mod_f_AllocationInstruction_AllocsGrp_result = check_field_mod_f_AllocationInstruction_AllocsGrp msg_data in
    if mod_f_AllocationInstruction_AllocsGrp_result.is_invalid then
        mod_f_AllocationInstruction_AllocsGrp_result
    else
        let mod_f_AllocationInstruction_Text_result = check_field_mod_f_AllocationInstruction_Text msg_data in
        if mod_f_AllocationInstruction_Text_result.is_invalid then
            mod_f_AllocationInstruction_Text_result
        else
            let mod_f_AllocationInstruction_Instrument_CFICode_result = check_field_mod_f_AllocationInstruction_Instrument_CFICode msg_data in
            if mod_f_AllocationInstruction_Instrument_CFICode_result.is_invalid then
                mod_f_AllocationInstruction_Instrument_CFICode_result
            else
                let mod_f_AllocationInstruction_ExecsGrp_result = check_field_mod_f_AllocationInstruction_ExecsGrp msg_data in
                if mod_f_AllocationInstruction_ExecsGrp_result.is_invalid then
                    mod_f_AllocationInstruction_ExecsGrp_result
                else
                    let mod_f_AllocationInstruction_OrdersGrp_result = check_field_mod_f_AllocationInstruction_OrdersGrp msg_data in
                    if mod_f_AllocationInstruction_OrdersGrp_result.is_invalid then
                        mod_f_AllocationInstruction_OrdersGrp_result
                    else
                        let mod_f_AllocationInstruction_AllocNoOrdersType_result = check_field_mod_f_AllocationInstruction_AllocNoOrdersType msg_data in
                        if mod_f_AllocationInstruction_AllocNoOrdersType_result.is_invalid then
                            mod_f_AllocationInstruction_AllocNoOrdersType_result
                        else
                            let mod_f_AllocationInstruction_AllocCancReplaceReason_result = check_field_mod_f_AllocationInstruction_AllocCancReplaceReason msg_data in
                            if mod_f_AllocationInstruction_AllocCancReplaceReason_result.is_invalid then
                                mod_f_AllocationInstruction_AllocCancReplaceReason_result
                            else
                                let mod_f_AllocationInstruction_RefAllocID_result = check_field_mod_f_AllocationInstruction_RefAllocID msg_data in
                                if mod_f_AllocationInstruction_RefAllocID_result.is_invalid then
                                    mod_f_AllocationInstruction_RefAllocID_result
                                else
                                    let mod_f_AllocationInstruction_AllocType_result = check_field_mod_f_AllocationInstruction_AllocType msg_data in
                                    if mod_f_AllocationInstruction_AllocType_result.is_invalid then
                                        mod_f_AllocationInstruction_AllocType_result
                                    else
                                        let mod_f_AllocationInstruction_AllocTransType_result = check_field_mod_f_AllocationInstruction_AllocTransType msg_data in
                                        if mod_f_AllocationInstruction_AllocTransType_result.is_invalid then
                                            mod_f_AllocationInstruction_AllocTransType_result
                                        else
                                            let mod_f_AllocationInstruction_AllocID_result = check_field_mod_f_AllocationInstruction_AllocID msg_data in
                                            if mod_f_AllocationInstruction_AllocID_result.is_invalid then
                                                mod_f_AllocationInstruction_AllocID_result
                                            else
                                                fields_are_good
;;

let check_field_mod_f_Heartbeat_TestReqID_inner0 (msg_data : mod_heartbeat_data)  =
    if ((match msg_data.mod_f_Heartbeat_TestReqID with
        | Some cap_string_length_check_var -> (good_string cap_string_length_check_var)
        | None -> true
    )
    ) then
        fields_are_good
    else
        (field_invalid "Field TestReqID of Message Heartbeat violates the constraint: \"validity constraint.\"")
;;

let check_field_mod_f_Heartbeat_TestReqID_outer (msg_data : mod_heartbeat_data)  =
    let check_field_mod_f_Heartbeat_TestReqID_inner0_result = check_field_mod_f_Heartbeat_TestReqID_inner0 msg_data in
    if check_field_mod_f_Heartbeat_TestReqID_inner0_result.is_invalid then
        check_field_mod_f_Heartbeat_TestReqID_inner0_result
    else
        fields_are_good
;;

let check_field_mod_f_Heartbeat_TestReqID (msg_data : mod_heartbeat_data)  =
    (match msg_data.mod_f_Heartbeat_TestReqID with
        | None -> fields_are_good
        | Some _ -> (check_field_mod_f_Heartbeat_TestReqID_outer msg_data)
    )
;;

let check_fields_Heartbeat (msg_data : mod_heartbeat_data) (m_state : model_state)  =
    let mod_f_Heartbeat_TestReqID_result = check_field_mod_f_Heartbeat_TestReqID msg_data in
    if mod_f_Heartbeat_TestReqID_result.is_invalid then
        mod_f_Heartbeat_TestReqID_result
    else
        fields_are_good
;;

let check_field_mod_f_TestRequest_TestReqID_inner0 (msg_data : mod_testrequest_data)  =
    if (good_string msg_data.mod_f_TestRequest_TestReqID) then
        fields_are_good
    else
        (field_invalid "Field TestReqID of Message TestRequest violates the constraint: \"validity constraint.\"")
;;

let check_field_mod_f_TestRequest_TestReqID_outer (msg_data : mod_testrequest_data)  =
    let check_field_mod_f_TestRequest_TestReqID_inner0_result = check_field_mod_f_TestRequest_TestReqID_inner0 msg_data in
    if check_field_mod_f_TestRequest_TestReqID_inner0_result.is_invalid then
        check_field_mod_f_TestRequest_TestReqID_inner0_result
    else
        fields_are_good
;;

let check_field_mod_f_TestRequest_TestReqID (msg_data : mod_testrequest_data)  =
    check_field_mod_f_TestRequest_TestReqID_outer msg_data
;;

let check_fields_TestRequest (msg_data : mod_testrequest_data) (m_state : model_state)  =
    let mod_f_TestRequest_TestReqID_result = check_field_mod_f_TestRequest_TestReqID msg_data in
    if mod_f_TestRequest_TestReqID_result.is_invalid then
        mod_f_TestRequest_TestReqID_result
    else
        fields_are_good
;;

let check_fields_ResendRequest (msg_data : mod_resendrequest_data) (m_state : model_state)  =
    fields_are_good
;;

let check_field_mod_f_SessionLevelReject_Text_inner0 (msg_data : mod_sessionlevelreject_data)  =
    if (good_string msg_data.mod_f_SessionLevelReject_Text) then
        fields_are_good
    else
        (field_invalid "Field Text of Message SessionLevelReject violates the constraint: \"validity constraint.\"")
;;

let check_field_mod_f_SessionLevelReject_Text_outer (msg_data : mod_sessionlevelreject_data)  =
    let check_field_mod_f_SessionLevelReject_Text_inner0_result = check_field_mod_f_SessionLevelReject_Text_inner0 msg_data in
    if check_field_mod_f_SessionLevelReject_Text_inner0_result.is_invalid then
        check_field_mod_f_SessionLevelReject_Text_inner0_result
    else
        fields_are_good
;;

let check_field_mod_f_SessionLevelReject_Text (msg_data : mod_sessionlevelreject_data)  =
    check_field_mod_f_SessionLevelReject_Text_outer msg_data
;;

let check_field_mod_f_SessionLevelReject_RefMsgTyp_inner0 (msg_data : mod_sessionlevelreject_data)  =
    if (good_string msg_data.mod_f_SessionLevelReject_RefMsgTyp) then
        fields_are_good
    else
        (field_invalid "Field RefMsgTyp of Message SessionLevelReject violates the constraint: \"validity constraint.\"")
;;

let check_field_mod_f_SessionLevelReject_RefMsgTyp_outer (msg_data : mod_sessionlevelreject_data)  =
    let check_field_mod_f_SessionLevelReject_RefMsgTyp_inner0_result = check_field_mod_f_SessionLevelReject_RefMsgTyp_inner0 msg_data in
    if check_field_mod_f_SessionLevelReject_RefMsgTyp_inner0_result.is_invalid then
        check_field_mod_f_SessionLevelReject_RefMsgTyp_inner0_result
    else
        fields_are_good
;;

let check_field_mod_f_SessionLevelReject_RefMsgTyp (msg_data : mod_sessionlevelreject_data)  =
    check_field_mod_f_SessionLevelReject_RefMsgTyp_outer msg_data
;;

let check_field_mod_f_SessionLevelReject_SessionRejectReason_inner0 (msg_data : mod_sessionlevelreject_data)  =
    if (List.mem msg_data.mod_f_SessionLevelReject_SessionRejectReason (MOD_FIX_SessionRejectReason_Invalid_Tag_number :: (MOD_FIX_SessionRejectReason_Required_Tag_missing :: (MOD_FIX_SessionRejectReason_Tag_not_defined_for_this_message_type :: (MOD_FIX_SessionRejectReason_Undefined_Tag :: (MOD_FIX_SessionRejectReason_Tag_specified_without_a_value :: (MOD_FIX_SessionRejectReason_Value_is_incorrect__out_of_range__for_this_Tag :: (MOD_FIX_SessionRejectReason_Incorrect_data_format_for_value :: (MOD_FIX_SessionRejectReason_Decryption_problem :: (MOD_FIX_SessionRejectReason_Signature_problem :: (MOD_FIX_SessionRejectReason_CompID_problem :: (MOD_FIX_SessionRejectReason_SendingTime_accuracy_problem :: (MOD_FIX_SessionRejectReason_Invalid_MsgType :: (MOD_FIX_SessionRejectReason_XML_Validation_error :: (MOD_FIX_SessionRejectReason_Tag_appears_more_than_once :: (MOD_FIX_SessionRejectReason_Tag_specified_out_of_required_order :: (MOD_FIX_SessionRejectReason_Repeating_group_fields_out_of_order :: (MOD_FIX_SessionRejectReason_Incorrect_NumInGroup_count_for_repeating_group :: (MOD_FIX_SessionRejectReason_Non_data_value_includes_field_delimiter__SOH_character_ :: (MOD_FIX_SessionRejectReason_Other :: [])))))))))))))))))))) then
        fields_are_good
    else
        (field_invalid "Field SessionRejectReason of Message SessionLevelReject violates the constraint: \" it in [ SessionRejectReason.Invalid_Tag_number, SessionRejectReason.Required_Tag_missing, SessionRejectReason.Tag_not_defined_for_this_message_type, SessionRejectReason.Undefined_Tag, SessionRejectReason.Tag_specified_without_a_value, SessionRejectReason.Value_is_incorrect__out_of_range__for_this_Tag, SessionRejectReason.Incorrect_data_format_for_value, SessionRejectReason.Decryption_problem, SessionRejectReason.Signature_problem, SessionRejectReason.CompID_problem, SessionRejectReason.SendingTime_accuracy_problem, SessionRejectReason.Invalid_MsgType, SessionRejectReason.XML_Validation_error, SessionRejectReason.Tag_appears_more_than_once, SessionRejectReason.Tag_specified_out_of_required_order, SessionRejectReason.Repeating_group_fields_out_of_order, SessionRejectReason.Incorrect_NumInGroup_count_for_repeating_group, SessionRejectReason.Non_data_value_includes_field_delimiter__SOH_character_, SessionRejectReason.Other ]\"")
;;

let check_field_mod_f_SessionLevelReject_SessionRejectReason_outer (msg_data : mod_sessionlevelreject_data)  =
    let check_field_mod_f_SessionLevelReject_SessionRejectReason_inner0_result = check_field_mod_f_SessionLevelReject_SessionRejectReason_inner0 msg_data in
    if check_field_mod_f_SessionLevelReject_SessionRejectReason_inner0_result.is_invalid then
        check_field_mod_f_SessionLevelReject_SessionRejectReason_inner0_result
    else
        fields_are_good
;;

let check_field_mod_f_SessionLevelReject_SessionRejectReason (msg_data : mod_sessionlevelreject_data)  =
    check_field_mod_f_SessionLevelReject_SessionRejectReason_outer msg_data
;;

let check_fields_SessionLevelReject (msg_data : mod_sessionlevelreject_data) (m_state : model_state)  =
    let mod_f_SessionLevelReject_SessionRejectReason_result = check_field_mod_f_SessionLevelReject_SessionRejectReason msg_data in
    if mod_f_SessionLevelReject_SessionRejectReason_result.is_invalid then
        mod_f_SessionLevelReject_SessionRejectReason_result
    else
        let mod_f_SessionLevelReject_RefMsgTyp_result = check_field_mod_f_SessionLevelReject_RefMsgTyp msg_data in
        if mod_f_SessionLevelReject_RefMsgTyp_result.is_invalid then
            mod_f_SessionLevelReject_RefMsgTyp_result
        else
            let mod_f_SessionLevelReject_Text_result = check_field_mod_f_SessionLevelReject_Text msg_data in
            if mod_f_SessionLevelReject_Text_result.is_invalid then
                mod_f_SessionLevelReject_Text_result
            else
                fields_are_good
;;

let check_field_mod_f_SequenceResetRequest_GapFillFlag_inner0 (msg_data : mod_sequenceresetrequest_data)  =
    if (List.mem msg_data.mod_f_SequenceResetRequest_GapFillFlag ((Some MOD_FIX_GapFillFlag_Sequence_Reset) :: ((Some MOD_FIX_GapFillFlag_Gap_Fill_Messages) :: []))) then
        fields_are_good
    else
        (field_invalid "Field GapFillFlag of Message SequenceResetRequest violates the constraint: \" it in [ GapFillFlag.Sequence_Reset, GapFillFlag.Gap_Fill_Messages ]\"")
;;

let check_field_mod_f_SequenceResetRequest_GapFillFlag_outer (msg_data : mod_sequenceresetrequest_data)  =
    let check_field_mod_f_SequenceResetRequest_GapFillFlag_inner0_result = check_field_mod_f_SequenceResetRequest_GapFillFlag_inner0 msg_data in
    if check_field_mod_f_SequenceResetRequest_GapFillFlag_inner0_result.is_invalid then
        check_field_mod_f_SequenceResetRequest_GapFillFlag_inner0_result
    else
        fields_are_good
;;

let check_field_mod_f_SequenceResetRequest_GapFillFlag (msg_data : mod_sequenceresetrequest_data)  =
    (match msg_data.mod_f_SequenceResetRequest_GapFillFlag with
        | None -> fields_are_good
        | Some _ -> (check_field_mod_f_SequenceResetRequest_GapFillFlag_outer msg_data)
    )
;;

let check_fields_SequenceResetRequest (msg_data : mod_sequenceresetrequest_data) (m_state : model_state)  =
    let mod_f_SequenceResetRequest_GapFillFlag_result = check_field_mod_f_SequenceResetRequest_GapFillFlag msg_data in
    if mod_f_SequenceResetRequest_GapFillFlag_result.is_invalid then
        mod_f_SequenceResetRequest_GapFillFlag_result
    else
        fields_are_good
;;

let check_field_mod_f_Logout_Text_inner0 (msg_data : mod_logout_data)  =
    if ((match msg_data.mod_f_Logout_Text with
        | Some cap_string_length_check_var -> (good_string cap_string_length_check_var)
        | None -> true
    )
    ) then
        fields_are_good
    else
        (field_invalid "Field Text of Message Logout violates the constraint: \"validity constraint.\"")
;;

let check_field_mod_f_Logout_Text_outer (msg_data : mod_logout_data)  =
    let check_field_mod_f_Logout_Text_inner0_result = check_field_mod_f_Logout_Text_inner0 msg_data in
    if check_field_mod_f_Logout_Text_inner0_result.is_invalid then
        check_field_mod_f_Logout_Text_inner0_result
    else
        fields_are_good
;;

let check_field_mod_f_Logout_Text (msg_data : mod_logout_data)  =
    (match msg_data.mod_f_Logout_Text with
        | None -> fields_are_good
        | Some _ -> (check_field_mod_f_Logout_Text_outer msg_data)
    )
;;

let check_fields_Logout (msg_data : mod_logout_data) (m_state : model_state)  =
    let mod_f_Logout_Text_result = check_field_mod_f_Logout_Text msg_data in
    if mod_f_Logout_Text_result.is_invalid then
        mod_f_Logout_Text_result
    else
        fields_are_good
;;

let check_fields_FIXLogon (msg_data : mod_fixlogon_data) (m_state : model_state)  =
    fields_are_good
;;

let check_field_mod_f_DontKnowTrade_OrderID_inner0 (msg_data : mod_dontknowtrade_data)  =
    if (good_string msg_data.mod_f_DontKnowTrade_OrderID) then
        fields_are_good
    else
        (field_invalid "Field OrderID of Message DontKnowTrade violates the constraint: \"validity constraint.\"")
;;

let check_field_mod_f_DontKnowTrade_OrderID_outer (msg_data : mod_dontknowtrade_data)  =
    let check_field_mod_f_DontKnowTrade_OrderID_inner0_result = check_field_mod_f_DontKnowTrade_OrderID_inner0 msg_data in
    if check_field_mod_f_DontKnowTrade_OrderID_inner0_result.is_invalid then
        check_field_mod_f_DontKnowTrade_OrderID_inner0_result
    else
        fields_are_good
;;

let check_field_mod_f_DontKnowTrade_OrderID (msg_data : mod_dontknowtrade_data)  =
    check_field_mod_f_DontKnowTrade_OrderID_outer msg_data
;;

let check_field_mod_f_DontKnowTrade_ExecID_inner0 (msg_data : mod_dontknowtrade_data)  =
    if (good_string msg_data.mod_f_DontKnowTrade_ExecID) then
        fields_are_good
    else
        (field_invalid "Field ExecID of Message DontKnowTrade violates the constraint: \"validity constraint.\"")
;;

let check_field_mod_f_DontKnowTrade_ExecID_outer (msg_data : mod_dontknowtrade_data)  =
    let check_field_mod_f_DontKnowTrade_ExecID_inner0_result = check_field_mod_f_DontKnowTrade_ExecID_inner0 msg_data in
    if check_field_mod_f_DontKnowTrade_ExecID_inner0_result.is_invalid then
        check_field_mod_f_DontKnowTrade_ExecID_inner0_result
    else
        fields_are_good
;;

let check_field_mod_f_DontKnowTrade_ExecID (msg_data : mod_dontknowtrade_data)  =
    check_field_mod_f_DontKnowTrade_ExecID_outer msg_data
;;

let check_field_mod_f_DontKnowTrade_DKReason_inner0 (msg_data : mod_dontknowtrade_data)  =
    if (List.mem msg_data.mod_f_DontKnowTrade_DKReason (MOD_FIX_DKReason_unknown_symbol__unknown_security_ :: (MOD_FIX_DKReason_wrong_side :: (MOD_FIX_DKReason_quantity_exceeds_order :: (MOD_FIX_DKReason_no_matching_order :: (MOD_FIX_DKReason_Price_exceeds_limit :: (MOD_FIX_DKReason_calculation_difference :: (MOD_FIX_DKReason_other :: [])))))))) then
        fields_are_good
    else
        (field_invalid "Field DKReason of Message DontKnowTrade violates the constraint: \" it in [ DKReason.unknown_symbol__unknown_security_, DKReason.wrong_side, DKReason.quantity_exceeds_order, DKReason.no_matching_order, DKReason.Price_exceeds_limit, DKReason.calculation_difference, DKReason.other ]\"")
;;

let check_field_mod_f_DontKnowTrade_DKReason_outer (msg_data : mod_dontknowtrade_data)  =
    let check_field_mod_f_DontKnowTrade_DKReason_inner0_result = check_field_mod_f_DontKnowTrade_DKReason_inner0 msg_data in
    if check_field_mod_f_DontKnowTrade_DKReason_inner0_result.is_invalid then
        check_field_mod_f_DontKnowTrade_DKReason_inner0_result
    else
        fields_are_good
;;

let check_field_mod_f_DontKnowTrade_DKReason (msg_data : mod_dontknowtrade_data)  =
    check_field_mod_f_DontKnowTrade_DKReason_outer msg_data
;;

let check_field_mod_f_DontKnowTrade_Side_inner0 (msg_data : mod_dontknowtrade_data)  =
    if (List.mem msg_data.mod_f_DontKnowTrade_Side (MOD_FIX_Side_Buy :: (MOD_FIX_Side_Sell :: (MOD_FIX_Side_As_Defined__for_multi_legs_ :: (MOD_FIX_Side_Sell_Undisclosed :: []))))) then
        fields_are_good
    else
        (field_invalid "Field Side of Message DontKnowTrade violates the constraint: \" it in [ Side.Buy, Side.Sell, Side.As_Defined__for_multi_legs_, Side.Sell_Undisclosed ]\"")
;;

let check_field_mod_f_DontKnowTrade_Side_outer (msg_data : mod_dontknowtrade_data)  =
    let check_field_mod_f_DontKnowTrade_Side_inner0_result = check_field_mod_f_DontKnowTrade_Side_inner0 msg_data in
    if check_field_mod_f_DontKnowTrade_Side_inner0_result.is_invalid then
        check_field_mod_f_DontKnowTrade_Side_inner0_result
    else
        fields_are_good
;;

let check_field_mod_f_DontKnowTrade_Side (msg_data : mod_dontknowtrade_data)  =
    check_field_mod_f_DontKnowTrade_Side_outer msg_data
;;

let check_field_mod_f_DontKnowTrade_Text_inner0 (msg_data : mod_dontknowtrade_data)  =
    if ((match msg_data.mod_f_DontKnowTrade_Text with
        | Some cap_string_length_check_var -> (good_string cap_string_length_check_var)
        | None -> true
    )
    ) then
        fields_are_good
    else
        (field_invalid "Field Text of Message DontKnowTrade violates the constraint: \"validity constraint.\"")
;;

let check_field_mod_f_DontKnowTrade_Text_outer (msg_data : mod_dontknowtrade_data)  =
    let check_field_mod_f_DontKnowTrade_Text_inner0_result = check_field_mod_f_DontKnowTrade_Text_inner0 msg_data in
    if check_field_mod_f_DontKnowTrade_Text_inner0_result.is_invalid then
        check_field_mod_f_DontKnowTrade_Text_inner0_result
    else
        fields_are_good
;;

let check_field_mod_f_DontKnowTrade_Text (msg_data : mod_dontknowtrade_data)  =
    (match msg_data.mod_f_DontKnowTrade_Text with
        | None -> fields_are_good
        | Some _ -> (check_field_mod_f_DontKnowTrade_Text_outer msg_data)
    )
;;

let check_field_mod_f_DontKnowTrade_SecondaryOrderID_inner0 (msg_data : mod_dontknowtrade_data)  =
    if ((match msg_data.mod_f_DontKnowTrade_SecondaryOrderID with
        | Some cap_string_length_check_var -> (good_string cap_string_length_check_var)
        | None -> true
    )
    ) then
        fields_are_good
    else
        (field_invalid "Field SecondaryOrderID of Message DontKnowTrade violates the constraint: \"validity constraint.\"")
;;

let check_field_mod_f_DontKnowTrade_SecondaryOrderID_outer (msg_data : mod_dontknowtrade_data)  =
    let check_field_mod_f_DontKnowTrade_SecondaryOrderID_inner0_result = check_field_mod_f_DontKnowTrade_SecondaryOrderID_inner0 msg_data in
    if check_field_mod_f_DontKnowTrade_SecondaryOrderID_inner0_result.is_invalid then
        check_field_mod_f_DontKnowTrade_SecondaryOrderID_inner0_result
    else
        fields_are_good
;;

let check_field_mod_f_DontKnowTrade_SecondaryOrderID (msg_data : mod_dontknowtrade_data)  =
    (match msg_data.mod_f_DontKnowTrade_SecondaryOrderID with
        | None -> fields_are_good
        | Some _ -> (check_field_mod_f_DontKnowTrade_SecondaryOrderID_outer msg_data)
    )
;;

let check_field_mod_f_DontKnowTrade_EncodedText_inner0 (msg_data : mod_dontknowtrade_data)  =
    if ((match msg_data.mod_f_DontKnowTrade_EncodedText with
        | Some cap_string_length_check_var -> (good_string cap_string_length_check_var)
        | None -> true
    )
    ) then
        fields_are_good
    else
        (field_invalid "Field EncodedText of Message DontKnowTrade violates the constraint: \"validity constraint.\"")
;;

let check_field_mod_f_DontKnowTrade_EncodedText_outer (msg_data : mod_dontknowtrade_data)  =
    let check_field_mod_f_DontKnowTrade_EncodedText_inner0_result = check_field_mod_f_DontKnowTrade_EncodedText_inner0 msg_data in
    if check_field_mod_f_DontKnowTrade_EncodedText_inner0_result.is_invalid then
        check_field_mod_f_DontKnowTrade_EncodedText_inner0_result
    else
        fields_are_good
;;

let check_field_mod_f_DontKnowTrade_EncodedText (msg_data : mod_dontknowtrade_data)  =
    (match msg_data.mod_f_DontKnowTrade_EncodedText with
        | None -> fields_are_good
        | Some _ -> (check_field_mod_f_DontKnowTrade_EncodedText_outer msg_data)
    )
;;

let check_fields_DontKnowTrade (msg_data : mod_dontknowtrade_data) (m_state : model_state)  =
    let mod_f_DontKnowTrade_EncodedText_result = check_field_mod_f_DontKnowTrade_EncodedText msg_data in
    if mod_f_DontKnowTrade_EncodedText_result.is_invalid then
        mod_f_DontKnowTrade_EncodedText_result
    else
        let mod_f_DontKnowTrade_SecondaryOrderID_result = check_field_mod_f_DontKnowTrade_SecondaryOrderID msg_data in
        if mod_f_DontKnowTrade_SecondaryOrderID_result.is_invalid then
            mod_f_DontKnowTrade_SecondaryOrderID_result
        else
            let mod_f_DontKnowTrade_Text_result = check_field_mod_f_DontKnowTrade_Text msg_data in
            if mod_f_DontKnowTrade_Text_result.is_invalid then
                mod_f_DontKnowTrade_Text_result
            else
                let mod_f_DontKnowTrade_Side_result = check_field_mod_f_DontKnowTrade_Side msg_data in
                if mod_f_DontKnowTrade_Side_result.is_invalid then
                    mod_f_DontKnowTrade_Side_result
                else
                    let mod_f_DontKnowTrade_DKReason_result = check_field_mod_f_DontKnowTrade_DKReason msg_data in
                    if mod_f_DontKnowTrade_DKReason_result.is_invalid then
                        mod_f_DontKnowTrade_DKReason_result
                    else
                        let mod_f_DontKnowTrade_ExecID_result = check_field_mod_f_DontKnowTrade_ExecID msg_data in
                        if mod_f_DontKnowTrade_ExecID_result.is_invalid then
                            mod_f_DontKnowTrade_ExecID_result
                        else
                            let mod_f_DontKnowTrade_OrderID_result = check_field_mod_f_DontKnowTrade_OrderID msg_data in
                            if mod_f_DontKnowTrade_OrderID_result.is_invalid then
                                mod_f_DontKnowTrade_OrderID_result
                            else
                                fields_are_good
;;
