(* Aesthetic Integration copyright 2018 *)
open Full_app_enums;;

let encode_PartyIDSource (d)  =
    (match d with
        | FIX_PartyIDSource_BIC_code -> "B"
        | FIX_PartyIDSource_Generally_accepted_market_participant_identifier__e_g__e_mail_address_ -> "C"
        | FIX_PartyIDSource_Proprietary_code -> "D"
        | FIX_PartyIDSource_MIC -> "G"
        | FIX_PartyIDSource_Legal_entity_identifier -> "N"
        | FIX_PartyIDSource_Short_code -> "P"
    )
;;

let encode_PartyRole (d)  =
    (match d with
        | FIX_PartyRole_Executing_Firm -> "1"
        | FIX_PartyRole_ClientID -> "3"
        | FIX_PartyRole_Order_origination_trader__associated_with_order_origination_firm__e_g_g__trader_who_initiates___submits_the_order_ -> "11"
        | FIX_PartyRole_Executing_Trader -> "12"
        | FIX_PartyRole_Order_origination_firm__e_g__Buy_side_firm_ -> "13"
        | FIX_PartyRole_Execution_venue -> "73"
        | FIX_PartyRole_Investment_Decision_Maker__MIFID_II_Clients_ -> "122"
    )
;;

let encode_Algorithm (d)  =
    (match d with
        | FIX_Algorithm_Algorithm -> "22"
    )
;;

let encode_PartySubIDType (d)  =
    (match d with
        | FIX_PartySubIDType_CSD_participant_code__DTCC_ -> "17"
    )
;;

let encode_SecurityIDSource (d)  =
    (match d with
        | FIX_SecurityIDSource_CUSIP -> "1"
        | FIX_SecurityIDSource_ISIN -> "4"
        | FIX_SecurityIDSource_Dummy_CUSIP -> "101"
        | FIX_SecurityIDSource_WKN -> "0"
    )
;;

let encode_Product (d)  =
    (match d with
        | FIX_Product_Corporate -> "3"
        | FIX_Product_Preferred -> "5"
        | FIX_Product_Government -> "6"
        | FIX_Product_Municipal -> "11"
        | FIX_Product_Other -> "12"
    )
;;

let encode_SecurityAltIDSource (d)  =
    (match d with
        | FIX_SecurityAltIDSource_CUSIP -> "1"
        | FIX_SecurityAltIDSource_ISIN -> "4"
        | FIX_SecurityAltIDSource_TRAX_ICMA_Number -> "101"
        | FIX_SecurityAltIDSource_WKN -> "B"
    )
;;

let encode_BenchmarkCurveName (d)  =
    (match d with
        | FIX_BenchmarkCurveName_EDSF -> "EDSF"
        | FIX_BenchmarkCurveName_LIBOR__London_Inter_Bank_Offers_ -> "LIBOR"
        | FIX_BenchmarkCurveName_SWAP -> "SWAP"
    )
;;

let encode_BenchmarkPriceType (d)  =
    (match d with
        | FIX_BenchmarkPriceType_percent_of_par -> "1"
    )
;;

let encode_BenchmarkSecurityIDSource (d)  =
    (match d with
        | FIX_BenchmarkSecurityIDSource_CUSIP -> "1"
        | FIX_BenchmarkSecurityIDSource_ISIN -> "4"
        | FIX_BenchmarkSecurityIDSource_WKN -> "B"
    )
;;

let encode_LegSecurityIDSource (d)  =
    (match d with
        | FIX_LegSecurityIDSource_CUSIP -> "1"
        | FIX_LegSecurityIDSource_ISIN -> "4"
        | FIX_LegSecurityIDSource_MA_Dummy_CUSIP -> "101"
        | FIX_LegSecurityIDSource_WKN -> "B"
    )
;;

let encode_LegProduct (d)  =
    (match d with
        | FIX_LegProduct_AGENCY -> "1"
        | FIX_LegProduct_COMMODITY -> "2"
        | FIX_LegProduct_Corporate -> "3"
        | FIX_LegProduct_CURRENCY -> "4"
        | FIX_LegProduct_EQUITY -> "5"
        | FIX_LegProduct_Government -> "6"
        | FIX_LegProduct_INDEX -> "7"
        | FIX_LegProduct_LOAN -> "8"
        | FIX_LegProduct_MONEYMARKET -> "9"
        | FIX_LegProduct_MORTGAGE -> "10"
        | FIX_LegProduct_MUNICIPAL -> "11"
        | FIX_LegProduct_OTHER -> "12"
        | FIX_LegProduct_FINANCING -> "13"
    )
;;

let encode_LegSide (d)  =
    (match d with
        | FIX_LegSide_buy -> "1"
        | FIX_LegSide_sell -> "2"
        | FIX_LegSide_Opposite -> "C"
    )
;;

let encode_HandlInst (d)  =
    (match d with
        | FIX_HandlInst_Automated_execution_order -> "1"
        | FIX_HandlInst_Manual_Order__best_execution -> "3"
    )
;;

let encode_ExecInst (d)  =
    (match d with
        | FIX_ExecInst_WORK -> "2"
    )
;;

let encode_SettlType (d)  =
    (match d with
        | FIX_SettlType_Regular -> "0"
        | FIX_SettlType_Cash -> "1"
        | FIX_SettlType_T_Plus_1__next_day_ -> "2"
        | FIX_SettlType_T_Plus_2 -> "3"
        | FIX_SettlType_T_Plus_3 -> "4"
        | FIX_SettlType_T_Plus_4 -> "5"
        | FIX_SettlType_Future -> "6"
        | FIX_SettlType_When_and_if_issued -> "7"
        | FIX_SettlType_Sellers_Option -> "8"
        | FIX_SettlType_T_Plus_5 -> "9"
    )
;;

let encode_OrderCapacity (d)  =
    (match d with
        | FIX_OrderCapacity_Any_Other_Trading_Capacity__AOTC_ -> "A"
        | FIX_OrderCapacity_Own_Account -> "P"
        | FIX_OrderCapacity_Matched_Principal -> "R"
    )
;;

let encode_QtyType (d)  =
    (match d with
        | FIX_QtyType_units__shares__par__currency___Always_interpreted_as_par_by_MarketAxess_ -> "0"
        | FIX_QtyType_Contracts -> "1"
    )
;;

let encode_ForexReq (d)  =
    (match d with
        | FIX_ForexReq_No -> "N"
        | FIX_ForexReq_Yes -> "Y"
    )
;;

let encode_IncludeDealers (d)  =
    (match d with
        | FIX_IncludeDealers_Include_Only_Send_to_only_the_dealers -> "1"
        | FIX_IncludeDealers_Include_at_Least__Send_to_dealers -> "2"
    )
;;

let encode_DealerIDSource (d)  =
    (match d with
        | FIX_DealerIDSource_BIC_code -> "B"
        | FIX_DealerIDSource_Generally_accepted_market_participant_identifier -> "C"
        | FIX_DealerIDSource_Proprietary_code -> "D"
    )
;;

let encode_Exclude (d)  =
    (match d with
        | FIX_Exclude_No__include_dealer_ -> "N"
        | FIX_Exclude_Yes__exclude_dealer_ -> "Y"
    )
;;

let encode_TradingProtocol (d)  =
    (match d with
        | FIX_TradingProtocol_DM -> "DM"
        | FIX_TradingProtocol_EU_Price -> "EU Price"
        | FIX_TradingProtocol_LMPrice -> "LMPrice"
        | FIX_TradingProtocol_Price -> "Price"
        | FIX_TradingProtocol_Spread -> "Spread"
        | FIX_TradingProtocol_USDPrice -> "USDPrice"
        | FIX_TradingProtocol_Yield -> "Yield"
        | FIX_TradingProtocol_PFDS_Price -> "PFDS Price"
    )
;;

let encode_MKTXPricingProcess (d)  =
    (match d with
        | FIX_MKTXPricingProcess_Manual -> "1"
        | FIX_MKTXPricingProcess_Phone_Spot -> "2"
        | FIX_MKTXPricingProcess_Auto -> "3"
        | FIX_MKTXPricingProcess_OneStep -> "4"
        | FIX_MKTXPricingProcess_Standard -> "5"
        | FIX_MKTXPricingProcess_Delayed_Spot -> "6"
    )
;;

let encode_MKTXRTSPurpose (d)  =
    (match d with
        | FIX_MKTXRTSPurpose_FundCrossing -> "FundCrossing"
    )
;;

let encode_PriceType (d)  =
    (match d with
        | FIX_PriceType_Percentage -> "1"
        | FIX_PriceType_Spread -> "6"
        | FIX_PriceType_Yield -> "9"
        | FIX_PriceType_NEGATIVE_YIELD -> "97"
        | FIX_PriceType_DECIMAL_UNIT_PRICE -> "98"
    )
;;

let encode_LegSwapType (d)  =
    (match d with
        | FIX_LegSwapType_Par_for_Par -> "1"
        | FIX_LegSwapType_Modified_Duration -> "2"
    )
;;

let encode_MKTXListType (d)  =
    (match d with
        | FIX_MKTXListType_Portfolio -> "Portfolio"
    )
;;

let encode_OrdStatus (d)  =
    (match d with
        | FIX_OrdStatus_New_ -> "0"
        | FIX_OrdStatus_Partially_filled -> "1"
        | FIX_OrdStatus_Filled_ -> "2"
        | FIX_OrdStatus_Cancelled -> "4"
        | FIX_OrdStatus_Rejected -> "8"
        | FIX_OrdStatus_Pending_New -> "A"
        | FIX_OrdStatus_Accepted_for_bidding -> "D"
    )
;;

let encode_CxlRejResponseTo (d)  =
    (match d with
        | FIX_CxlRejResponseTo_Order_Cancel_Request_ -> "1"
    )
;;

let encode_CxlRejReason (d)  =
    (match d with
        | FIX_CxlRejReason_All_cases_where_it_is_too_late_to_cancel -> "0"
        | FIX_CxlRejReason_Unknown_Order -> "1"
    )
;;

let encode_BusinessRejectReason (d)  =
    (match d with
        | FIX_BusinessRejectReason_Other -> "0"
        | FIX_BusinessRejectReason_Unknown -> "1"
        | FIX_BusinessRejectReason_Unknown_Security -> "2"
        | FIX_BusinessRejectReason_Unsupported_Message -> "3"
        | FIX_BusinessRejectReason_Application_Not_Available -> "4"
        | FIX_BusinessRejectReason_Conditionally_required_field_missing -> "5"
    )
;;

let encode_AllocTransType (d)  =
    (match d with
        | FIX_AllocTransType_New -> "0"
        | FIX_AllocTransType_Replace -> "1"
        | FIX_AllocTransType_Cancel -> "2"
        | FIX_AllocTransType_Preliminary -> "3"
        | FIX_AllocTransType_Calculated -> "4"
    )
;;

let encode_AllocCancReplaceReason (d)  =
    (match d with
        | FIX_AllocCancReplaceReason_Other -> "99"
        | FIX_AllocCancReplaceReason_Original_details_incomplete___incorrect -> "1"
    )
;;

let encode_AllocReportType (d)  =
    (match d with
        | FIX_AllocReportType_Sellside_calculated_using_preliminary -> "3"
        | FIX_AllocReportType_Sellside_calculated_without_preliminary -> "4"
    )
;;

let encode_AllocStatus (d)  =
    (match d with
        | FIX_AllocStatus_Accepted -> "0"
        | FIX_AllocStatus_received__not_yet_processed_ -> "3"
        | FIX_AllocStatus_block_level_reject -> "1"
    )
;;

let encode_AllocNoOrdersType (d)  =
    (match d with
        | FIX_AllocNoOrdersType_Not_specified -> "0"
        | FIX_AllocNoOrdersType_Explicit_list_provided -> "1"
    )
;;

let encode_YieldType (d)  =
    (match d with
        | FIX_YieldType_CALL -> "CALL"
        | FIX_YieldType_MATURITY -> "MATURITY"
        | FIX_YieldType_PUT -> "PUT"
    )
;;

let encode_AllocRejCode (d)  =
    (match d with
        | FIX_AllocRejCode_Unknown_account_s_ -> "0"
        | FIX_AllocRejCode_Incorrect_quantity -> "1"
        | FIX_AllocRejCode_Unknown_executing_broker__dealer_ -> "3"
        | FIX_AllocRejCode_unknown_OrderID -> "5"
        | FIX_AllocRejCode_Unknown_ListID -> "6"
        | FIX_AllocRejCode_Other -> "7"
        | FIX_AllocRejCode_Incorrect_allocated_quantity -> "8"
        | FIX_AllocRejCode_calculation_difference -> "9"
        | FIX_AllocRejCode_unknown_or_stale_ExecID -> "10"
        | FIX_AllocRejCode_mismatched_data_value -> "11"
        | FIX_AllocRejCode_Unknown_ClOrdID -> "12"
    )
;;

let encode_AllocType (d)  =
    (match d with
        | FIX_AllocType_Buyside_preliminary -> "2"
    )
;;

let encode_SessionRejectReason (d)  =
    (match d with
        | FIX_SessionRejectReason_Invalid_Tag_number -> "0"
        | FIX_SessionRejectReason_Required_Tag_missing -> "1"
        | FIX_SessionRejectReason_Tag_not_defined_for_this_message_type -> "2"
        | FIX_SessionRejectReason_Undefined_Tag -> "3"
        | FIX_SessionRejectReason_Tag_specified_without_a_value -> "4"
        | FIX_SessionRejectReason_Value_is_incorrect__out_of_range__for_this_Tag -> "5"
        | FIX_SessionRejectReason_Incorrect_data_format_for_value -> "6"
        | FIX_SessionRejectReason_Decryption_problem -> "7"
        | FIX_SessionRejectReason_Signature_problem -> "8"
        | FIX_SessionRejectReason_CompID_problem -> "9"
        | FIX_SessionRejectReason_SendingTime_accuracy_problem -> "10"
        | FIX_SessionRejectReason_Invalid_MsgType -> "11"
        | FIX_SessionRejectReason_XML_Validation_error -> "12"
        | FIX_SessionRejectReason_Tag_appears_more_than_once -> "13"
        | FIX_SessionRejectReason_Tag_specified_out_of_required_order -> "14"
        | FIX_SessionRejectReason_Repeating_group_fields_out_of_order -> "15"
        | FIX_SessionRejectReason_Incorrect_NumInGroup_count_for_repeating_group -> "16"
        | FIX_SessionRejectReason_Non_data_value_includes_field_delimiter__SOH_character_ -> "17"
        | FIX_SessionRejectReason_Other -> "99"
    )
;;

let encode_GapFillFlag (d)  =
    (match d with
        | FIX_GapFillFlag_Sequence_Reset -> "N"
        | FIX_GapFillFlag_Gap_Fill_Messages -> "Y"
    )
;;

let encode_MKTXTrdRegPublicationReason (d)  =
    (match d with
        | FIX_MKTXTrdRegPublicationReason_LRGS -> "6"
        | FIX_MKTXTrdRegPublicationReason_ILQD -> "7"
        | FIX_MKTXTrdRegPublicationReason_SIZE -> "8"
    )
;;

let encode_TrdRegPublicationType (d)  =
    (match d with
        | FIX_TrdRegPublicationType_Pretrade_Transparency_Waiver -> "0"
        | FIX_TrdRegPublicationType_Exempt_From_Publication -> "1"
    )
;;

let encode_TrdRegPublicationReason (d)  =
    (match d with
        | FIX_TrdRegPublicationReason_NLIQ -> "0"
        | FIX_TrdRegPublicationReason_OLIQ -> "1"
        | FIX_TrdRegPublicationReason_PRIC -> "2"
        | FIX_TrdRegPublicationReason_RFPT -> "3"
        | FIX_TrdRegPublicationReason_ILQD -> "4"
        | FIX_TrdRegPublicationReason_SIZE -> "5"
        | FIX_TrdRegPublicationReason_LRGS -> "6"
        | FIX_TrdRegPublicationReason_ILQD_2 -> "7"
        | FIX_TrdRegPublicationReason_SIZE_2 -> "8"
    )
;;

let encode_MKTXESCBStblty (d)  =
    (match d with
        | FIX_MKTXESCBStblty_Investment_Operations -> "I"
        | FIX_MKTXESCBStblty_Stability_Operations -> "S"
    )
;;

let encode_PreTradeWaiver (d)  =
    (match d with
        | FIX_PreTradeWaiver_LRGS -> "6"
        | FIX_PreTradeWaiver_ILQD -> "7"
        | FIX_PreTradeWaiver_SIZE -> "8"
    )
;;

let encode_MKTXTradeReportingInd (d)  =
    (match d with
        | FIX_MKTXTradeReportingInd_Trade_not_yet_reported -> "0"
        | FIX_MKTXTradeReportingInd_Trade_reported_on_book -> "1"
        | FIX_MKTXTradeReportingInd_Trade_reported_as_systematic_internaliser -> "2"
        | FIX_MKTXTradeReportingInd_Trade_reported_as_nonsystematic_internaliser -> "3"
        | FIX_MKTXTradeReportingInd_Trade_reported_under_sub_delegation_arrangement -> "4"
    )
;;

let encode_TradeReportingIndicator (d)  =
    (match d with
        | FIX_TradeReportingIndicator_Trade_has_not_been_reported -> "0"
        | FIX_TradeReportingIndicator_Trade_has_been_reported_by_a_trading_venue_as_an_On_book_trade -> "1"
        | FIX_TradeReportingIndicator_Trade_has_been_reported_as_a_systematic_internaliser_seller_trade -> "2"
        | FIX_TradeReportingIndicator_Trade_has_been_reported_as_a_systematic_internaliser_buyer_trade -> "3"
        | FIX_TradeReportingIndicator_Trade_has_been_reported_as_a_nonsystematic_internaliser_seller_trade -> "4"
    )
;;

let encode_InternalCrossingFlag (d)  =
    (match d with
        | FIX_InternalCrossingFlag_FundCrossing -> "FundCrossing"
    )
;;

let encode_RegulatoryTradeIDType (d)  =
    (match d with
        | FIX_RegulatoryTradeIDType_Trading_venue_transaction_identifier -> "5"
    )
;;

let encode_ExecType (d)  =
    (match d with
        | FIX_ExecType_New -> "0"
        | FIX_ExecType_Cancelled -> "4"
        | FIX_ExecType_Rejected -> "8"
        | FIX_ExecType_Trade__partial_fill_or_fill_ -> "F"
        | FIX_ExecType_Trade_Correct -> "G"
        | FIX_ExecType_Trade_Cancel -> "H"
    )
;;

let encode_OrdRejReason (d)  =
    (match d with
        | FIX_OrdRejReason_Unknown_symbol -> "1"
        | FIX_OrdRejReason_Duplicate_order -> "6"
        | FIX_OrdRejReason_Unsupported_order_characteristic -> "11"
        | FIX_OrdRejReason_Incorrect_quantity -> "13"
        | FIX_OrdRejReason_Other -> "99"
    )
;;

let encode_CompetitiveStatus (d)  =
    (match d with
        | FIX_CompetitiveStatus_Client_Passed -> "Client Passed"
        | FIX_CompetitiveStatus_second_best -> "Covered"
        | FIX_CompetitiveStatus_Did_not_trade -> "DNT"
        | FIX_CompetitiveStatus_Traded___Amended -> "Done"
        | FIX_CompetitiveStatus_Done_Awaiting_Book_Confirmation -> "Done-ABC"
        | FIX_CompetitiveStatus_Done_Awaiting_Spot_Confirmation -> "Done-ASC"
        | FIX_CompetitiveStatus_Dealer_did_not_respond_to_enquiry_before_client_traded -> "EXP-DNQ"
        | FIX_CompetitiveStatus_price_expired -> "EXP-Price"
        | FIX_CompetitiveStatus_third_best__or_worse -> "Missed"
        | FIX_CompetitiveStatus_Dealer_passed -> "Passed"
        | FIX_CompetitiveStatus_For_Covered_or_Best -> "Tied"
        | FIX_CompetitiveStatus_Tied_for_Cover -> "Tied for Cover"
        | FIX_CompetitiveStatus_No_response_from_dealer -> "Timed Out"
        | FIX_CompetitiveStatus_Timed_Out__R_ -> "Timed Out (R)"
        | FIX_CompetitiveStatus_Traded -> "Traded"
    )
;;

let encode_MKTXAnalysisTo (d)  =
    (match d with
        | FIX_MKTXAnalysisTo_Avg -> "Avg"
        | FIX_MKTXAnalysisTo_BondTicker -> "BondTicker"
        | FIX_MKTXAnalysisTo_CompositeClose -> "CompositeClose"
        | FIX_MKTXAnalysisTo_CompositeMid -> "CompositeMid"
        | FIX_MKTXAnalysisTo_Cover -> "Cover"
        | FIX_MKTXAnalysisTo_Internal_Target -> "Internal Target"
    )
;;

let encode_LastCapacity (d)  =
    (match d with
        | FIX_LastCapacity_Agent -> "1"
        | FIX_LastCapacity_Cross_as_Agent -> "2"
        | FIX_LastCapacity_Cross_as_Principal -> "3"
        | FIX_LastCapacity_Principal -> "4"
        | FIX_LastCapacity_Matched_Principal -> "5"
    )
;;

let encode_MKTXTradeStyle (d)  =
    (match d with
        | FIX_MKTXTradeStyle_Portfolio -> "0"
    )
;;

let encode_MKTXAutoExType (d)  =
    (match d with
        | FIX_MKTXAutoExType_If_the_inquiry_is_submitted_for_auto_ex_via_auto_submit_ -> "A"
        | FIX_MKTXAutoExType_If_the_inquiry_is_submitted_for_auto_ex_from_manual_workstation -> "M"
    )
;;

let encode_MKTXAutoExStatus (d)  =
    (match d with
        | FIX_MKTXAutoExStatus_If_the_inquiry_was_auto_executed_ -> "Auto-Executed"
        | FIX_MKTXAutoExStatus_If_the_inquiry_did_not_execute_either_manually_or_through_auto_ex_process_ -> "DNT"
        | FIX_MKTXAutoExStatus_If_the_inquiry_fail_to_auto_execute_but_was_later_executed_manually_ -> "Manually Executed"
    )
;;

let encode_MKTXAutoExRefLevelType (d)  =
    (match d with
        | FIX_MKTXAutoExRefLevelType_Level_was_provided_on_the_RTS_message_or_manually_entered_in_the_Limit_column_on_the_Workstation_ -> "Client Limit"
        | FIX_MKTXAutoExRefLevelType_Composite_Plus_value_is_being_used_as_Execution_reference_ -> "Composite+"
        | FIX_MKTXAutoExRefLevelType_Level_was_manually_entered_in_the_Execution_Reference_column_on_the_Workstation_ -> "Manual"
    )
;;

let encode_DKReason (d)  =
    (match d with
        | FIX_DKReason_unknown_symbol__unknown_security_ -> "A"
        | FIX_DKReason_wrong_side -> "B"
        | FIX_DKReason_quantity_exceeds_order -> "C"
        | FIX_DKReason_no_matching_order -> "D"
        | FIX_DKReason_Price_exceeds_limit -> "E"
        | FIX_DKReason_calculation_difference -> "F"
        | FIX_DKReason_other -> "Z"
    )
;;

let encode_Side (d)  =
    (match d with
        | FIX_Side_Buy -> "1"
        | FIX_Side_Sell -> "2"
        | FIX_Side_As_Defined__for_multi_legs_ -> "B"
        | FIX_Side_Sell_Undisclosed -> "H"
    )
;;

let encode_week (d)  =
    (match d with
        | FIX_week_noweek -> "noweek"
        | FIX_week_w1 -> "w1"
        | FIX_week_w2 -> "w2"
        | FIX_week_w3 -> "w3"
        | FIX_week_w4 -> "w4"
        | FIX_week_w5 -> "w5"
    )
;;
