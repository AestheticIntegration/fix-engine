(* Imandra Inc. copyright 2021 *)
[@@@program]
[@@@import "../src-protocol-exts/full_app_enums.iml"]
open Full_app_enums;;
[@@@import "../src-core-pp/parser_utils.iml"]
open Parser_utils.Parser;;


let parse_inner_ExecInst (str)  =
    (match str with
        | "1" -> (FIX_ExecInst_NotHeld)
        | "2" -> (FIX_ExecInst_Work)
        | "3" -> (FIX_ExecInst_GoAlong)
        | "4" -> (FIX_ExecInst_OverTheDay)
        | "5" -> (FIX_ExecInst_Held)
        | "6" -> (FIX_ExecInst_ParticipateDoNotInitiate)
        | "7" -> (FIX_ExecInst_StrictScale)
        | "8" -> (FIX_ExecInst_TryToScale)
        | "9" -> (FIX_ExecInst_StayOnBidSide)
        | "0" -> (FIX_ExecInst_StayOnOfferSide)
        | "A" -> (FIX_ExecInst_NoCross)
        | "B" -> (FIX_ExecInst_OKToCross)
        | "C" -> (FIX_ExecInst_CallFirst)
        | "D" -> (FIX_ExecInst_PercentOfVolume)
        | "E" -> (FIX_ExecInst_DoNotIncrease)
        | "F" -> (FIX_ExecInst_DoNotReduce)
        | "G" -> (FIX_ExecInst_AllOrNone)
        | "H" -> (FIX_ExecInst_ReinstateOnSystemFailure)
        | "I" -> (FIX_ExecInst_InstitutionsOnly)
        | "J" -> (FIX_ExecInst_ReinstateOnTradingHalt)
        | "K" -> (FIX_ExecInst_CancelOnTradingHalt)
        | "L" -> (FIX_ExecInst_LastPeg)
        | "M" -> (FIX_ExecInst_MidPricePeg)
        | "N" -> (FIX_ExecInst_NonNegotiable)
        | "O" -> (FIX_ExecInst_OpeningPeg)
        | "P" -> (FIX_ExecInst_MarketPeg)
        | "Q" -> (FIX_ExecInst_CancelOnSystemFailure)
        | "R" -> (FIX_ExecInst_PrimaryPeg)
        | "S" -> (FIX_ExecInst_Suspend)
        | "U" -> (FIX_ExecInst_CustomerDisplayInstruction)
        | "V" -> (FIX_ExecInst_Netting)
        | "W" -> (FIX_ExecInst_PegToVWAP)
        | "X" -> (FIX_ExecInst_TradeAlong)
        | "Y" -> (FIX_ExecInst_TryToStop)
        | "Z" -> (FIX_ExecInst_CancelIfNotBest)
        | "a" -> (FIX_ExecInst_TrailingStopPeg)
        | "b" -> (FIX_ExecInst_StrictLimit)
        | "c" -> (FIX_ExecInst_IgnorePriceValidityChecks)
        | "d" -> (FIX_ExecInst_PegToLimitPrice)
        | "e" -> (FIX_ExecInst_WorkToTargetStrategy)
        | s -> (FIX_INVALID_ExecInst s)
    )
;;

let parse_ExecInst (str)  =
    let x = split_to_list str ' '
    in
    Some (List.map parse_inner_ExecInst x)
;;

let parse_ExecType (str)  =
    (match str with
        | "0" -> (Some (FIX_ExecType_New))
        | "3" -> (Some (FIX_ExecType_DoneForDay))
        | "4" -> (Some (FIX_ExecType_Canceled))
        | "5" -> (Some (FIX_ExecType_Replaced))
        | "6" -> (Some (FIX_ExecType_PendingCancel))
        | "7" -> (Some (FIX_ExecType_Stopped))
        | "8" -> (Some (FIX_ExecType_Rejected))
        | "9" -> (Some (FIX_ExecType_Suspended))
        | "A" -> (Some (FIX_ExecType_PendingNew))
        | "B" -> (Some (FIX_ExecType_Calculated))
        | "C" -> (Some (FIX_ExecType_Expired))
        | "D" -> (Some (FIX_ExecType_Restated))
        | "E" -> (Some (FIX_ExecType_PendingReplace))
        | "F" -> (Some (FIX_ExecType_Trade))
        | "G" -> (Some (FIX_ExecType_TradeCorrect))
        | "H" -> (Some (FIX_ExecType_TradeCancel))
        | "I" -> (Some (FIX_ExecType_OrderStatus))
        | s -> (Some (FIX_INVALID_ExecType s))
    )
;;

let parse_OrdStatus (str)  =
    (match str with
        | "0" -> (Some (FIX_OrdStatus_New))
        | "1" -> (Some (FIX_OrdStatus_PartiallyFilled))
        | "2" -> (Some (FIX_OrdStatus_Filled))
        | "3" -> (Some (FIX_OrdStatus_DoneForDay))
        | "4" -> (Some (FIX_OrdStatus_Canceled))
        | "6" -> (Some (FIX_OrdStatus_PendingCancel))
        | "7" -> (Some (FIX_OrdStatus_Stopped))
        | "8" -> (Some (FIX_OrdStatus_Rejected))
        | "9" -> (Some (FIX_OrdStatus_Suspended))
        | "A" -> (Some (FIX_OrdStatus_PendingNew))
        | "B" -> (Some (FIX_OrdStatus_Calculated))
        | "C" -> (Some (FIX_OrdStatus_Expired))
        | "D" -> (Some (FIX_OrdStatus_AcceptedForBidding))
        | "E" -> (Some (FIX_OrdStatus_PendingReplace))
        | "5" -> (Some (FIX_OrdStatus_Replaced))
        | s -> (Some (FIX_INVALID_OrdStatus s))
    )
;;

let parse_OrdType (str)  =
    (match str with
        | "1" -> (Some (FIX_OrdType_Market))
        | "2" -> (Some (FIX_OrdType_Limit))
        | "3" -> (Some (FIX_OrdType_Stop))
        | "4" -> (Some (FIX_OrdType_StopLimit))
        | "6" -> (Some (FIX_OrdType_WithOrWithout))
        | "7" -> (Some (FIX_OrdType_LimitOrBetter))
        | "8" -> (Some (FIX_OrdType_LimitWithOrWithout))
        | "9" -> (Some (FIX_OrdType_OnBasis))
        | "D" -> (Some (FIX_OrdType_PreviouslyQuoted))
        | "E" -> (Some (FIX_OrdType_PreviouslyIndicated))
        | "G" -> (Some (FIX_OrdType_ForexSwap))
        | "I" -> (Some (FIX_OrdType_Funari))
        | "J" -> (Some (FIX_OrdType_MarketIfTouched))
        | "K" -> (Some (FIX_OrdType_MarketWithLeftOverAsLimit))
        | "L" -> (Some (FIX_OrdType_PreviousFundValuationPoint))
        | "M" -> (Some (FIX_OrdType_NextFundValuationPoint))
        | "P" -> (Some (FIX_OrdType_Pegged))
        | "s" -> (Some (FIX_OrdType_StopSpread))
        | s -> (Some (FIX_INVALID_OrdType s))
    )
;;

let parse_PartySubIDType (str)  =
    (match str with
        | "1" -> (Some (FIX_PartySubIDType_Firm))
        | "2" -> (Some (FIX_PartySubIDType_Person))
        | "3" -> (Some (FIX_PartySubIDType_System))
        | "4" -> (Some (FIX_PartySubIDType_Application))
        | "5" -> (Some (FIX_PartySubIDType_FullLegalNameOfFirm))
        | "6" -> (Some (FIX_PartySubIDType_PostalAddress))
        | "7" -> (Some (FIX_PartySubIDType_PhoneNumber))
        | "8" -> (Some (FIX_PartySubIDType_EmailAddress))
        | "9" -> (Some (FIX_PartySubIDType_ContactName))
        | "10" -> (Some (FIX_PartySubIDType_SecuritiesAccountNumber))
        | "11" -> (Some (FIX_PartySubIDType_RegistrationNumber))
        | "12" -> (Some (FIX_PartySubIDType_RegisteredAddressForConfirmation))
        | "13" -> (Some (FIX_PartySubIDType_RegulatoryStatus))
        | "14" -> (Some (FIX_PartySubIDType_RegistrationName))
        | "15" -> (Some (FIX_PartySubIDType_CashAccountNumber))
        | "16" -> (Some (FIX_PartySubIDType_BIC))
        | "17" -> (Some (FIX_PartySubIDType_CSDParticipantMemberCode))
        | "18" -> (Some (FIX_PartySubIDType_RegisteredAddress))
        | "19" -> (Some (FIX_PartySubIDType_FundAccountName))
        | "20" -> (Some (FIX_PartySubIDType_TelexNumber))
        | "21" -> (Some (FIX_PartySubIDType_FaxNumber))
        | "22" -> (Some (FIX_PartySubIDType_SecuritiesAccountName))
        | "23" -> (Some (FIX_PartySubIDType_CashAccountName))
        | "24" -> (Some (FIX_PartySubIDType_Department))
        | "25" -> (Some (FIX_PartySubIDType_LocationDesk))
        | "26" -> (Some (FIX_PartySubIDType_PositionAccountType))
        | s -> (Some (FIX_INVALID_PartySubIDType s))
    )
;;

let parse_Side (str)  =
    (match str with
        | "1" -> (Some (FIX_Side_Buy))
        | "2" -> (Some (FIX_Side_Sell))
        | "3" -> (Some (FIX_Side_BuyMinus))
        | "4" -> (Some (FIX_Side_SellPlus))
        | "5" -> (Some (FIX_Side_SellShort))
        | "6" -> (Some (FIX_Side_SellShortExempt))
        | "7" -> (Some (FIX_Side_Undisclosed))
        | "8" -> (Some (FIX_Side_Cross))
        | "9" -> (Some (FIX_Side_CrossShort))
        | "A" -> (Some (FIX_Side_CrossShortExempt))
        | "B" -> (Some (FIX_Side_AsDefined))
        | "C" -> (Some (FIX_Side_Opposite))
        | "D" -> (Some (FIX_Side_Subscribe))
        | "E" -> (Some (FIX_Side_Redeem))
        | "F" -> (Some (FIX_Side_Lend))
        | "G" -> (Some (FIX_Side_Borrow))
        | s -> (Some (FIX_INVALID_Side s))
    )
;;

[@@@logic]
