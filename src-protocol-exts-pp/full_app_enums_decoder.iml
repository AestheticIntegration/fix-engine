(* Imandra Inc. copyright 2021 *)
[@@@program]
[@@@require "decoders-yojson"]
open Decoders_yojson.Basic.Decode;;
[@@@require "decoders-yojson"]
open Decoders_yojson.Basic.Decode.Infix;;
[@@@import "../src-protocol-exts/full_app_enums.iml"]
open Full_app_enums;;


let string_to_week_opt (d)  =
    (match d with
        | "noweek" -> (Some FIX_week_noweek)
        | "w1" -> (Some FIX_week_w1)
        | "w2" -> (Some FIX_week_w2)
        | "w3" -> (Some FIX_week_w3)
        | "w4" -> (Some FIX_week_w4)
        | "w5" -> (Some FIX_week_w5)
        | _ -> None
    )
;;

let string_to_nosides_opt (d)  =
    (match d with
        | "OneSide" -> (Some FIX_NoSides_OneSide)
        | "BothSides" -> (Some FIX_NoSides_BothSides)
        | _ -> None
    )
;;

let string_to_accounttype_opt (d)  =
    (match d with
        | "CarriedCustomerSide" -> (Some FIX_AccountType_CarriedCustomerSide)
        | "CarriedNonCustomerSide" -> (Some FIX_AccountType_CarriedNonCustomerSide)
        | "HouseTrader" -> (Some FIX_AccountType_HouseTrader)
        | "FloorTrader" -> (Some FIX_AccountType_FloorTrader)
        | "CarriedNonCustomerSideCrossMargined" -> (Some FIX_AccountType_CarriedNonCustomerSideCrossMargined)
        | "HouseTraderCrossMargined" -> (Some FIX_AccountType_HouseTraderCrossMargined)
        | "JointBackOfficeAccount" -> (Some FIX_AccountType_JointBackOfficeAccount)
        | _ -> None
    )
;;

let string_to_acctidsource_opt (d)  =
    (match d with
        | "BIC" -> (Some FIX_AcctIDSource_BIC)
        | "SIDCode" -> (Some FIX_AcctIDSource_SIDCode)
        | "TFM" -> (Some FIX_AcctIDSource_TFM)
        | "OMGEO" -> (Some FIX_AcctIDSource_OMGEO)
        | "DTCCCode" -> (Some FIX_AcctIDSource_DTCCCode)
        | "Other" -> (Some FIX_AcctIDSource_Other)
        | _ -> None
    )
;;

let string_to_adjustment_opt (d)  =
    (match d with
        | "Cancel" -> (Some FIX_Adjustment_Cancel)
        | "Error" -> (Some FIX_Adjustment_Error)
        | "Correction" -> (Some FIX_Adjustment_Correction)
        | _ -> None
    )
;;

let string_to_adjustmenttype_opt (d)  =
    (match d with
        | "ProcessRequestAsMarginDisposition" -> (Some FIX_AdjustmentType_ProcessRequestAsMarginDisposition)
        | "DeltaPlus" -> (Some FIX_AdjustmentType_DeltaPlus)
        | "DeltaMinus" -> (Some FIX_AdjustmentType_DeltaMinus)
        | "Final" -> (Some FIX_AdjustmentType_Final)
        | _ -> None
    )
;;

let string_to_advside_opt (d)  =
    (match d with
        | "Buy" -> (Some FIX_AdvSide_Buy)
        | "Sell" -> (Some FIX_AdvSide_Sell)
        | "Cross" -> (Some FIX_AdvSide_Cross)
        | "Trade" -> (Some FIX_AdvSide_Trade)
        | _ -> None
    )
;;

let string_to_advtranstype_opt (d)  =
    (match d with
        | "New" -> (Some FIX_AdvTransType_New)
        | "Cancel" -> (Some FIX_AdvTransType_Cancel)
        | "Replace" -> (Some FIX_AdvTransType_Replace)
        | _ -> None
    )
;;

let string_to_affirmstatus_opt (d)  =
    (match d with
        | "Received" -> (Some FIX_AffirmStatus_Received)
        | "ConfirmRejected" -> (Some FIX_AffirmStatus_ConfirmRejected)
        | "Affirmed" -> (Some FIX_AffirmStatus_Affirmed)
        | _ -> None
    )
;;

let string_to_aggregatedbook_opt (d)  =
    (match d with
        | "BookEntriesToBeAggregated" -> (Some FIX_AggregatedBook_BookEntriesToBeAggregated)
        | "BookEntriesShouldNotBeAggregated" -> (Some FIX_AggregatedBook_BookEntriesShouldNotBeAggregated)
        | _ -> None
    )
;;

let string_to_allocaccounttype_opt (d)  =
    (match d with
        | "CarriedCustomerSide" -> (Some FIX_AllocAccountType_CarriedCustomerSide)
        | "CarriedNonCustomerSide" -> (Some FIX_AllocAccountType_CarriedNonCustomerSide)
        | "HouseTrader" -> (Some FIX_AllocAccountType_HouseTrader)
        | "FloorTrader" -> (Some FIX_AllocAccountType_FloorTrader)
        | "CarriedNonCustomerSideCrossMargined" -> (Some FIX_AllocAccountType_CarriedNonCustomerSideCrossMargined)
        | "HouseTraderCrossMargined" -> (Some FIX_AllocAccountType_HouseTraderCrossMargined)
        | "JointBackOfficeAccount" -> (Some FIX_AllocAccountType_JointBackOfficeAccount)
        | _ -> None
    )
;;

let string_to_alloccancreplacereason_opt (d)  =
    (match d with
        | "OriginalDetailsIncomplete" -> (Some FIX_AllocCancReplaceReason_OriginalDetailsIncomplete)
        | "ChangeInUnderlyingOrderDetails" -> (Some FIX_AllocCancReplaceReason_ChangeInUnderlyingOrderDetails)
        | "Other" -> (Some FIX_AllocCancReplaceReason_Other)
        | _ -> None
    )
;;

let string_to_allochandlinst_opt (d)  =
    (match d with
        | "Match" -> (Some FIX_AllocHandlInst_Match)
        | "Forward" -> (Some FIX_AllocHandlInst_Forward)
        | "ForwardAndMatch" -> (Some FIX_AllocHandlInst_ForwardAndMatch)
        | _ -> None
    )
;;

let string_to_allocintermedreqtype_opt (d)  =
    (match d with
        | "PendingAccept" -> (Some FIX_AllocIntermedReqType_PendingAccept)
        | "PendingRelease" -> (Some FIX_AllocIntermedReqType_PendingRelease)
        | "PendingReversal" -> (Some FIX_AllocIntermedReqType_PendingReversal)
        | "Accept" -> (Some FIX_AllocIntermedReqType_Accept)
        | "BlockLevelReject" -> (Some FIX_AllocIntermedReqType_BlockLevelReject)
        | "AccountLevelReject" -> (Some FIX_AllocIntermedReqType_AccountLevelReject)
        | _ -> None
    )
;;

let string_to_alloclinktype_opt (d)  =
    (match d with
        | "FXNetting" -> (Some FIX_AllocLinkType_FXNetting)
        | "FXSwap" -> (Some FIX_AllocLinkType_FXSwap)
        | _ -> None
    )
;;

let string_to_allocnoorderstype_opt (d)  =
    (match d with
        | "NotSpecified" -> (Some FIX_AllocNoOrdersType_NotSpecified)
        | "ExplicitListProvided" -> (Some FIX_AllocNoOrdersType_ExplicitListProvided)
        | _ -> None
    )
;;

let string_to_allocrejcode_opt (d)  =
    (match d with
        | "UnknownAccount" -> (Some FIX_AllocRejCode_UnknownAccount)
        | "IncorrectQuantity" -> (Some FIX_AllocRejCode_IncorrectQuantity)
        | "IncorrectAveragegPrice" -> (Some FIX_AllocRejCode_IncorrectAveragegPrice)
        | "UnknownExecutingBrokerMnemonic" -> (Some FIX_AllocRejCode_UnknownExecutingBrokerMnemonic)
        | "CommissionDifference" -> (Some FIX_AllocRejCode_CommissionDifference)
        | "UnknownOrderID" -> (Some FIX_AllocRejCode_UnknownOrderID)
        | "UnknownListID" -> (Some FIX_AllocRejCode_UnknownListID)
        | "OtherSeeText" -> (Some FIX_AllocRejCode_OtherSeeText)
        | "IncorrectAllocatedQuantity" -> (Some FIX_AllocRejCode_IncorrectAllocatedQuantity)
        | "CalculationDifference" -> (Some FIX_AllocRejCode_CalculationDifference)
        | "UnknownOrStaleExecID" -> (Some FIX_AllocRejCode_UnknownOrStaleExecID)
        | "MismatchedData" -> (Some FIX_AllocRejCode_MismatchedData)
        | "UnknownClOrdID" -> (Some FIX_AllocRejCode_UnknownClOrdID)
        | "WarehouseRequestRejected" -> (Some FIX_AllocRejCode_WarehouseRequestRejected)
        | _ -> None
    )
;;

let string_to_allocreporttype_opt (d)  =
    (match d with
        | "SellsideCalculatedUsingPreliminary" -> (Some FIX_AllocReportType_SellsideCalculatedUsingPreliminary)
        | "SellsideCalculatedWithoutPreliminary" -> (Some FIX_AllocReportType_SellsideCalculatedWithoutPreliminary)
        | "WarehouseRecap" -> (Some FIX_AllocReportType_WarehouseRecap)
        | "RequestToIntermediary" -> (Some FIX_AllocReportType_RequestToIntermediary)
        | _ -> None
    )
;;

let string_to_allocsettlinsttype_opt (d)  =
    (match d with
        | "UseDefaultInstructions" -> (Some FIX_AllocSettlInstType_UseDefaultInstructions)
        | "DeriveFromParametersProvided" -> (Some FIX_AllocSettlInstType_DeriveFromParametersProvided)
        | "FullDetailsProvided" -> (Some FIX_AllocSettlInstType_FullDetailsProvided)
        | "SSIDBIDsProvided" -> (Some FIX_AllocSettlInstType_SSIDBIDsProvided)
        | "PhoneForInstructions" -> (Some FIX_AllocSettlInstType_PhoneForInstructions)
        | _ -> None
    )
;;

let string_to_allocstatus_opt (d)  =
    (match d with
        | "Accepted" -> (Some FIX_AllocStatus_Accepted)
        | "BlockLevelReject" -> (Some FIX_AllocStatus_BlockLevelReject)
        | "AccountLevelReject" -> (Some FIX_AllocStatus_AccountLevelReject)
        | "Received" -> (Some FIX_AllocStatus_Received)
        | "Incomplete" -> (Some FIX_AllocStatus_Incomplete)
        | "RejectedByIntermediary" -> (Some FIX_AllocStatus_RejectedByIntermediary)
        | _ -> None
    )
;;

let string_to_alloctranstype_opt (d)  =
    (match d with
        | "New" -> (Some FIX_AllocTransType_New)
        | "Replace" -> (Some FIX_AllocTransType_Replace)
        | "Cancel" -> (Some FIX_AllocTransType_Cancel)
        | _ -> None
    )
;;

let string_to_alloctype_opt (d)  =
    (match d with
        | "Calculated" -> (Some FIX_AllocType_Calculated)
        | "Preliminary" -> (Some FIX_AllocType_Preliminary)
        | "ReadyToBook" -> (Some FIX_AllocType_ReadyToBook)
        | "WarehouseInstruction" -> (Some FIX_AllocType_WarehouseInstruction)
        | "RequestToIntermediary" -> (Some FIX_AllocType_RequestToIntermediary)
        | _ -> None
    )
;;

let string_to_applqueueaction_opt (d)  =
    (match d with
        | "NoActionTaken" -> (Some FIX_ApplQueueAction_NoActionTaken)
        | "QueueFlushed" -> (Some FIX_ApplQueueAction_QueueFlushed)
        | "OverlayLast" -> (Some FIX_ApplQueueAction_OverlayLast)
        | "EndSession" -> (Some FIX_ApplQueueAction_EndSession)
        | _ -> None
    )
;;

let string_to_applqueueresolution_opt (d)  =
    (match d with
        | "NoActionTaken" -> (Some FIX_ApplQueueResolution_NoActionTaken)
        | "QueueFlushed" -> (Some FIX_ApplQueueResolution_QueueFlushed)
        | "OverlayLast" -> (Some FIX_ApplQueueResolution_OverlayLast)
        | "EndSession" -> (Some FIX_ApplQueueResolution_EndSession)
        | _ -> None
    )
;;

let string_to_assignmentmethod_opt (d)  =
    (match d with
        | "Random" -> (Some FIX_AssignmentMethod_Random)
        | "ProRata" -> (Some FIX_AssignmentMethod_ProRata)
        | _ -> None
    )
;;

let string_to_avgpxindicator_opt (d)  =
    (match d with
        | "NoAveragePricing" -> (Some FIX_AvgPxIndicator_NoAveragePricing)
        | "Trade" -> (Some FIX_AvgPxIndicator_Trade)
        | "LastTrade" -> (Some FIX_AvgPxIndicator_LastTrade)
        | _ -> None
    )
;;

let string_to_basispxtype_opt (d)  =
    (match d with
        | "ClosingPriceAtMorningSession" -> (Some FIX_BasisPxType_ClosingPriceAtMorningSession)
        | "ClosingPrice" -> (Some FIX_BasisPxType_ClosingPrice)
        | "CurrentPrice" -> (Some FIX_BasisPxType_CurrentPrice)
        | "SQ" -> (Some FIX_BasisPxType_SQ)
        | "VWAPThroughADay" -> (Some FIX_BasisPxType_VWAPThroughADay)
        | "VWAPThroughAMorningSession" -> (Some FIX_BasisPxType_VWAPThroughAMorningSession)
        | "VWAPThroughAnAfternoonSession" -> (Some FIX_BasisPxType_VWAPThroughAnAfternoonSession)
        | "VWAPThroughADayExcept" -> (Some FIX_BasisPxType_VWAPThroughADayExcept)
        | "VWAPThroughAMorningSessionExcept" -> (Some FIX_BasisPxType_VWAPThroughAMorningSessionExcept)
        | "VWAPThroughAnAfternoonSessionExcept" -> (Some FIX_BasisPxType_VWAPThroughAnAfternoonSessionExcept)
        | "Strike" -> (Some FIX_BasisPxType_Strike)
        | "Open" -> (Some FIX_BasisPxType_Open)
        | "Others" -> (Some FIX_BasisPxType_Others)
        | _ -> None
    )
;;

let string_to_biddescriptortype_opt (d)  =
    (match d with
        | "Sector" -> (Some FIX_BidDescriptorType_Sector)
        | "Country" -> (Some FIX_BidDescriptorType_Country)
        | "Index" -> (Some FIX_BidDescriptorType_Index)
        | _ -> None
    )
;;

let string_to_bidrequesttranstype_opt (d)  =
    (match d with
        | "New" -> (Some FIX_BidRequestTransType_New)
        | "Cancel" -> (Some FIX_BidRequestTransType_Cancel)
        | _ -> None
    )
;;

let string_to_bidtradetype_opt (d)  =
    (match d with
        | "RiskTrade" -> (Some FIX_BidTradeType_RiskTrade)
        | "VWAPGuarantee" -> (Some FIX_BidTradeType_VWAPGuarantee)
        | "Agency" -> (Some FIX_BidTradeType_Agency)
        | "GuaranteedClose" -> (Some FIX_BidTradeType_GuaranteedClose)
        | _ -> None
    )
;;

let string_to_bidtype_opt (d)  =
    (match d with
        | "NonDisclosed" -> (Some FIX_BidType_NonDisclosed)
        | "Disclosed" -> (Some FIX_BidType_Disclosed)
        | "NoBiddingProcess" -> (Some FIX_BidType_NoBiddingProcess)
        | _ -> None
    )
;;

let string_to_bookingtype_opt (d)  =
    (match d with
        | "RegularBooking" -> (Some FIX_BookingType_RegularBooking)
        | "CFD" -> (Some FIX_BookingType_CFD)
        | "TotalReturnSwap" -> (Some FIX_BookingType_TotalReturnSwap)
        | _ -> None
    )
;;

let string_to_bookingunit_opt (d)  =
    (match d with
        | "EachPartialExecutionIsABookableUnit" -> (Some FIX_BookingUnit_EachPartialExecutionIsABookableUnit)
        | "AggregatePartialExecutionsOnThisOrder" -> (Some FIX_BookingUnit_AggregatePartialExecutionsOnThisOrder)
        | "AggregateExecutionsForThisSymbol" -> (Some FIX_BookingUnit_AggregateExecutionsForThisSymbol)
        | _ -> None
    )
;;

let string_to_cpprogram_opt (d)  =
    (match d with
        | "Program3a3" -> (Some FIX_CPProgram_Program3a3)
        | "Program42" -> (Some FIX_CPProgram_Program42)
        | "Other" -> (Some FIX_CPProgram_Other)
        | _ -> None
    )
;;

let string_to_cancellationrights_opt (d)  =
    (match d with
        | "Yes" -> (Some FIX_CancellationRights_Yes)
        | "NoExecutionOnly" -> (Some FIX_CancellationRights_NoExecutionOnly)
        | "NoWaiverAgreement" -> (Some FIX_CancellationRights_NoWaiverAgreement)
        | "NoInstitutional" -> (Some FIX_CancellationRights_NoInstitutional)
        | _ -> None
    )
;;

let string_to_cashmargin_opt (d)  =
    (match d with
        | "Cash" -> (Some FIX_CashMargin_Cash)
        | "MarginOpen" -> (Some FIX_CashMargin_MarginOpen)
        | "MarginClose" -> (Some FIX_CashMargin_MarginClose)
        | _ -> None
    )
;;

let string_to_clearingfeeindicator_opt (d)  =
    (match d with
        | "CBOEMember" -> (Some FIX_ClearingFeeIndicator_CBOEMember)
        | "NonMemberAndCustomer" -> (Some FIX_ClearingFeeIndicator_NonMemberAndCustomer)
        | "EquityMemberAndClearingMember" -> (Some FIX_ClearingFeeIndicator_EquityMemberAndClearingMember)
        | "FullAndAssociateMember" -> (Some FIX_ClearingFeeIndicator_FullAndAssociateMember)
        | "Firms106HAnd106J" -> (Some FIX_ClearingFeeIndicator_Firms106HAnd106J)
        | "GIM" -> (Some FIX_ClearingFeeIndicator_GIM)
        | "Lessee106FEmployees" -> (Some FIX_ClearingFeeIndicator_Lessee106FEmployees)
        | "AllOtherOwnershipTypes" -> (Some FIX_ClearingFeeIndicator_AllOtherOwnershipTypes)
        | "FirstYearDelegate" -> (Some FIX_ClearingFeeIndicator_FirstYearDelegate)
        | "SecondYearDelegate" -> (Some FIX_ClearingFeeIndicator_SecondYearDelegate)
        | "ThirdYearDelegate" -> (Some FIX_ClearingFeeIndicator_ThirdYearDelegate)
        | "FourthYearDelegate" -> (Some FIX_ClearingFeeIndicator_FourthYearDelegate)
        | "FifthYearDelegate" -> (Some FIX_ClearingFeeIndicator_FifthYearDelegate)
        | "SixthYearDelegate" -> (Some FIX_ClearingFeeIndicator_SixthYearDelegate)
        | _ -> None
    )
;;

let string_to_clearinginstruction_opt (d)  =
    (match d with
        | "ProcessNormally" -> (Some FIX_ClearingInstruction_ProcessNormally)
        | "ExcludeFromAllNetting" -> (Some FIX_ClearingInstruction_ExcludeFromAllNetting)
        | "BilateralNettingOnly" -> (Some FIX_ClearingInstruction_BilateralNettingOnly)
        | "ExClearing" -> (Some FIX_ClearingInstruction_ExClearing)
        | "SpecialTrade" -> (Some FIX_ClearingInstruction_SpecialTrade)
        | "MultilateralNetting" -> (Some FIX_ClearingInstruction_MultilateralNetting)
        | "ClearAgainstCentralCounterparty" -> (Some FIX_ClearingInstruction_ClearAgainstCentralCounterparty)
        | "ExcludeFromCentralCounterparty" -> (Some FIX_ClearingInstruction_ExcludeFromCentralCounterparty)
        | "ManualMode" -> (Some FIX_ClearingInstruction_ManualMode)
        | "AutomaticPostingMode" -> (Some FIX_ClearingInstruction_AutomaticPostingMode)
        | "AutomaticGiveUpMode" -> (Some FIX_ClearingInstruction_AutomaticGiveUpMode)
        | "QualifiedServiceRepresentativeQSR" -> (Some FIX_ClearingInstruction_QualifiedServiceRepresentativeQSR)
        | "CustomerTrade" -> (Some FIX_ClearingInstruction_CustomerTrade)
        | "SelfClearing" -> (Some FIX_ClearingInstruction_SelfClearing)
        | _ -> None
    )
;;

let string_to_collaction_opt (d)  =
    (match d with
        | "Retain" -> (Some FIX_CollAction_Retain)
        | "Add" -> (Some FIX_CollAction_Add)
        | "Remove" -> (Some FIX_CollAction_Remove)
        | _ -> None
    )
;;

let string_to_collasgnreason_opt (d)  =
    (match d with
        | "Initial" -> (Some FIX_CollAsgnReason_Initial)
        | "Scheduled" -> (Some FIX_CollAsgnReason_Scheduled)
        | "TimeWarning" -> (Some FIX_CollAsgnReason_TimeWarning)
        | "MarginDeficiency" -> (Some FIX_CollAsgnReason_MarginDeficiency)
        | "MarginExcess" -> (Some FIX_CollAsgnReason_MarginExcess)
        | "ForwardCollateralDemand" -> (Some FIX_CollAsgnReason_ForwardCollateralDemand)
        | "EventOfDefault" -> (Some FIX_CollAsgnReason_EventOfDefault)
        | "AdverseTaxEvent" -> (Some FIX_CollAsgnReason_AdverseTaxEvent)
        | _ -> None
    )
;;

let string_to_collasgnrejectreason_opt (d)  =
    (match d with
        | "UnknownDeal" -> (Some FIX_CollAsgnRejectReason_UnknownDeal)
        | "UnknownOrInvalidInstrument" -> (Some FIX_CollAsgnRejectReason_UnknownOrInvalidInstrument)
        | "UnauthorizedTransaction" -> (Some FIX_CollAsgnRejectReason_UnauthorizedTransaction)
        | "InsufficientCollateral" -> (Some FIX_CollAsgnRejectReason_InsufficientCollateral)
        | "InvalidTypeOfCollateral" -> (Some FIX_CollAsgnRejectReason_InvalidTypeOfCollateral)
        | "ExcessiveSubstitution" -> (Some FIX_CollAsgnRejectReason_ExcessiveSubstitution)
        | "Other" -> (Some FIX_CollAsgnRejectReason_Other)
        | _ -> None
    )
;;

let string_to_collasgnresptype_opt (d)  =
    (match d with
        | "Received" -> (Some FIX_CollAsgnRespType_Received)
        | "Accepted" -> (Some FIX_CollAsgnRespType_Accepted)
        | "Declined" -> (Some FIX_CollAsgnRespType_Declined)
        | "Rejected" -> (Some FIX_CollAsgnRespType_Rejected)
        | _ -> None
    )
;;

let string_to_collasgntranstype_opt (d)  =
    (match d with
        | "New" -> (Some FIX_CollAsgnTransType_New)
        | "Replace" -> (Some FIX_CollAsgnTransType_Replace)
        | "Cancel" -> (Some FIX_CollAsgnTransType_Cancel)
        | "Release" -> (Some FIX_CollAsgnTransType_Release)
        | "Reverse" -> (Some FIX_CollAsgnTransType_Reverse)
        | _ -> None
    )
;;

let string_to_collinquiryqualifier_opt (d)  =
    (match d with
        | "TradeDate" -> (Some FIX_CollInquiryQualifier_TradeDate)
        | "GCInstrument" -> (Some FIX_CollInquiryQualifier_GCInstrument)
        | "CollateralInstrument" -> (Some FIX_CollInquiryQualifier_CollateralInstrument)
        | "SubstitutionEligible" -> (Some FIX_CollInquiryQualifier_SubstitutionEligible)
        | "NotAssigned" -> (Some FIX_CollInquiryQualifier_NotAssigned)
        | "PartiallyAssigned" -> (Some FIX_CollInquiryQualifier_PartiallyAssigned)
        | "FullyAssigned" -> (Some FIX_CollInquiryQualifier_FullyAssigned)
        | "OutstandingTrades" -> (Some FIX_CollInquiryQualifier_OutstandingTrades)
        | _ -> None
    )
;;

let string_to_collinquiryresult_opt (d)  =
    (match d with
        | "Successful" -> (Some FIX_CollInquiryResult_Successful)
        | "InvalidOrUnknownInstrument" -> (Some FIX_CollInquiryResult_InvalidOrUnknownInstrument)
        | "InvalidOrUnknownCollateralType" -> (Some FIX_CollInquiryResult_InvalidOrUnknownCollateralType)
        | "InvalidParties" -> (Some FIX_CollInquiryResult_InvalidParties)
        | "InvalidTransportTypeRequested" -> (Some FIX_CollInquiryResult_InvalidTransportTypeRequested)
        | "InvalidDestinationRequested" -> (Some FIX_CollInquiryResult_InvalidDestinationRequested)
        | "NoCollateralFoundForTheTradeSpecified" -> (Some FIX_CollInquiryResult_NoCollateralFoundForTheTradeSpecified)
        | "NoCollateralFoundForTheOrderSpecified" -> (Some FIX_CollInquiryResult_NoCollateralFoundForTheOrderSpecified)
        | "CollateralInquiryTypeNotSupported" -> (Some FIX_CollInquiryResult_CollateralInquiryTypeNotSupported)
        | "UnauthorizedForCollateralInquiry" -> (Some FIX_CollInquiryResult_UnauthorizedForCollateralInquiry)
        | "Other" -> (Some FIX_CollInquiryResult_Other)
        | _ -> None
    )
;;

let string_to_collinquirystatus_opt (d)  =
    (match d with
        | "Accepted" -> (Some FIX_CollInquiryStatus_Accepted)
        | "AcceptedWithWarnings" -> (Some FIX_CollInquiryStatus_AcceptedWithWarnings)
        | "Completed" -> (Some FIX_CollInquiryStatus_Completed)
        | "CompletedWithWarnings" -> (Some FIX_CollInquiryStatus_CompletedWithWarnings)
        | "Rejected" -> (Some FIX_CollInquiryStatus_Rejected)
        | _ -> None
    )
;;

let string_to_collstatus_opt (d)  =
    (match d with
        | "Unassigned" -> (Some FIX_CollStatus_Unassigned)
        | "PartiallyAssigned" -> (Some FIX_CollStatus_PartiallyAssigned)
        | "AssignmentProposed" -> (Some FIX_CollStatus_AssignmentProposed)
        | "Assigned" -> (Some FIX_CollStatus_Assigned)
        | "Challenged" -> (Some FIX_CollStatus_Challenged)
        | _ -> None
    )
;;

let string_to_commtype_opt (d)  =
    (match d with
        | "PerUnit" -> (Some FIX_CommType_PerUnit)
        | "Percent" -> (Some FIX_CommType_Percent)
        | "Absolute" -> (Some FIX_CommType_Absolute)
        | "PercentageWaivedCashDiscount" -> (Some FIX_CommType_PercentageWaivedCashDiscount)
        | "PercentageWaivedEnhancedUnits" -> (Some FIX_CommType_PercentageWaivedEnhancedUnits)
        | "PointsPerBondOrContract" -> (Some FIX_CommType_PointsPerBondOrContract)
        | _ -> None
    )
;;

let string_to_confirmrejreason_opt (d)  =
    (match d with
        | "MismatchedAccount" -> (Some FIX_ConfirmRejReason_MismatchedAccount)
        | "MissingSettlementInstructions" -> (Some FIX_ConfirmRejReason_MissingSettlementInstructions)
        | "Other" -> (Some FIX_ConfirmRejReason_Other)
        | _ -> None
    )
;;

let string_to_confirmstatus_opt (d)  =
    (match d with
        | "Received" -> (Some FIX_ConfirmStatus_Received)
        | "MismatchedAccount" -> (Some FIX_ConfirmStatus_MismatchedAccount)
        | "MissingSettlementInstructions" -> (Some FIX_ConfirmStatus_MissingSettlementInstructions)
        | "Confirmed" -> (Some FIX_ConfirmStatus_Confirmed)
        | "RequestRejected" -> (Some FIX_ConfirmStatus_RequestRejected)
        | _ -> None
    )
;;

let string_to_confirmtranstype_opt (d)  =
    (match d with
        | "New" -> (Some FIX_ConfirmTransType_New)
        | "Replace" -> (Some FIX_ConfirmTransType_Replace)
        | "Cancel" -> (Some FIX_ConfirmTransType_Cancel)
        | _ -> None
    )
;;

let string_to_confirmtype_opt (d)  =
    (match d with
        | "Status" -> (Some FIX_ConfirmType_Status)
        | "Confirmation" -> (Some FIX_ConfirmType_Confirmation)
        | "ConfirmationRequestRejected" -> (Some FIX_ConfirmType_ConfirmationRequestRejected)
        | _ -> None
    )
;;

let string_to_contamttype_opt (d)  =
    (match d with
        | "CommissionAmount" -> (Some FIX_ContAmtType_CommissionAmount)
        | "CommissionPercent" -> (Some FIX_ContAmtType_CommissionPercent)
        | "InitialChargeAmount" -> (Some FIX_ContAmtType_InitialChargeAmount)
        | "InitialChargePercent" -> (Some FIX_ContAmtType_InitialChargePercent)
        | "DiscountAmount" -> (Some FIX_ContAmtType_DiscountAmount)
        | "DiscountPercent" -> (Some FIX_ContAmtType_DiscountPercent)
        | "DilutionLevyAmount" -> (Some FIX_ContAmtType_DilutionLevyAmount)
        | "DilutionLevyPercent" -> (Some FIX_ContAmtType_DilutionLevyPercent)
        | "ExitChargeAmount" -> (Some FIX_ContAmtType_ExitChargeAmount)
        | "ExitChargePercent" -> (Some FIX_ContAmtType_ExitChargePercent)
        | "FundBasedRenewalCommissionPercent" -> (Some FIX_ContAmtType_FundBasedRenewalCommissionPercent)
        | "ProjectedFundValue" -> (Some FIX_ContAmtType_ProjectedFundValue)
        | "FundBasedRenewalCommissionOnOrder" -> (Some FIX_ContAmtType_FundBasedRenewalCommissionOnOrder)
        | "FundBasedRenewalCommissionOnFund" -> (Some FIX_ContAmtType_FundBasedRenewalCommissionOnFund)
        | "NetSettlementAmount" -> (Some FIX_ContAmtType_NetSettlementAmount)
        | _ -> None
    )
;;

let string_to_corporateaction_opt (d)  =
    (match d with
        | "ExDividend" -> (Some FIX_CorporateAction_ExDividend)
        | "ExDistribution" -> (Some FIX_CorporateAction_ExDistribution)
        | "ExRights" -> (Some FIX_CorporateAction_ExRights)
        | "New" -> (Some FIX_CorporateAction_New)
        | "ExInterest" -> (Some FIX_CorporateAction_ExInterest)
        | _ -> None
    )
;;

let string_to_coveredoruncovered_opt (d)  =
    (match d with
        | "Covered" -> (Some FIX_CoveredOrUncovered_Covered)
        | "Uncovered" -> (Some FIX_CoveredOrUncovered_Uncovered)
        | _ -> None
    )
;;

let string_to_crossprioritization_opt (d)  =
    (match d with
        | "FIXNone" -> (Some FIX_CrossPrioritization_FIXNone)
        | "BuySideIsPrioritized" -> (Some FIX_CrossPrioritization_BuySideIsPrioritized)
        | "SellSideIsPrioritized" -> (Some FIX_CrossPrioritization_SellSideIsPrioritized)
        | _ -> None
    )
;;

let string_to_crosstype_opt (d)  =
    (match d with
        | "CrossAON" -> (Some FIX_CrossType_CrossAON)
        | "CrossIOC" -> (Some FIX_CrossType_CrossIOC)
        | "CrossOneSide" -> (Some FIX_CrossType_CrossOneSide)
        | "CrossSamePrice" -> (Some FIX_CrossType_CrossSamePrice)
        | _ -> None
    )
;;

let string_to_custordercapacity_opt (d)  =
    (match d with
        | "MemberTradingForTheirOwnAccount" -> (Some FIX_CustOrderCapacity_MemberTradingForTheirOwnAccount)
        | "ClearingFirmTradingForItsProprietaryAccount" -> (Some FIX_CustOrderCapacity_ClearingFirmTradingForItsProprietaryAccount)
        | "MemberTradingForAnotherMember" -> (Some FIX_CustOrderCapacity_MemberTradingForAnotherMember)
        | "AllOther" -> (Some FIX_CustOrderCapacity_AllOther)
        | _ -> None
    )
;;

let string_to_cxlrejreason_opt (d)  =
    (match d with
        | "TooLateToCancel" -> (Some FIX_CxlRejReason_TooLateToCancel)
        | "UnknownOrder" -> (Some FIX_CxlRejReason_UnknownOrder)
        | "BrokerCredit" -> (Some FIX_CxlRejReason_BrokerCredit)
        | "OrderAlreadyInPendingStatus" -> (Some FIX_CxlRejReason_OrderAlreadyInPendingStatus)
        | "UnableToProcessOrderMassCancelRequest" -> (Some FIX_CxlRejReason_UnableToProcessOrderMassCancelRequest)
        | "OrigOrdModTime" -> (Some FIX_CxlRejReason_OrigOrdModTime)
        | "DuplicateClOrdID" -> (Some FIX_CxlRejReason_DuplicateClOrdID)
        | "Other" -> (Some FIX_CxlRejReason_Other)
        | _ -> None
    )
;;

let string_to_cxlrejresponseto_opt (d)  =
    (match d with
        | "OrderCancelRequest" -> (Some FIX_CxlRejResponseTo_OrderCancelRequest)
        | "OrderCancelReplaceRequest" -> (Some FIX_CxlRejResponseTo_OrderCancelReplaceRequest)
        | _ -> None
    )
;;

let string_to_dkreason_opt (d)  =
    (match d with
        | "UnknownSymbol" -> (Some FIX_DKReason_UnknownSymbol)
        | "WrongSide" -> (Some FIX_DKReason_WrongSide)
        | "QuantityExceedsOrder" -> (Some FIX_DKReason_QuantityExceedsOrder)
        | "NoMatchingOrder" -> (Some FIX_DKReason_NoMatchingOrder)
        | "PriceExceedsLimit" -> (Some FIX_DKReason_PriceExceedsLimit)
        | "CalculationDifference" -> (Some FIX_DKReason_CalculationDifference)
        | "Other" -> (Some FIX_DKReason_Other)
        | _ -> None
    )
;;

let string_to_daybookinginst_opt (d)  =
    (match d with
        | "Auto" -> (Some FIX_DayBookingInst_Auto)
        | "SpeakWithOrderInitiatorBeforeBooking" -> (Some FIX_DayBookingInst_SpeakWithOrderInitiatorBeforeBooking)
        | "Accumulate" -> (Some FIX_DayBookingInst_Accumulate)
        | _ -> None
    )
;;

let string_to_deletereason_opt (d)  =
    (match d with
        | "Cancellation" -> (Some FIX_DeleteReason_Cancellation)
        | "Error" -> (Some FIX_DeleteReason_Error)
        | _ -> None
    )
;;

let string_to_deliveryform_opt (d)  =
    (match d with
        | "BookEntry" -> (Some FIX_DeliveryForm_BookEntry)
        | "Bearer" -> (Some FIX_DeliveryForm_Bearer)
        | _ -> None
    )
;;

let string_to_deliverytype_opt (d)  =
    (match d with
        | "VersusPayment" -> (Some FIX_DeliveryType_VersusPayment)
        | "Free" -> (Some FIX_DeliveryType_Free)
        | "TriParty" -> (Some FIX_DeliveryType_TriParty)
        | "HoldInCustody" -> (Some FIX_DeliveryType_HoldInCustody)
        | _ -> None
    )
;;

let string_to_discretioninst_opt (d)  =
    (match d with
        | "RelatedToDisplayedPrice" -> (Some FIX_DiscretionInst_RelatedToDisplayedPrice)
        | "RelatedToMarketPrice" -> (Some FIX_DiscretionInst_RelatedToMarketPrice)
        | "RelatedToPrimaryPrice" -> (Some FIX_DiscretionInst_RelatedToPrimaryPrice)
        | "RelatedToLocalPrimaryPrice" -> (Some FIX_DiscretionInst_RelatedToLocalPrimaryPrice)
        | "RelatedToMidpointPrice" -> (Some FIX_DiscretionInst_RelatedToMidpointPrice)
        | "RelatedToLastTradePrice" -> (Some FIX_DiscretionInst_RelatedToLastTradePrice)
        | "RelatedToVWAP" -> (Some FIX_DiscretionInst_RelatedToVWAP)
        | _ -> None
    )
;;

let string_to_discretionlimittype_opt (d)  =
    (match d with
        | "OrBetter" -> (Some FIX_DiscretionLimitType_OrBetter)
        | "Strict" -> (Some FIX_DiscretionLimitType_Strict)
        | "OrWorse" -> (Some FIX_DiscretionLimitType_OrWorse)
        | _ -> None
    )
;;

let string_to_discretionmovetype_opt (d)  =
    (match d with
        | "Floating" -> (Some FIX_DiscretionMoveType_Floating)
        | "Fixed" -> (Some FIX_DiscretionMoveType_Fixed)
        | _ -> None
    )
;;

let string_to_discretionoffsettype_opt (d)  =
    (match d with
        | "Price" -> (Some FIX_DiscretionOffsetType_Price)
        | "BasisPoints" -> (Some FIX_DiscretionOffsetType_BasisPoints)
        | "Ticks" -> (Some FIX_DiscretionOffsetType_Ticks)
        | "PriceTier" -> (Some FIX_DiscretionOffsetType_PriceTier)
        | _ -> None
    )
;;

let string_to_discretionrounddirection_opt (d)  =
    (match d with
        | "MoreAggressive" -> (Some FIX_DiscretionRoundDirection_MoreAggressive)
        | "MorePassive" -> (Some FIX_DiscretionRoundDirection_MorePassive)
        | _ -> None
    )
;;

let string_to_discretionscope_opt (d)  =
    (match d with
        | "Local" -> (Some FIX_DiscretionScope_Local)
        | "National" -> (Some FIX_DiscretionScope_National)
        | "Global" -> (Some FIX_DiscretionScope_Global)
        | "NationalExcludingLocal" -> (Some FIX_DiscretionScope_NationalExcludingLocal)
        | _ -> None
    )
;;

let string_to_distribpaymentmethod_opt (d)  =
    (match d with
        | "CREST" -> (Some FIX_DistribPaymentMethod_CREST)
        | "NSCC" -> (Some FIX_DistribPaymentMethod_NSCC)
        | "Euroclear" -> (Some FIX_DistribPaymentMethod_Euroclear)
        | "Clearstream" -> (Some FIX_DistribPaymentMethod_Clearstream)
        | "Cheque" -> (Some FIX_DistribPaymentMethod_Cheque)
        | "TelegraphicTransfer" -> (Some FIX_DistribPaymentMethod_TelegraphicTransfer)
        | "FedWire" -> (Some FIX_DistribPaymentMethod_FedWire)
        | "DirectCredit" -> (Some FIX_DistribPaymentMethod_DirectCredit)
        | "ACHCredit" -> (Some FIX_DistribPaymentMethod_ACHCredit)
        | "BPAY" -> (Some FIX_DistribPaymentMethod_BPAY)
        | "HighValueClearingSystemHVACS" -> (Some FIX_DistribPaymentMethod_HighValueClearingSystemHVACS)
        | "ReinvestInFund" -> (Some FIX_DistribPaymentMethod_ReinvestInFund)
        | _ -> None
    )
;;

let string_to_dlvyinsttype_opt (d)  =
    (match d with
        | "Securities" -> (Some FIX_DlvyInstType_Securities)
        | "Cash" -> (Some FIX_DlvyInstType_Cash)
        | _ -> None
    )
;;

let string_to_duetorelated_opt (d)  =
    (match d with
        | "RelatedToSecurityHalt" -> (Some FIX_DueToRelated_RelatedToSecurityHalt)
        | "NotRelatedToSecurityHalt" -> (Some FIX_DueToRelated_NotRelatedToSecurityHalt)
        | _ -> None
    )
;;

let string_to_emailtype_opt (d)  =
    (match d with
        | "New" -> (Some FIX_EmailType_New)
        | "Reply" -> (Some FIX_EmailType_Reply)
        | "AdminReply" -> (Some FIX_EmailType_AdminReply)
        | _ -> None
    )
;;

let string_to_eventtype_opt (d)  =
    (match d with
        | "Put" -> (Some FIX_EventType_Put)
        | "Call" -> (Some FIX_EventType_Call)
        | "Tender" -> (Some FIX_EventType_Tender)
        | "SinkingFundCall" -> (Some FIX_EventType_SinkingFundCall)
        | "Other" -> (Some FIX_EventType_Other)
        | _ -> None
    )
;;

let string_to_exchangeforphysical_opt (d)  =
    (match d with
        | "True" -> (Some FIX_ExchangeForPhysical_True)
        | "False" -> (Some FIX_ExchangeForPhysical_False)
        | _ -> None
    )
;;

let string_to_execinst_opt (d)  =
    (match d with
        | "NotHeld" -> (Some FIX_ExecInst_NotHeld)
        | "Work" -> (Some FIX_ExecInst_Work)
        | "GoAlong" -> (Some FIX_ExecInst_GoAlong)
        | "OverTheDay" -> (Some FIX_ExecInst_OverTheDay)
        | "Held" -> (Some FIX_ExecInst_Held)
        | "ParticipateDoNotInitiate" -> (Some FIX_ExecInst_ParticipateDoNotInitiate)
        | "StrictScale" -> (Some FIX_ExecInst_StrictScale)
        | "TryToScale" -> (Some FIX_ExecInst_TryToScale)
        | "StayOnBidSide" -> (Some FIX_ExecInst_StayOnBidSide)
        | "StayOnOfferSide" -> (Some FIX_ExecInst_StayOnOfferSide)
        | "NoCross" -> (Some FIX_ExecInst_NoCross)
        | "OKToCross" -> (Some FIX_ExecInst_OKToCross)
        | "CallFirst" -> (Some FIX_ExecInst_CallFirst)
        | "PercentOfVolume" -> (Some FIX_ExecInst_PercentOfVolume)
        | "DoNotIncrease" -> (Some FIX_ExecInst_DoNotIncrease)
        | "DoNotReduce" -> (Some FIX_ExecInst_DoNotReduce)
        | "AllOrNone" -> (Some FIX_ExecInst_AllOrNone)
        | "ReinstateOnSystemFailure" -> (Some FIX_ExecInst_ReinstateOnSystemFailure)
        | "InstitutionsOnly" -> (Some FIX_ExecInst_InstitutionsOnly)
        | "ReinstateOnTradingHalt" -> (Some FIX_ExecInst_ReinstateOnTradingHalt)
        | "CancelOnTradingHalt" -> (Some FIX_ExecInst_CancelOnTradingHalt)
        | "LastPeg" -> (Some FIX_ExecInst_LastPeg)
        | "MidPricePeg" -> (Some FIX_ExecInst_MidPricePeg)
        | "NonNegotiable" -> (Some FIX_ExecInst_NonNegotiable)
        | "OpeningPeg" -> (Some FIX_ExecInst_OpeningPeg)
        | "MarketPeg" -> (Some FIX_ExecInst_MarketPeg)
        | "CancelOnSystemFailure" -> (Some FIX_ExecInst_CancelOnSystemFailure)
        | "PrimaryPeg" -> (Some FIX_ExecInst_PrimaryPeg)
        | "Suspend" -> (Some FIX_ExecInst_Suspend)
        | "CustomerDisplayInstruction" -> (Some FIX_ExecInst_CustomerDisplayInstruction)
        | "Netting" -> (Some FIX_ExecInst_Netting)
        | "PegToVWAP" -> (Some FIX_ExecInst_PegToVWAP)
        | "TradeAlong" -> (Some FIX_ExecInst_TradeAlong)
        | "TryToStop" -> (Some FIX_ExecInst_TryToStop)
        | "CancelIfNotBest" -> (Some FIX_ExecInst_CancelIfNotBest)
        | "TrailingStopPeg" -> (Some FIX_ExecInst_TrailingStopPeg)
        | "StrictLimit" -> (Some FIX_ExecInst_StrictLimit)
        | "IgnorePriceValidityChecks" -> (Some FIX_ExecInst_IgnorePriceValidityChecks)
        | "PegToLimitPrice" -> (Some FIX_ExecInst_PegToLimitPrice)
        | "WorkToTargetStrategy" -> (Some FIX_ExecInst_WorkToTargetStrategy)
        | _ -> None
    )
;;

let string_to_execpricetype_opt (d)  =
    (match d with
        | "BidPrice" -> (Some FIX_ExecPriceType_BidPrice)
        | "CreationPrice" -> (Some FIX_ExecPriceType_CreationPrice)
        | "CreationPricePlusAdjustmentPercent" -> (Some FIX_ExecPriceType_CreationPricePlusAdjustmentPercent)
        | "CreationPricePlusAdjustmentAmount" -> (Some FIX_ExecPriceType_CreationPricePlusAdjustmentAmount)
        | "OfferPrice" -> (Some FIX_ExecPriceType_OfferPrice)
        | "OfferPriceMinusAdjustmentPercent" -> (Some FIX_ExecPriceType_OfferPriceMinusAdjustmentPercent)
        | "OfferPriceMinusAdjustmentAmount" -> (Some FIX_ExecPriceType_OfferPriceMinusAdjustmentAmount)
        | "SinglePrice" -> (Some FIX_ExecPriceType_SinglePrice)
        | _ -> None
    )
;;

let string_to_execrestatementreason_opt (d)  =
    (match d with
        | "GTCorporateAction" -> (Some FIX_ExecRestatementReason_GTCorporateAction)
        | "GTRenewal" -> (Some FIX_ExecRestatementReason_GTRenewal)
        | "VerbalChange" -> (Some FIX_ExecRestatementReason_VerbalChange)
        | "RepricingOfOrder" -> (Some FIX_ExecRestatementReason_RepricingOfOrder)
        | "BrokerOption" -> (Some FIX_ExecRestatementReason_BrokerOption)
        | "PartialDeclineOfOrderQty" -> (Some FIX_ExecRestatementReason_PartialDeclineOfOrderQty)
        | "CancelOnTradingHalt" -> (Some FIX_ExecRestatementReason_CancelOnTradingHalt)
        | "CancelOnSystemFailure" -> (Some FIX_ExecRestatementReason_CancelOnSystemFailure)
        | "Market" -> (Some FIX_ExecRestatementReason_Market)
        | "Canceled" -> (Some FIX_ExecRestatementReason_Canceled)
        | "WarehouseRecap" -> (Some FIX_ExecRestatementReason_WarehouseRecap)
        | "Other" -> (Some FIX_ExecRestatementReason_Other)
        | _ -> None
    )
;;

let string_to_exectype_opt (d)  =
    (match d with
        | "New" -> (Some FIX_ExecType_New)
        | "DoneForDay" -> (Some FIX_ExecType_DoneForDay)
        | "Canceled" -> (Some FIX_ExecType_Canceled)
        | "Replaced" -> (Some FIX_ExecType_Replaced)
        | "PendingCancel" -> (Some FIX_ExecType_PendingCancel)
        | "Stopped" -> (Some FIX_ExecType_Stopped)
        | "Rejected" -> (Some FIX_ExecType_Rejected)
        | "Suspended" -> (Some FIX_ExecType_Suspended)
        | "PendingNew" -> (Some FIX_ExecType_PendingNew)
        | "Calculated" -> (Some FIX_ExecType_Calculated)
        | "Expired" -> (Some FIX_ExecType_Expired)
        | "Restated" -> (Some FIX_ExecType_Restated)
        | "PendingReplace" -> (Some FIX_ExecType_PendingReplace)
        | "Trade" -> (Some FIX_ExecType_Trade)
        | "TradeCorrect" -> (Some FIX_ExecType_TradeCorrect)
        | "TradeCancel" -> (Some FIX_ExecType_TradeCancel)
        | "OrderStatus" -> (Some FIX_ExecType_OrderStatus)
        | _ -> None
    )
;;

let string_to_exercisemethod_opt (d)  =
    (match d with
        | "Automatic" -> (Some FIX_ExerciseMethod_Automatic)
        | "Manual" -> (Some FIX_ExerciseMethod_Manual)
        | _ -> None
    )
;;

let string_to_expirationcycle_opt (d)  =
    (match d with
        | "ExpireOnTradingSessionClose" -> (Some FIX_ExpirationCycle_ExpireOnTradingSessionClose)
        | "ExpireOnTradingSessionOpen" -> (Some FIX_ExpirationCycle_ExpireOnTradingSessionOpen)
        | _ -> None
    )
;;

let string_to_financialstatus_opt (d)  =
    (match d with
        | "Bankrupt" -> (Some FIX_FinancialStatus_Bankrupt)
        | "PendingDelisting" -> (Some FIX_FinancialStatus_PendingDelisting)
        | _ -> None
    )
;;

let string_to_forexreq_opt (d)  =
    (match d with
        | "ExecuteForexAfterSecurityTrade" -> (Some FIX_ForexReq_ExecuteForexAfterSecurityTrade)
        | "DoNotExecuteForexAfterSecurityTrade" -> (Some FIX_ForexReq_DoNotExecuteForexAfterSecurityTrade)
        | _ -> None
    )
;;

let string_to_fundrenewwaiv_opt (d)  =
    (match d with
        | "Yes" -> (Some FIX_FundRenewWaiv_Yes)
        | "No" -> (Some FIX_FundRenewWaiv_No)
        | _ -> None
    )
;;

let string_to_gtbookinginst_opt (d)  =
    (match d with
        | "BookOutAllTradesOnDayOfExecution" -> (Some FIX_GTBookingInst_BookOutAllTradesOnDayOfExecution)
        | "AccumulateUntilFilledOrExpired" -> (Some FIX_GTBookingInst_AccumulateUntilFilledOrExpired)
        | "AccumulateUntilVerballyNotifiedOtherwise" -> (Some FIX_GTBookingInst_AccumulateUntilVerballyNotifiedOtherwise)
        | _ -> None
    )
;;

let string_to_haltreason_opt (d)  =
    (match d with
        | "OrderImbalance" -> (Some FIX_HaltReason_OrderImbalance)
        | "EquipmentChangeover" -> (Some FIX_HaltReason_EquipmentChangeover)
        | "NewsPending" -> (Some FIX_HaltReason_NewsPending)
        | "NewsDissemination" -> (Some FIX_HaltReason_NewsDissemination)
        | "OrderInflux" -> (Some FIX_HaltReason_OrderInflux)
        | "AdditionalInformation" -> (Some FIX_HaltReason_AdditionalInformation)
        | _ -> None
    )
;;

let string_to_handlinst_opt (d)  =
    (match d with
        | "AutomatedExecutionNoIntervention" -> (Some FIX_HandlInst_AutomatedExecutionNoIntervention)
        | "AutomatedExecutionInterventionOK" -> (Some FIX_HandlInst_AutomatedExecutionInterventionOK)
        | "ManualOrder" -> (Some FIX_HandlInst_ManualOrder)
        | _ -> None
    )
;;

let string_to_ioinaturalflag_opt (d)  =
    (match d with
        | "Natural" -> (Some FIX_IOINaturalFlag_Natural)
        | "NotNatural" -> (Some FIX_IOINaturalFlag_NotNatural)
        | _ -> None
    )
;;

let string_to_ioiqltyind_opt (d)  =
    (match d with
        | "Low" -> (Some FIX_IOIQltyInd_Low)
        | "Medium" -> (Some FIX_IOIQltyInd_Medium)
        | "High" -> (Some FIX_IOIQltyInd_High)
        | _ -> None
    )
;;

let string_to_ioiqty_opt (d)  =
    (match d with
        | "Small" -> (Some FIX_IOIQty_Small)
        | "Medium" -> (Some FIX_IOIQty_Medium)
        | "Large" -> (Some FIX_IOIQty_Large)
        | _ -> None
    )
;;

let string_to_ioiqualifier_opt (d)  =
    (match d with
        | "AllOrNone" -> (Some FIX_IOIQualifier_AllOrNone)
        | "MarketOnClose" -> (Some FIX_IOIQualifier_MarketOnClose)
        | "AtTheClose" -> (Some FIX_IOIQualifier_AtTheClose)
        | "VWAP" -> (Some FIX_IOIQualifier_VWAP)
        | "InTouchWith" -> (Some FIX_IOIQualifier_InTouchWith)
        | "Limit" -> (Some FIX_IOIQualifier_Limit)
        | "MoreBehind" -> (Some FIX_IOIQualifier_MoreBehind)
        | "AtTheOpen" -> (Some FIX_IOIQualifier_AtTheOpen)
        | "TakingAPosition" -> (Some FIX_IOIQualifier_TakingAPosition)
        | "AtTheMarket" -> (Some FIX_IOIQualifier_AtTheMarket)
        | "ReadyToTrade" -> (Some FIX_IOIQualifier_ReadyToTrade)
        | "PortfolioShown" -> (Some FIX_IOIQualifier_PortfolioShown)
        | "ThroughTheDay" -> (Some FIX_IOIQualifier_ThroughTheDay)
        | "Versus" -> (Some FIX_IOIQualifier_Versus)
        | "Indication" -> (Some FIX_IOIQualifier_Indication)
        | "CrossingOpportunity" -> (Some FIX_IOIQualifier_CrossingOpportunity)
        | "AtTheMidpoint" -> (Some FIX_IOIQualifier_AtTheMidpoint)
        | "PreOpen" -> (Some FIX_IOIQualifier_PreOpen)
        | _ -> None
    )
;;

let string_to_ioitranstype_opt (d)  =
    (match d with
        | "New" -> (Some FIX_IOITransType_New)
        | "Cancel" -> (Some FIX_IOITransType_Cancel)
        | "Replace" -> (Some FIX_IOITransType_Replace)
        | _ -> None
    )
;;

let string_to_inviewofcommon_opt (d)  =
    (match d with
        | "HaltWasDueToCommonStockBeingHalted" -> (Some FIX_InViewOfCommon_HaltWasDueToCommonStockBeingHalted)
        | "HaltWasNotRelatedToAHaltOfTheCommonStock" -> (Some FIX_InViewOfCommon_HaltWasNotRelatedToAHaltOfTheCommonStock)
        | _ -> None
    )
;;

let string_to_inctaxind_opt (d)  =
    (match d with
        | "Net" -> (Some FIX_IncTaxInd_Net)
        | "Gross" -> (Some FIX_IncTaxInd_Gross)
        | _ -> None
    )
;;

let string_to_instrattribtype_opt (d)  =
    (match d with
        | "Flat" -> (Some FIX_InstrAttribType_Flat)
        | "ZeroCoupon" -> (Some FIX_InstrAttribType_ZeroCoupon)
        | "InterestBearing" -> (Some FIX_InstrAttribType_InterestBearing)
        | "NoPeriodicPayments" -> (Some FIX_InstrAttribType_NoPeriodicPayments)
        | "VariableRate" -> (Some FIX_InstrAttribType_VariableRate)
        | "LessFeeForPut" -> (Some FIX_InstrAttribType_LessFeeForPut)
        | "SteppedCoupon" -> (Some FIX_InstrAttribType_SteppedCoupon)
        | "CouponPeriod" -> (Some FIX_InstrAttribType_CouponPeriod)
        | "When" -> (Some FIX_InstrAttribType_When)
        | "OriginalIssueDiscount" -> (Some FIX_InstrAttribType_OriginalIssueDiscount)
        | "Callable" -> (Some FIX_InstrAttribType_Callable)
        | "EscrowedToMaturity" -> (Some FIX_InstrAttribType_EscrowedToMaturity)
        | "EscrowedToRedemptionDate" -> (Some FIX_InstrAttribType_EscrowedToRedemptionDate)
        | "PreRefunded" -> (Some FIX_InstrAttribType_PreRefunded)
        | "InDefault" -> (Some FIX_InstrAttribType_InDefault)
        | "Unrated" -> (Some FIX_InstrAttribType_Unrated)
        | "Taxable" -> (Some FIX_InstrAttribType_Taxable)
        | "Indexed" -> (Some FIX_InstrAttribType_Indexed)
        | "SubjectToAlternativeMinimumTax" -> (Some FIX_InstrAttribType_SubjectToAlternativeMinimumTax)
        | "OriginalIssueDiscountPrice" -> (Some FIX_InstrAttribType_OriginalIssueDiscountPrice)
        | "CallableBelowMaturityValue" -> (Some FIX_InstrAttribType_CallableBelowMaturityValue)
        | "CallableWithoutNotice" -> (Some FIX_InstrAttribType_CallableWithoutNotice)
        | "Text" -> (Some FIX_InstrAttribType_Text)
        | _ -> None
    )
;;

let string_to_lastcapacity_opt (d)  =
    (match d with
        | "Agent" -> (Some FIX_LastCapacity_Agent)
        | "CrossAsAgent" -> (Some FIX_LastCapacity_CrossAsAgent)
        | "CrossAsPrincipal" -> (Some FIX_LastCapacity_CrossAsPrincipal)
        | "Principal" -> (Some FIX_LastCapacity_Principal)
        | _ -> None
    )
;;

let string_to_lastfragment_opt (d)  =
    (match d with
        | "LastMessage" -> (Some FIX_LastFragment_LastMessage)
        | "NotLastMessage" -> (Some FIX_LastFragment_NotLastMessage)
        | _ -> None
    )
;;

let string_to_lastliquidityind_opt (d)  =
    (match d with
        | "AddedLiquidity" -> (Some FIX_LastLiquidityInd_AddedLiquidity)
        | "RemovedLiquidity" -> (Some FIX_LastLiquidityInd_RemovedLiquidity)
        | "LiquidityRoutedOut" -> (Some FIX_LastLiquidityInd_LiquidityRoutedOut)
        | _ -> None
    )
;;

let string_to_legswaptype_opt (d)  =
    (match d with
        | "ParForPar" -> (Some FIX_LegSwapType_ParForPar)
        | "ModifiedDuration" -> (Some FIX_LegSwapType_ModifiedDuration)
        | "Risk" -> (Some FIX_LegSwapType_Risk)
        | "Proceeds" -> (Some FIX_LegSwapType_Proceeds)
        | _ -> None
    )
;;

let string_to_legalconfirm_opt (d)  =
    (match d with
        | "LegalConfirm" -> (Some FIX_LegalConfirm_LegalConfirm)
        | "DoesNotConsituteALegalConfirm" -> (Some FIX_LegalConfirm_DoesNotConsituteALegalConfirm)
        | _ -> None
    )
;;

let string_to_liquidityindtype_opt (d)  =
    (match d with
        | "FiveDayMovingAverage" -> (Some FIX_LiquidityIndType_FiveDayMovingAverage)
        | "TwentyDayMovingAverage" -> (Some FIX_LiquidityIndType_TwentyDayMovingAverage)
        | "NormalMarketSize" -> (Some FIX_LiquidityIndType_NormalMarketSize)
        | "Other" -> (Some FIX_LiquidityIndType_Other)
        | _ -> None
    )
;;

let string_to_listexecinsttype_opt (d)  =
    (match d with
        | "Immediate" -> (Some FIX_ListExecInstType_Immediate)
        | "WaitForInstruction" -> (Some FIX_ListExecInstType_WaitForInstruction)
        | "SellDriven" -> (Some FIX_ListExecInstType_SellDriven)
        | "BuyDrivenCashTopUp" -> (Some FIX_ListExecInstType_BuyDrivenCashTopUp)
        | "BuyDrivenCashWithdraw" -> (Some FIX_ListExecInstType_BuyDrivenCashWithdraw)
        | _ -> None
    )
;;

let string_to_listorderstatus_opt (d)  =
    (match d with
        | "InBiddingProcess" -> (Some FIX_ListOrderStatus_InBiddingProcess)
        | "ReceivedForExecution" -> (Some FIX_ListOrderStatus_ReceivedForExecution)
        | "Executing" -> (Some FIX_ListOrderStatus_Executing)
        | "Cancelling" -> (Some FIX_ListOrderStatus_Cancelling)
        | "Alert" -> (Some FIX_ListOrderStatus_Alert)
        | "AllDone" -> (Some FIX_ListOrderStatus_AllDone)
        | "Reject" -> (Some FIX_ListOrderStatus_Reject)
        | _ -> None
    )
;;

let string_to_liststatustype_opt (d)  =
    (match d with
        | "Ack" -> (Some FIX_ListStatusType_Ack)
        | "Response" -> (Some FIX_ListStatusType_Response)
        | "Timed" -> (Some FIX_ListStatusType_Timed)
        | "ExecStarted" -> (Some FIX_ListStatusType_ExecStarted)
        | "AllDone" -> (Some FIX_ListStatusType_AllDone)
        | "Alert" -> (Some FIX_ListStatusType_Alert)
        | _ -> None
    )
;;

let string_to_locatereqd_opt (d)  =
    (match d with
        | "Yes" -> (Some FIX_LocateReqd_Yes)
        | "No" -> (Some FIX_LocateReqd_No)
        | _ -> None
    )
;;

let string_to_mdentrytype_opt (d)  =
    (match d with
        | "Bid" -> (Some FIX_MDEntryType_Bid)
        | "Offer" -> (Some FIX_MDEntryType_Offer)
        | "Trade" -> (Some FIX_MDEntryType_Trade)
        | "IndexValue" -> (Some FIX_MDEntryType_IndexValue)
        | "OpeningPrice" -> (Some FIX_MDEntryType_OpeningPrice)
        | "ClosingPrice" -> (Some FIX_MDEntryType_ClosingPrice)
        | "SettlementPrice" -> (Some FIX_MDEntryType_SettlementPrice)
        | "TradingSessionHighPrice" -> (Some FIX_MDEntryType_TradingSessionHighPrice)
        | "TradingSessionLowPrice" -> (Some FIX_MDEntryType_TradingSessionLowPrice)
        | "TradingSessionVWAPPrice" -> (Some FIX_MDEntryType_TradingSessionVWAPPrice)
        | "Imbalance" -> (Some FIX_MDEntryType_Imbalance)
        | "TradeVolume" -> (Some FIX_MDEntryType_TradeVolume)
        | "OpenInterest" -> (Some FIX_MDEntryType_OpenInterest)
        | _ -> None
    )
;;

let string_to_mdimplicitdelete_opt (d)  =
    (match d with
        | "Yes" -> (Some FIX_MDImplicitDelete_Yes)
        | "No" -> (Some FIX_MDImplicitDelete_No)
        | _ -> None
    )
;;

let string_to_mdreqrejreason_opt (d)  =
    (match d with
        | "UnknownSymbol" -> (Some FIX_MDReqRejReason_UnknownSymbol)
        | "DuplicateMDReqID" -> (Some FIX_MDReqRejReason_DuplicateMDReqID)
        | "InsufficientBandwidth" -> (Some FIX_MDReqRejReason_InsufficientBandwidth)
        | "InsufficientPermissions" -> (Some FIX_MDReqRejReason_InsufficientPermissions)
        | "UnsupportedSubscriptionRequestType" -> (Some FIX_MDReqRejReason_UnsupportedSubscriptionRequestType)
        | "UnsupportedMarketDepth" -> (Some FIX_MDReqRejReason_UnsupportedMarketDepth)
        | "UnsupportedMDUpdateType" -> (Some FIX_MDReqRejReason_UnsupportedMDUpdateType)
        | "UnsupportedAggregatedBook" -> (Some FIX_MDReqRejReason_UnsupportedAggregatedBook)
        | "UnsupportedMDEntryType" -> (Some FIX_MDReqRejReason_UnsupportedMDEntryType)
        | "UnsupportedTradingSessionID" -> (Some FIX_MDReqRejReason_UnsupportedTradingSessionID)
        | "UnsupportedScope" -> (Some FIX_MDReqRejReason_UnsupportedScope)
        | "UnsupportedOpenCloseSettleFlag" -> (Some FIX_MDReqRejReason_UnsupportedOpenCloseSettleFlag)
        | "UnsupportedMDImplicitDelete" -> (Some FIX_MDReqRejReason_UnsupportedMDImplicitDelete)
        | _ -> None
    )
;;

let string_to_mdupdateaction_opt (d)  =
    (match d with
        | "New" -> (Some FIX_MDUpdateAction_New)
        | "Change" -> (Some FIX_MDUpdateAction_Change)
        | "Delete" -> (Some FIX_MDUpdateAction_Delete)
        | _ -> None
    )
;;

let string_to_mdupdatetype_opt (d)  =
    (match d with
        | "FullRefresh" -> (Some FIX_MDUpdateType_FullRefresh)
        | "IncrementalRefresh" -> (Some FIX_MDUpdateType_IncrementalRefresh)
        | _ -> None
    )
;;

let string_to_masscancelrejectreason_opt (d)  =
    (match d with
        | "MassCancelNotSupported" -> (Some FIX_MassCancelRejectReason_MassCancelNotSupported)
        | "InvalidOrUnknownSecurity" -> (Some FIX_MassCancelRejectReason_InvalidOrUnknownSecurity)
        | "InvalidOrUnkownUnderlyingSecurity" -> (Some FIX_MassCancelRejectReason_InvalidOrUnkownUnderlyingSecurity)
        | "InvalidOrUnknownProduct" -> (Some FIX_MassCancelRejectReason_InvalidOrUnknownProduct)
        | "InvalidOrUnknownCFICode" -> (Some FIX_MassCancelRejectReason_InvalidOrUnknownCFICode)
        | "InvalidOrUnknownSecurityType" -> (Some FIX_MassCancelRejectReason_InvalidOrUnknownSecurityType)
        | "InvalidOrUnknownTradingSession" -> (Some FIX_MassCancelRejectReason_InvalidOrUnknownTradingSession)
        | "Other" -> (Some FIX_MassCancelRejectReason_Other)
        | _ -> None
    )
;;

let string_to_masscancelrequesttype_opt (d)  =
    (match d with
        | "CancelOrdersForASecurity" -> (Some FIX_MassCancelRequestType_CancelOrdersForASecurity)
        | "CancelOrdersForAnUnderlyingSecurity" -> (Some FIX_MassCancelRequestType_CancelOrdersForAnUnderlyingSecurity)
        | "CancelOrdersForAProduct" -> (Some FIX_MassCancelRequestType_CancelOrdersForAProduct)
        | "CancelOrdersForACFICode" -> (Some FIX_MassCancelRequestType_CancelOrdersForACFICode)
        | "CancelOrdersForASecurityType" -> (Some FIX_MassCancelRequestType_CancelOrdersForASecurityType)
        | "CancelOrdersForATradingSession" -> (Some FIX_MassCancelRequestType_CancelOrdersForATradingSession)
        | "CancelAllOrders" -> (Some FIX_MassCancelRequestType_CancelAllOrders)
        | _ -> None
    )
;;

let string_to_masscancelresponse_opt (d)  =
    (match d with
        | "CancelRequestRejected" -> (Some FIX_MassCancelResponse_CancelRequestRejected)
        | "CancelOrdersForASecurity" -> (Some FIX_MassCancelResponse_CancelOrdersForASecurity)
        | "CancelOrdersForAnUnderlyingSecurity" -> (Some FIX_MassCancelResponse_CancelOrdersForAnUnderlyingSecurity)
        | "CancelOrdersForAProduct" -> (Some FIX_MassCancelResponse_CancelOrdersForAProduct)
        | "CancelOrdersForACFICode" -> (Some FIX_MassCancelResponse_CancelOrdersForACFICode)
        | "CancelOrdersForASecurityType" -> (Some FIX_MassCancelResponse_CancelOrdersForASecurityType)
        | "CancelOrdersForATradingSession" -> (Some FIX_MassCancelResponse_CancelOrdersForATradingSession)
        | "CancelAllOrders" -> (Some FIX_MassCancelResponse_CancelAllOrders)
        | _ -> None
    )
;;

let string_to_massstatusreqtype_opt (d)  =
    (match d with
        | "StatusForOrdersForASecurity" -> (Some FIX_MassStatusReqType_StatusForOrdersForASecurity)
        | "StatusForOrdersForAnUnderlyingSecurity" -> (Some FIX_MassStatusReqType_StatusForOrdersForAnUnderlyingSecurity)
        | "StatusForOrdersForAProduct" -> (Some FIX_MassStatusReqType_StatusForOrdersForAProduct)
        | "StatusForOrdersForACFICode" -> (Some FIX_MassStatusReqType_StatusForOrdersForACFICode)
        | "StatusForOrdersForASecurityType" -> (Some FIX_MassStatusReqType_StatusForOrdersForASecurityType)
        | "StatusForOrdersForATradingSession" -> (Some FIX_MassStatusReqType_StatusForOrdersForATradingSession)
        | "StatusForAllOrders" -> (Some FIX_MassStatusReqType_StatusForAllOrders)
        | "StatusForOrdersForAPartyID" -> (Some FIX_MassStatusReqType_StatusForOrdersForAPartyID)
        | _ -> None
    )
;;

let string_to_matchstatus_opt (d)  =
    (match d with
        | "Compared" -> (Some FIX_MatchStatus_Compared)
        | "Uncompared" -> (Some FIX_MatchStatus_Uncompared)
        | "AdvisoryOrAlert" -> (Some FIX_MatchStatus_AdvisoryOrAlert)
        | _ -> None
    )
;;

let string_to_matchtype_opt (d)  =
    (match d with
        | "ExactMatchPlus4BadgesExecTime" -> (Some FIX_MatchType_ExactMatchPlus4BadgesExecTime)
        | "ExactMatchPlus4Badges" -> (Some FIX_MatchType_ExactMatchPlus4Badges)
        | "ExactMatchPlus2BadgesExecTime" -> (Some FIX_MatchType_ExactMatchPlus2BadgesExecTime)
        | "ExactMatchPlus2Badges" -> (Some FIX_MatchType_ExactMatchPlus2Badges)
        | "ExactMatchPlusExecTime" -> (Some FIX_MatchType_ExactMatchPlusExecTime)
        | "StampedAdvisoriesOrSpecialistAccepts" -> (Some FIX_MatchType_StampedAdvisoriesOrSpecialistAccepts)
        | "A1ExactMatchSummarizedQuantity" -> (Some FIX_MatchType_A1ExactMatchSummarizedQuantity)
        | "A2ExactMatchSummarizedQuantity" -> (Some FIX_MatchType_A2ExactMatchSummarizedQuantity)
        | "A3ExactMatchSummarizedQuantity" -> (Some FIX_MatchType_A3ExactMatchSummarizedQuantity)
        | "A4ExactMatchSummarizedQuantity" -> (Some FIX_MatchType_A4ExactMatchSummarizedQuantity)
        | "A5ExactMatchSummarizedQuantity" -> (Some FIX_MatchType_A5ExactMatchSummarizedQuantity)
        | "ExactMatchMinusBadgesTimes" -> (Some FIX_MatchType_ExactMatchMinusBadgesTimes)
        | "SummarizedMatchMinusBadgesTimes" -> (Some FIX_MatchType_SummarizedMatchMinusBadgesTimes)
        | "OCSLockedIn" -> (Some FIX_MatchType_OCSLockedIn)
        | "ACTAcceptedTrade" -> (Some FIX_MatchType_ACTAcceptedTrade)
        | "ACTDefaultTrade" -> (Some FIX_MatchType_ACTDefaultTrade)
        | "ACTDefaultAfterM2" -> (Some FIX_MatchType_ACTDefaultAfterM2)
        | "ACTM6Match" -> (Some FIX_MatchType_ACTM6Match)
        | _ -> None
    )
;;

let string_to_messageencoding_opt (d)  =
    (match d with
        | "ISO2022JP" -> (Some FIX_MessageEncoding_ISO2022JP)
        | "EUCJP" -> (Some FIX_MessageEncoding_EUCJP)
        | "ShiftJIS" -> (Some FIX_MessageEncoding_ShiftJIS)
        | "UTF8" -> (Some FIX_MessageEncoding_UTF8)
        | _ -> None
    )
;;

let string_to_miscfeebasis_opt (d)  =
    (match d with
        | "Absolute" -> (Some FIX_MiscFeeBasis_Absolute)
        | "PerUnit" -> (Some FIX_MiscFeeBasis_PerUnit)
        | "Percentage" -> (Some FIX_MiscFeeBasis_Percentage)
        | _ -> None
    )
;;

let string_to_miscfeetype_opt (d)  =
    (match d with
        | "Regulatory" -> (Some FIX_MiscFeeType_Regulatory)
        | "Tax" -> (Some FIX_MiscFeeType_Tax)
        | "LocalCommission" -> (Some FIX_MiscFeeType_LocalCommission)
        | "ExchangeFees" -> (Some FIX_MiscFeeType_ExchangeFees)
        | "Stamp" -> (Some FIX_MiscFeeType_Stamp)
        | "Levy" -> (Some FIX_MiscFeeType_Levy)
        | "Other" -> (Some FIX_MiscFeeType_Other)
        | "Markup" -> (Some FIX_MiscFeeType_Markup)
        | "ConsumptionTax" -> (Some FIX_MiscFeeType_ConsumptionTax)
        | "PerTransaction" -> (Some FIX_MiscFeeType_PerTransaction)
        | "Conversion" -> (Some FIX_MiscFeeType_Conversion)
        | "Agent" -> (Some FIX_MiscFeeType_Agent)
        | _ -> None
    )
;;

let string_to_moneylaunderingstatus_opt (d)  =
    (match d with
        | "Passed" -> (Some FIX_MoneyLaunderingStatus_Passed)
        | "NotChecked" -> (Some FIX_MoneyLaunderingStatus_NotChecked)
        | "ExemptBelowLimit" -> (Some FIX_MoneyLaunderingStatus_ExemptBelowLimit)
        | "ExemptMoneyType" -> (Some FIX_MoneyLaunderingStatus_ExemptMoneyType)
        | "ExemptAuthorised" -> (Some FIX_MoneyLaunderingStatus_ExemptAuthorised)
        | _ -> None
    )
;;

let string_to_msgdirection_opt (d)  =
    (match d with
        | "Send" -> (Some FIX_MsgDirection_Send)
        | "Receive" -> (Some FIX_MsgDirection_Receive)
        | _ -> None
    )
;;

let string_to_multilegreportingtype_opt (d)  =
    (match d with
        | "SingleSecurity" -> (Some FIX_MultiLegReportingType_SingleSecurity)
        | "IndividualLegOfAMultiLegSecurity" -> (Some FIX_MultiLegReportingType_IndividualLegOfAMultiLegSecurity)
        | "MultiLegSecurity" -> (Some FIX_MultiLegReportingType_MultiLegSecurity)
        | _ -> None
    )
;;

let string_to_multilegrpttypereq_opt (d)  =
    (match d with
        | "ReportByMulitlegSecurityOnly" -> (Some FIX_MultiLegRptTypeReq_ReportByMulitlegSecurityOnly)
        | "ReportByMultilegSecurityAndInstrumentLegs" -> (Some FIX_MultiLegRptTypeReq_ReportByMultilegSecurityAndInstrumentLegs)
        | "ReportByInstrumentLegsOnly" -> (Some FIX_MultiLegRptTypeReq_ReportByInstrumentLegsOnly)
        | _ -> None
    )
;;

let string_to_netgrossind_opt (d)  =
    (match d with
        | "Net" -> (Some FIX_NetGrossInd_Net)
        | "Gross" -> (Some FIX_NetGrossInd_Gross)
        | _ -> None
    )
;;

let string_to_networkrequesttype_opt (d)  =
    (match d with
        | "Snapshot" -> (Some FIX_NetworkRequestType_Snapshot)
        | "Subscribe" -> (Some FIX_NetworkRequestType_Subscribe)
        | "StopSubscribing" -> (Some FIX_NetworkRequestType_StopSubscribing)
        | "LevelOfDetail" -> (Some FIX_NetworkRequestType_LevelOfDetail)
        | _ -> None
    )
;;

let string_to_networkstatusresponsetype_opt (d)  =
    (match d with
        | "Full" -> (Some FIX_NetworkStatusResponseType_Full)
        | "IncrementalUpdate" -> (Some FIX_NetworkStatusResponseType_IncrementalUpdate)
        | _ -> None
    )
;;

let string_to_notifybrokerofcredit_opt (d)  =
    (match d with
        | "DetailsShouldBeCommunicated" -> (Some FIX_NotifyBrokerOfCredit_DetailsShouldBeCommunicated)
        | "DetailsShouldNotBeCommunicated" -> (Some FIX_NotifyBrokerOfCredit_DetailsShouldNotBeCommunicated)
        | _ -> None
    )
;;

let string_to_oddlot_opt (d)  =
    (match d with
        | "TreatAsOddLot" -> (Some FIX_OddLot_TreatAsOddLot)
        | "TreatAsRoundLot" -> (Some FIX_OddLot_TreatAsRoundLot)
        | _ -> None
    )
;;

let string_to_openclosesettlflag_opt (d)  =
    (match d with
        | "DailyOpen" -> (Some FIX_OpenCloseSettlFlag_DailyOpen)
        | "SessionOpen" -> (Some FIX_OpenCloseSettlFlag_SessionOpen)
        | "DeliverySettlementEntry" -> (Some FIX_OpenCloseSettlFlag_DeliverySettlementEntry)
        | "ExpectedEntry" -> (Some FIX_OpenCloseSettlFlag_ExpectedEntry)
        | "EntryFromPreviousBusinessDay" -> (Some FIX_OpenCloseSettlFlag_EntryFromPreviousBusinessDay)
        | "TheoreticalPriceValue" -> (Some FIX_OpenCloseSettlFlag_TheoreticalPriceValue)
        | _ -> None
    )
;;

let string_to_ordrejreason_opt (d)  =
    (match d with
        | "BrokerCredit" -> (Some FIX_OrdRejReason_BrokerCredit)
        | "UnknownSymbol" -> (Some FIX_OrdRejReason_UnknownSymbol)
        | "ExchangeClosed" -> (Some FIX_OrdRejReason_ExchangeClosed)
        | "OrderExceedsLimit" -> (Some FIX_OrdRejReason_OrderExceedsLimit)
        | "TooLateToEnter" -> (Some FIX_OrdRejReason_TooLateToEnter)
        | "UnknownOrder" -> (Some FIX_OrdRejReason_UnknownOrder)
        | "DuplicateOrder" -> (Some FIX_OrdRejReason_DuplicateOrder)
        | "DuplicateOfAVerballyCommunicatedOrder" -> (Some FIX_OrdRejReason_DuplicateOfAVerballyCommunicatedOrder)
        | "StaleOrder" -> (Some FIX_OrdRejReason_StaleOrder)
        | "TradeAlongRequired" -> (Some FIX_OrdRejReason_TradeAlongRequired)
        | "InvalidInvestorID" -> (Some FIX_OrdRejReason_InvalidInvestorID)
        | "UnsupportedOrderCharacteristic" -> (Some FIX_OrdRejReason_UnsupportedOrderCharacteristic)
        | "IncorrectQuantity" -> (Some FIX_OrdRejReason_IncorrectQuantity)
        | "IncorrectAllocatedQuantity" -> (Some FIX_OrdRejReason_IncorrectAllocatedQuantity)
        | "UnknownAccount" -> (Some FIX_OrdRejReason_UnknownAccount)
        | "Other" -> (Some FIX_OrdRejReason_Other)
        | _ -> None
    )
;;

let string_to_ordstatus_opt (d)  =
    (match d with
        | "New" -> (Some FIX_OrdStatus_New)
        | "PartiallyFilled" -> (Some FIX_OrdStatus_PartiallyFilled)
        | "Filled" -> (Some FIX_OrdStatus_Filled)
        | "DoneForDay" -> (Some FIX_OrdStatus_DoneForDay)
        | "Canceled" -> (Some FIX_OrdStatus_Canceled)
        | "PendingCancel" -> (Some FIX_OrdStatus_PendingCancel)
        | "Stopped" -> (Some FIX_OrdStatus_Stopped)
        | "Rejected" -> (Some FIX_OrdStatus_Rejected)
        | "Suspended" -> (Some FIX_OrdStatus_Suspended)
        | "PendingNew" -> (Some FIX_OrdStatus_PendingNew)
        | "Calculated" -> (Some FIX_OrdStatus_Calculated)
        | "Expired" -> (Some FIX_OrdStatus_Expired)
        | "AcceptedForBidding" -> (Some FIX_OrdStatus_AcceptedForBidding)
        | "PendingReplace" -> (Some FIX_OrdStatus_PendingReplace)
        | "Replaced" -> (Some FIX_OrdStatus_Replaced)
        | _ -> None
    )
;;

let string_to_ordtype_opt (d)  =
    (match d with
        | "Market" -> (Some FIX_OrdType_Market)
        | "Limit" -> (Some FIX_OrdType_Limit)
        | "Stop" -> (Some FIX_OrdType_Stop)
        | "StopLimit" -> (Some FIX_OrdType_StopLimit)
        | "WithOrWithout" -> (Some FIX_OrdType_WithOrWithout)
        | "LimitOrBetter" -> (Some FIX_OrdType_LimitOrBetter)
        | "LimitWithOrWithout" -> (Some FIX_OrdType_LimitWithOrWithout)
        | "OnBasis" -> (Some FIX_OrdType_OnBasis)
        | "PreviouslyQuoted" -> (Some FIX_OrdType_PreviouslyQuoted)
        | "PreviouslyIndicated" -> (Some FIX_OrdType_PreviouslyIndicated)
        | "ForexSwap" -> (Some FIX_OrdType_ForexSwap)
        | "Funari" -> (Some FIX_OrdType_Funari)
        | "MarketIfTouched" -> (Some FIX_OrdType_MarketIfTouched)
        | "MarketWithLeftOverAsLimit" -> (Some FIX_OrdType_MarketWithLeftOverAsLimit)
        | "PreviousFundValuationPoint" -> (Some FIX_OrdType_PreviousFundValuationPoint)
        | "NextFundValuationPoint" -> (Some FIX_OrdType_NextFundValuationPoint)
        | "Pegged" -> (Some FIX_OrdType_Pegged)
        | _ -> None
    )
;;

let string_to_ordercapacity_opt (d)  =
    (match d with
        | "Agency" -> (Some FIX_OrderCapacity_Agency)
        | "Proprietary" -> (Some FIX_OrderCapacity_Proprietary)
        | "Individual" -> (Some FIX_OrderCapacity_Individual)
        | "Principal" -> (Some FIX_OrderCapacity_Principal)
        | "RisklessPrincipal" -> (Some FIX_OrderCapacity_RisklessPrincipal)
        | "AgentForOtherMember" -> (Some FIX_OrderCapacity_AgentForOtherMember)
        | _ -> None
    )
;;

let string_to_orderrestrictions_opt (d)  =
    (match d with
        | "ProgramTrade" -> (Some FIX_OrderRestrictions_ProgramTrade)
        | "IndexArbitrage" -> (Some FIX_OrderRestrictions_IndexArbitrage)
        | "NonIndexArbitrage" -> (Some FIX_OrderRestrictions_NonIndexArbitrage)
        | "CompetingMarketMaker" -> (Some FIX_OrderRestrictions_CompetingMarketMaker)
        | "ActingAsMarketMakerOrSpecialistInSecurity" -> (Some FIX_OrderRestrictions_ActingAsMarketMakerOrSpecialistInSecurity)
        | "ActingAsMarketMakerOrSpecialistInUnderlying" -> (Some FIX_OrderRestrictions_ActingAsMarketMakerOrSpecialistInUnderlying)
        | "ForeignEntity" -> (Some FIX_OrderRestrictions_ForeignEntity)
        | "ExternalMarketParticipant" -> (Some FIX_OrderRestrictions_ExternalMarketParticipant)
        | "ExternalInterConnectedMarketLinkage" -> (Some FIX_OrderRestrictions_ExternalInterConnectedMarketLinkage)
        | "RisklessArbitrage" -> (Some FIX_OrderRestrictions_RisklessArbitrage)
        | _ -> None
    )
;;

let string_to_ownertype_opt (d)  =
    (match d with
        | "IndividualInvestor" -> (Some FIX_OwnerType_IndividualInvestor)
        | "PublicCompany" -> (Some FIX_OwnerType_PublicCompany)
        | "PrivateCompany" -> (Some FIX_OwnerType_PrivateCompany)
        | "IndividualTrustee" -> (Some FIX_OwnerType_IndividualTrustee)
        | "CompanyTrustee" -> (Some FIX_OwnerType_CompanyTrustee)
        | "PensionPlan" -> (Some FIX_OwnerType_PensionPlan)
        | "CustodianUnderGiftsToMinorsAct" -> (Some FIX_OwnerType_CustodianUnderGiftsToMinorsAct)
        | "Trusts" -> (Some FIX_OwnerType_Trusts)
        | "Fiduciaries" -> (Some FIX_OwnerType_Fiduciaries)
        | "NetworkingSubAccount" -> (Some FIX_OwnerType_NetworkingSubAccount)
        | "NonProfitOrganization" -> (Some FIX_OwnerType_NonProfitOrganization)
        | "CorporateBody" -> (Some FIX_OwnerType_CorporateBody)
        | "Nominee" -> (Some FIX_OwnerType_Nominee)
        | _ -> None
    )
;;

let string_to_ownershiptype_opt (d)  =
    (match d with
        | "JointInvestors" -> (Some FIX_OwnershipType_JointInvestors)
        | "TenantsInCommon" -> (Some FIX_OwnershipType_TenantsInCommon)
        | "JointTrustees" -> (Some FIX_OwnershipType_JointTrustees)
        | _ -> None
    )
;;

let string_to_partyidsource_opt (d)  =
    (match d with
        | "BIC" -> (Some FIX_PartyIDSource_BIC)
        | "GeneralIdentifier" -> (Some FIX_PartyIDSource_GeneralIdentifier)
        | "Proprietary" -> (Some FIX_PartyIDSource_Proprietary)
        | "ISOCountryCode" -> (Some FIX_PartyIDSource_ISOCountryCode)
        | "SettlementEntityLocation" -> (Some FIX_PartyIDSource_SettlementEntityLocation)
        | "MIC" -> (Some FIX_PartyIDSource_MIC)
        | "CSDParticipant" -> (Some FIX_PartyIDSource_CSDParticipant)
        | "KoreanInvestorID" -> (Some FIX_PartyIDSource_KoreanInvestorID)
        | "TaiwaneseForeignInvestorID" -> (Some FIX_PartyIDSource_TaiwaneseForeignInvestorID)
        | "TaiwaneseTradingAcct" -> (Some FIX_PartyIDSource_TaiwaneseTradingAcct)
        | "MalaysianCentralDepository" -> (Some FIX_PartyIDSource_MalaysianCentralDepository)
        | "ChineseInvestorID" -> (Some FIX_PartyIDSource_ChineseInvestorID)
        | "UKNationalInsuranceOrPensionNumber" -> (Some FIX_PartyIDSource_UKNationalInsuranceOrPensionNumber)
        | "USSocialSecurityNumber" -> (Some FIX_PartyIDSource_USSocialSecurityNumber)
        | "USEmployerOrTaxIDNumber" -> (Some FIX_PartyIDSource_USEmployerOrTaxIDNumber)
        | "AustralianBusinessNumber" -> (Some FIX_PartyIDSource_AustralianBusinessNumber)
        | "AustralianTaxFileNumber" -> (Some FIX_PartyIDSource_AustralianTaxFileNumber)
        | "ISITCAcronym" -> (Some FIX_PartyIDSource_ISITCAcronym)
        | _ -> None
    )
;;

let string_to_partyrole_opt (d)  =
    (match d with
        | "ExecutingFirm" -> (Some FIX_PartyRole_ExecutingFirm)
        | "BrokerOfCredit" -> (Some FIX_PartyRole_BrokerOfCredit)
        | "ClientID" -> (Some FIX_PartyRole_ClientID)
        | "ClearingFirm" -> (Some FIX_PartyRole_ClearingFirm)
        | "InvestorID" -> (Some FIX_PartyRole_InvestorID)
        | "IntroducingFirm" -> (Some FIX_PartyRole_IntroducingFirm)
        | "EnteringFirm" -> (Some FIX_PartyRole_EnteringFirm)
        | "Locate" -> (Some FIX_PartyRole_Locate)
        | "FundManagerClientID" -> (Some FIX_PartyRole_FundManagerClientID)
        | "SettlementLocation" -> (Some FIX_PartyRole_SettlementLocation)
        | "OrderOriginationTrader" -> (Some FIX_PartyRole_OrderOriginationTrader)
        | "ExecutingTrader" -> (Some FIX_PartyRole_ExecutingTrader)
        | "OrderOriginationFirm" -> (Some FIX_PartyRole_OrderOriginationFirm)
        | "GiveupClearingFirm" -> (Some FIX_PartyRole_GiveupClearingFirm)
        | "CorrespondantClearingFirm" -> (Some FIX_PartyRole_CorrespondantClearingFirm)
        | "ExecutingSystem" -> (Some FIX_PartyRole_ExecutingSystem)
        | "ContraFirm" -> (Some FIX_PartyRole_ContraFirm)
        | "ContraClearingFirm" -> (Some FIX_PartyRole_ContraClearingFirm)
        | "SponsoringFirm" -> (Some FIX_PartyRole_SponsoringFirm)
        | "UnderlyingContraFirm" -> (Some FIX_PartyRole_UnderlyingContraFirm)
        | "ClearingOrganization" -> (Some FIX_PartyRole_ClearingOrganization)
        | "Exchange" -> (Some FIX_PartyRole_Exchange)
        | "CustomerAccount" -> (Some FIX_PartyRole_CustomerAccount)
        | "CorrespondentClearingOrganization" -> (Some FIX_PartyRole_CorrespondentClearingOrganization)
        | "CorrespondentBroker" -> (Some FIX_PartyRole_CorrespondentBroker)
        | "Buyer" -> (Some FIX_PartyRole_Buyer)
        | "Custodian" -> (Some FIX_PartyRole_Custodian)
        | "Intermediary" -> (Some FIX_PartyRole_Intermediary)
        | "Agent" -> (Some FIX_PartyRole_Agent)
        | "SubCustodian" -> (Some FIX_PartyRole_SubCustodian)
        | "Beneficiary" -> (Some FIX_PartyRole_Beneficiary)
        | "InterestedParty" -> (Some FIX_PartyRole_InterestedParty)
        | "RegulatoryBody" -> (Some FIX_PartyRole_RegulatoryBody)
        | "LiquidityProvider" -> (Some FIX_PartyRole_LiquidityProvider)
        | "EnteringTrader" -> (Some FIX_PartyRole_EnteringTrader)
        | "ContraTrader" -> (Some FIX_PartyRole_ContraTrader)
        | "PositionAccount" -> (Some FIX_PartyRole_PositionAccount)
        | _ -> None
    )
;;

let string_to_partysubidtype_opt (d)  =
    (match d with
        | "Firm" -> (Some FIX_PartySubIDType_Firm)
        | "Person" -> (Some FIX_PartySubIDType_Person)
        | "System" -> (Some FIX_PartySubIDType_System)
        | "Application" -> (Some FIX_PartySubIDType_Application)
        | "FullLegalNameOfFirm" -> (Some FIX_PartySubIDType_FullLegalNameOfFirm)
        | "PostalAddress" -> (Some FIX_PartySubIDType_PostalAddress)
        | "PhoneNumber" -> (Some FIX_PartySubIDType_PhoneNumber)
        | "EmailAddress" -> (Some FIX_PartySubIDType_EmailAddress)
        | "ContactName" -> (Some FIX_PartySubIDType_ContactName)
        | "SecuritiesAccountNumber" -> (Some FIX_PartySubIDType_SecuritiesAccountNumber)
        | "RegistrationNumber" -> (Some FIX_PartySubIDType_RegistrationNumber)
        | "RegisteredAddressForConfirmation" -> (Some FIX_PartySubIDType_RegisteredAddressForConfirmation)
        | "RegulatoryStatus" -> (Some FIX_PartySubIDType_RegulatoryStatus)
        | "RegistrationName" -> (Some FIX_PartySubIDType_RegistrationName)
        | "CashAccountNumber" -> (Some FIX_PartySubIDType_CashAccountNumber)
        | "BIC" -> (Some FIX_PartySubIDType_BIC)
        | "CSDParticipantMemberCode" -> (Some FIX_PartySubIDType_CSDParticipantMemberCode)
        | "RegisteredAddress" -> (Some FIX_PartySubIDType_RegisteredAddress)
        | "FundAccountName" -> (Some FIX_PartySubIDType_FundAccountName)
        | "TelexNumber" -> (Some FIX_PartySubIDType_TelexNumber)
        | "FaxNumber" -> (Some FIX_PartySubIDType_FaxNumber)
        | "SecuritiesAccountName" -> (Some FIX_PartySubIDType_SecuritiesAccountName)
        | "CashAccountName" -> (Some FIX_PartySubIDType_CashAccountName)
        | "Department" -> (Some FIX_PartySubIDType_Department)
        | "LocationDesk" -> (Some FIX_PartySubIDType_LocationDesk)
        | "PositionAccountType" -> (Some FIX_PartySubIDType_PositionAccountType)
        | _ -> None
    )
;;

let string_to_paymentmethod_opt (d)  =
    (match d with
        | "CREST" -> (Some FIX_PaymentMethod_CREST)
        | "NSCC" -> (Some FIX_PaymentMethod_NSCC)
        | "Euroclear" -> (Some FIX_PaymentMethod_Euroclear)
        | "Clearstream" -> (Some FIX_PaymentMethod_Clearstream)
        | "Cheque" -> (Some FIX_PaymentMethod_Cheque)
        | "TelegraphicTransfer" -> (Some FIX_PaymentMethod_TelegraphicTransfer)
        | "FedWire" -> (Some FIX_PaymentMethod_FedWire)
        | "DebitCard" -> (Some FIX_PaymentMethod_DebitCard)
        | "DirectDebit" -> (Some FIX_PaymentMethod_DirectDebit)
        | "DirectCredit" -> (Some FIX_PaymentMethod_DirectCredit)
        | "CreditCard" -> (Some FIX_PaymentMethod_CreditCard)
        | "ACHDebit" -> (Some FIX_PaymentMethod_ACHDebit)
        | "ACHCredit" -> (Some FIX_PaymentMethod_ACHCredit)
        | "BPAY" -> (Some FIX_PaymentMethod_BPAY)
        | "HighValueClearingSystem" -> (Some FIX_PaymentMethod_HighValueClearingSystem)
        | _ -> None
    )
;;

let string_to_peglimittype_opt (d)  =
    (match d with
        | "OrBetter" -> (Some FIX_PegLimitType_OrBetter)
        | "Strict" -> (Some FIX_PegLimitType_Strict)
        | "OrWorse" -> (Some FIX_PegLimitType_OrWorse)
        | _ -> None
    )
;;

let string_to_pegmovetype_opt (d)  =
    (match d with
        | "Floating" -> (Some FIX_PegMoveType_Floating)
        | "Fixed" -> (Some FIX_PegMoveType_Fixed)
        | _ -> None
    )
;;

let string_to_pegoffsettype_opt (d)  =
    (match d with
        | "Price" -> (Some FIX_PegOffsetType_Price)
        | "BasisPoints" -> (Some FIX_PegOffsetType_BasisPoints)
        | "Ticks" -> (Some FIX_PegOffsetType_Ticks)
        | "PriceTier" -> (Some FIX_PegOffsetType_PriceTier)
        | _ -> None
    )
;;

let string_to_pegrounddirection_opt (d)  =
    (match d with
        | "MoreAggressive" -> (Some FIX_PegRoundDirection_MoreAggressive)
        | "MorePassive" -> (Some FIX_PegRoundDirection_MorePassive)
        | _ -> None
    )
;;

let string_to_pegscope_opt (d)  =
    (match d with
        | "Local" -> (Some FIX_PegScope_Local)
        | "National" -> (Some FIX_PegScope_National)
        | "Global" -> (Some FIX_PegScope_Global)
        | "NationalExcludingLocal" -> (Some FIX_PegScope_NationalExcludingLocal)
        | _ -> None
    )
;;

let string_to_posamttype_opt (d)  =
    (match d with
        | "FinalMarkToMarketAmount" -> (Some FIX_PosAmtType_FinalMarkToMarketAmount)
        | "IncrementalMarkToMarketAmount" -> (Some FIX_PosAmtType_IncrementalMarkToMarketAmount)
        | "TradeVariationAmount" -> (Some FIX_PosAmtType_TradeVariationAmount)
        | "StartOfDayMarkToMarketAmount" -> (Some FIX_PosAmtType_StartOfDayMarkToMarketAmount)
        | "PremiumAmount" -> (Some FIX_PosAmtType_PremiumAmount)
        | "CashResidualAmount" -> (Some FIX_PosAmtType_CashResidualAmount)
        | "CashAmount" -> (Some FIX_PosAmtType_CashAmount)
        | "ValueAdjustedAmount" -> (Some FIX_PosAmtType_ValueAdjustedAmount)
        | _ -> None
    )
;;

let string_to_posmaintaction_opt (d)  =
    (match d with
        | "New" -> (Some FIX_PosMaintAction_New)
        | "Replace" -> (Some FIX_PosMaintAction_Replace)
        | "Cancel" -> (Some FIX_PosMaintAction_Cancel)
        | _ -> None
    )
;;

let string_to_posmaintresult_opt (d)  =
    (match d with
        | "SuccessfulCompletion" -> (Some FIX_PosMaintResult_SuccessfulCompletion)
        | "Rejected" -> (Some FIX_PosMaintResult_Rejected)
        | "Other" -> (Some FIX_PosMaintResult_Other)
        | _ -> None
    )
;;

let string_to_posmaintstatus_opt (d)  =
    (match d with
        | "Accepted" -> (Some FIX_PosMaintStatus_Accepted)
        | "AcceptedWithWarnings" -> (Some FIX_PosMaintStatus_AcceptedWithWarnings)
        | "Rejected" -> (Some FIX_PosMaintStatus_Rejected)
        | "Completed" -> (Some FIX_PosMaintStatus_Completed)
        | "CompletedWithWarnings" -> (Some FIX_PosMaintStatus_CompletedWithWarnings)
        | _ -> None
    )
;;

let string_to_posqtystatus_opt (d)  =
    (match d with
        | "Submitted" -> (Some FIX_PosQtyStatus_Submitted)
        | "Accepted" -> (Some FIX_PosQtyStatus_Accepted)
        | "Rejected" -> (Some FIX_PosQtyStatus_Rejected)
        | _ -> None
    )
;;

let string_to_posreqresult_opt (d)  =
    (match d with
        | "ValidRequest" -> (Some FIX_PosReqResult_ValidRequest)
        | "InvalidOrUnsupportedRequest" -> (Some FIX_PosReqResult_InvalidOrUnsupportedRequest)
        | "NoPositionsFoundThatMatchCriteria" -> (Some FIX_PosReqResult_NoPositionsFoundThatMatchCriteria)
        | "NotAuthorizedToRequestPositions" -> (Some FIX_PosReqResult_NotAuthorizedToRequestPositions)
        | "RequestForPositionNotSupported" -> (Some FIX_PosReqResult_RequestForPositionNotSupported)
        | "Other" -> (Some FIX_PosReqResult_Other)
        | _ -> None
    )
;;

let string_to_posreqstatus_opt (d)  =
    (match d with
        | "Completed" -> (Some FIX_PosReqStatus_Completed)
        | "CompletedWithWarnings" -> (Some FIX_PosReqStatus_CompletedWithWarnings)
        | "Rejected" -> (Some FIX_PosReqStatus_Rejected)
        | _ -> None
    )
;;

let string_to_posreqtype_opt (d)  =
    (match d with
        | "Positions" -> (Some FIX_PosReqType_Positions)
        | "Trades" -> (Some FIX_PosReqType_Trades)
        | "Exercises" -> (Some FIX_PosReqType_Exercises)
        | "Assignments" -> (Some FIX_PosReqType_Assignments)
        | _ -> None
    )
;;

let string_to_postranstype_opt (d)  =
    (match d with
        | "Exercise" -> (Some FIX_PosTransType_Exercise)
        | "DoNotExercise" -> (Some FIX_PosTransType_DoNotExercise)
        | "PositionAdjustment" -> (Some FIX_PosTransType_PositionAdjustment)
        | "PositionChangeSubmission" -> (Some FIX_PosTransType_PositionChangeSubmission)
        | "Pledge" -> (Some FIX_PosTransType_Pledge)
        | _ -> None
    )
;;

let string_to_postype_opt (d)  =
    (match d with
        | "TransactionQuantity" -> (Some FIX_PosType_TransactionQuantity)
        | "IntraSpreadQty" -> (Some FIX_PosType_IntraSpreadQty)
        | "InterSpreadQty" -> (Some FIX_PosType_InterSpreadQty)
        | "EndOfDayQty" -> (Some FIX_PosType_EndOfDayQty)
        | "StartOfDayQty" -> (Some FIX_PosType_StartOfDayQty)
        | "OptionExerciseQty" -> (Some FIX_PosType_OptionExerciseQty)
        | "OptionAssignment" -> (Some FIX_PosType_OptionAssignment)
        | "TransactionFromExercise" -> (Some FIX_PosType_TransactionFromExercise)
        | "TransactionFromAssignment" -> (Some FIX_PosType_TransactionFromAssignment)
        | "PitTradeQty" -> (Some FIX_PosType_PitTradeQty)
        | "TransferTradeQty" -> (Some FIX_PosType_TransferTradeQty)
        | "ElectronicTradeQty" -> (Some FIX_PosType_ElectronicTradeQty)
        | "AllocationTradeQty" -> (Some FIX_PosType_AllocationTradeQty)
        | "AdjustmentQty" -> (Some FIX_PosType_AdjustmentQty)
        | "AsOfTradeQty" -> (Some FIX_PosType_AsOfTradeQty)
        | "DeliveryQty" -> (Some FIX_PosType_DeliveryQty)
        | "TotalTransactionQty" -> (Some FIX_PosType_TotalTransactionQty)
        | "CrossMarginQty" -> (Some FIX_PosType_CrossMarginQty)
        | "IntegralSplit" -> (Some FIX_PosType_IntegralSplit)
        | _ -> None
    )
;;

let string_to_positioneffect_opt (d)  =
    (match d with
        | "Open" -> (Some FIX_PositionEffect_Open)
        | "Close" -> (Some FIX_PositionEffect_Close)
        | "Rolled" -> (Some FIX_PositionEffect_Rolled)
        | "FIFO" -> (Some FIX_PositionEffect_FIFO)
        | _ -> None
    )
;;

let string_to_possdupflag_opt (d)  =
    (match d with
        | "PossibleDuplicate" -> (Some FIX_PossDupFlag_PossibleDuplicate)
        | "OriginalTransmission" -> (Some FIX_PossDupFlag_OriginalTransmission)
        | _ -> None
    )
;;

let string_to_possresend_opt (d)  =
    (match d with
        | "PossibleResend" -> (Some FIX_PossResend_PossibleResend)
        | "OriginalTransmission" -> (Some FIX_PossResend_OriginalTransmission)
        | _ -> None
    )
;;

let string_to_preallocmethod_opt (d)  =
    (match d with
        | "ProRata" -> (Some FIX_PreallocMethod_ProRata)
        | "DoNotProRata" -> (Some FIX_PreallocMethod_DoNotProRata)
        | _ -> None
    )
;;

let string_to_previouslyreported_opt (d)  =
    (match d with
        | "PerviouslyReportedToCounterparty" -> (Some FIX_PreviouslyReported_PerviouslyReportedToCounterparty)
        | "NotReportedToCounterparty" -> (Some FIX_PreviouslyReported_NotReportedToCounterparty)
        | _ -> None
    )
;;

let string_to_pricetype_opt (d)  =
    (match d with
        | "Percentage" -> (Some FIX_PriceType_Percentage)
        | "PerUnit" -> (Some FIX_PriceType_PerUnit)
        | "FixedAmount" -> (Some FIX_PriceType_FixedAmount)
        | "Discount" -> (Some FIX_PriceType_Discount)
        | "Premium" -> (Some FIX_PriceType_Premium)
        | "Spread" -> (Some FIX_PriceType_Spread)
        | "TEDPrice" -> (Some FIX_PriceType_TEDPrice)
        | "TEDYield" -> (Some FIX_PriceType_TEDYield)
        | "Yield" -> (Some FIX_PriceType_Yield)
        | "FixedCabinetTradePrice" -> (Some FIX_PriceType_FixedCabinetTradePrice)
        | "VariableCabinetTradePrice" -> (Some FIX_PriceType_VariableCabinetTradePrice)
        | _ -> None
    )
;;

let string_to_priorityindicator_opt (d)  =
    (match d with
        | "PriorityUnchanged" -> (Some FIX_PriorityIndicator_PriorityUnchanged)
        | "LostPriorityAsResultOfOrderChange" -> (Some FIX_PriorityIndicator_LostPriorityAsResultOfOrderChange)
        | _ -> None
    )
;;

let string_to_processcode_opt (d)  =
    (match d with
        | "Regular" -> (Some FIX_ProcessCode_Regular)
        | "SoftDollar" -> (Some FIX_ProcessCode_SoftDollar)
        | "StepIn" -> (Some FIX_ProcessCode_StepIn)
        | "StepOut" -> (Some FIX_ProcessCode_StepOut)
        | "SoftDollarStepIn" -> (Some FIX_ProcessCode_SoftDollarStepIn)
        | "SoftDollarStepOut" -> (Some FIX_ProcessCode_SoftDollarStepOut)
        | "PlanSponsor" -> (Some FIX_ProcessCode_PlanSponsor)
        | _ -> None
    )
;;

let string_to_product_opt (d)  =
    (match d with
        | "AGENCY" -> (Some FIX_Product_AGENCY)
        | "COMMODITY" -> (Some FIX_Product_COMMODITY)
        | "CORPORATE" -> (Some FIX_Product_CORPORATE)
        | "CURRENCY" -> (Some FIX_Product_CURRENCY)
        | "EQUITY" -> (Some FIX_Product_EQUITY)
        | "GOVERNMENT" -> (Some FIX_Product_GOVERNMENT)
        | "INDEX" -> (Some FIX_Product_INDEX)
        | "LOAN" -> (Some FIX_Product_LOAN)
        | "MONEYMARKET" -> (Some FIX_Product_MONEYMARKET)
        | "MORTGAGE" -> (Some FIX_Product_MORTGAGE)
        | "MUNICIPAL" -> (Some FIX_Product_MUNICIPAL)
        | "OTHER" -> (Some FIX_Product_OTHER)
        | "FINANCING" -> (Some FIX_Product_FINANCING)
        | _ -> None
    )
;;

let string_to_progrptreqs_opt (d)  =
    (match d with
        | "BuySideRequests" -> (Some FIX_ProgRptReqs_BuySideRequests)
        | "SellSideSends" -> (Some FIX_ProgRptReqs_SellSideSends)
        | "RealTimeExecutionReports" -> (Some FIX_ProgRptReqs_RealTimeExecutionReports)
        | _ -> None
    )
;;

let string_to_publishtrdindicator_opt (d)  =
    (match d with
        | "ReportTrade" -> (Some FIX_PublishTrdIndicator_ReportTrade)
        | "DoNotReportTrade" -> (Some FIX_PublishTrdIndicator_DoNotReportTrade)
        | _ -> None
    )
;;

let string_to_putorcall_opt (d)  =
    (match d with
        | "Put" -> (Some FIX_PutOrCall_Put)
        | "Call" -> (Some FIX_PutOrCall_Call)
        | _ -> None
    )
;;

let string_to_qtytype_opt (d)  =
    (match d with
        | "Units" -> (Some FIX_QtyType_Units)
        | "Contracts" -> (Some FIX_QtyType_Contracts)
        | _ -> None
    )
;;

let string_to_quotecanceltype_opt (d)  =
    (match d with
        | "CancelForOneOrMoreSecurities" -> (Some FIX_QuoteCancelType_CancelForOneOrMoreSecurities)
        | "CancelForSecurityType" -> (Some FIX_QuoteCancelType_CancelForSecurityType)
        | "CancelForUnderlyingSecurity" -> (Some FIX_QuoteCancelType_CancelForUnderlyingSecurity)
        | "CancelAllQuotes" -> (Some FIX_QuoteCancelType_CancelAllQuotes)
        | _ -> None
    )
;;

let string_to_quotecondition_opt (d)  =
    (match d with
        | "Open" -> (Some FIX_QuoteCondition_Open)
        | "Closed" -> (Some FIX_QuoteCondition_Closed)
        | "ExchangeBest" -> (Some FIX_QuoteCondition_ExchangeBest)
        | "ConsolidatedBest" -> (Some FIX_QuoteCondition_ConsolidatedBest)
        | "Locked" -> (Some FIX_QuoteCondition_Locked)
        | "Crossed" -> (Some FIX_QuoteCondition_Crossed)
        | "Depth" -> (Some FIX_QuoteCondition_Depth)
        | "FastTrading" -> (Some FIX_QuoteCondition_FastTrading)
        | "NonFirm" -> (Some FIX_QuoteCondition_NonFirm)
        | _ -> None
    )
;;

let string_to_quotepricetype_opt (d)  =
    (match d with
        | "Percent" -> (Some FIX_QuotePriceType_Percent)
        | "PerShare" -> (Some FIX_QuotePriceType_PerShare)
        | "FixedAmount" -> (Some FIX_QuotePriceType_FixedAmount)
        | "Discount" -> (Some FIX_QuotePriceType_Discount)
        | "Premium" -> (Some FIX_QuotePriceType_Premium)
        | "Spread" -> (Some FIX_QuotePriceType_Spread)
        | "TEDPrice" -> (Some FIX_QuotePriceType_TEDPrice)
        | "TEDYield" -> (Some FIX_QuotePriceType_TEDYield)
        | "YieldSpread" -> (Some FIX_QuotePriceType_YieldSpread)
        | "Yield" -> (Some FIX_QuotePriceType_Yield)
        | _ -> None
    )
;;

let string_to_quoterejectreason_opt (d)  =
    (match d with
        | "UnknownSymbol" -> (Some FIX_QuoteRejectReason_UnknownSymbol)
        | "Exchange" -> (Some FIX_QuoteRejectReason_Exchange)
        | "QuoteRequestExceedsLimit" -> (Some FIX_QuoteRejectReason_QuoteRequestExceedsLimit)
        | "TooLateToEnter" -> (Some FIX_QuoteRejectReason_TooLateToEnter)
        | "UnknownQuote" -> (Some FIX_QuoteRejectReason_UnknownQuote)
        | "DuplicateQuote" -> (Some FIX_QuoteRejectReason_DuplicateQuote)
        | "InvalidBid" -> (Some FIX_QuoteRejectReason_InvalidBid)
        | "InvalidPrice" -> (Some FIX_QuoteRejectReason_InvalidPrice)
        | "NotAuthorizedToQuoteSecurity" -> (Some FIX_QuoteRejectReason_NotAuthorizedToQuoteSecurity)
        | "Other" -> (Some FIX_QuoteRejectReason_Other)
        | _ -> None
    )
;;

let string_to_quoterequestrejectreason_opt (d)  =
    (match d with
        | "UnknownSymbol" -> (Some FIX_QuoteRequestRejectReason_UnknownSymbol)
        | "Exchange" -> (Some FIX_QuoteRequestRejectReason_Exchange)
        | "QuoteRequestExceedsLimit" -> (Some FIX_QuoteRequestRejectReason_QuoteRequestExceedsLimit)
        | "TooLateToEnter" -> (Some FIX_QuoteRequestRejectReason_TooLateToEnter)
        | "InvalidPrice" -> (Some FIX_QuoteRequestRejectReason_InvalidPrice)
        | "NotAuthorizedToRequestQuote" -> (Some FIX_QuoteRequestRejectReason_NotAuthorizedToRequestQuote)
        | "NoMatchForInquiry" -> (Some FIX_QuoteRequestRejectReason_NoMatchForInquiry)
        | "NoMarketForInstrument" -> (Some FIX_QuoteRequestRejectReason_NoMarketForInstrument)
        | "NoInventory" -> (Some FIX_QuoteRequestRejectReason_NoInventory)
        | "Pass" -> (Some FIX_QuoteRequestRejectReason_Pass)
        | "Other" -> (Some FIX_QuoteRequestRejectReason_Other)
        | _ -> None
    )
;;

let string_to_quoterequesttype_opt (d)  =
    (match d with
        | "Manual" -> (Some FIX_QuoteRequestType_Manual)
        | "Automatic" -> (Some FIX_QuoteRequestType_Automatic)
        | _ -> None
    )
;;

let string_to_quoteresptype_opt (d)  =
    (match d with
        | "Hit" -> (Some FIX_QuoteRespType_Hit)
        | "Counter" -> (Some FIX_QuoteRespType_Counter)
        | "Expired" -> (Some FIX_QuoteRespType_Expired)
        | "Cover" -> (Some FIX_QuoteRespType_Cover)
        | "DoneAway" -> (Some FIX_QuoteRespType_DoneAway)
        | "Pass" -> (Some FIX_QuoteRespType_Pass)
        | _ -> None
    )
;;

let string_to_quoteresponselevel_opt (d)  =
    (match d with
        | "NoAcknowledgement" -> (Some FIX_QuoteResponseLevel_NoAcknowledgement)
        | "AcknowledgeOnlyNegativeOrErroneousQuotes" -> (Some FIX_QuoteResponseLevel_AcknowledgeOnlyNegativeOrErroneousQuotes)
        | "AcknowledgeEachQuoteMessage" -> (Some FIX_QuoteResponseLevel_AcknowledgeEachQuoteMessage)
        | _ -> None
    )
;;

let string_to_quotestatus_opt (d)  =
    (match d with
        | "Accepted" -> (Some FIX_QuoteStatus_Accepted)
        | "CancelForSymbol" -> (Some FIX_QuoteStatus_CancelForSymbol)
        | "CanceledForSecurityType" -> (Some FIX_QuoteStatus_CanceledForSecurityType)
        | "CanceledForUnderlying" -> (Some FIX_QuoteStatus_CanceledForUnderlying)
        | "CanceledAll" -> (Some FIX_QuoteStatus_CanceledAll)
        | "Rejected" -> (Some FIX_QuoteStatus_Rejected)
        | "RemovedFromMarket" -> (Some FIX_QuoteStatus_RemovedFromMarket)
        | "Expired" -> (Some FIX_QuoteStatus_Expired)
        | "Query" -> (Some FIX_QuoteStatus_Query)
        | "QuoteNotFound" -> (Some FIX_QuoteStatus_QuoteNotFound)
        | "Pending" -> (Some FIX_QuoteStatus_Pending)
        | "Pass" -> (Some FIX_QuoteStatus_Pass)
        | "LockedMarketWarning" -> (Some FIX_QuoteStatus_LockedMarketWarning)
        | "CrossMarketWarning" -> (Some FIX_QuoteStatus_CrossMarketWarning)
        | "CanceledDueToLockMarket" -> (Some FIX_QuoteStatus_CanceledDueToLockMarket)
        | "CanceledDueToCrossMarket" -> (Some FIX_QuoteStatus_CanceledDueToCrossMarket)
        | _ -> None
    )
;;

let string_to_quotetype_opt (d)  =
    (match d with
        | "Indicative" -> (Some FIX_QuoteType_Indicative)
        | "Tradeable" -> (Some FIX_QuoteType_Tradeable)
        | "RestrictedTradeable" -> (Some FIX_QuoteType_RestrictedTradeable)
        | "Counter" -> (Some FIX_QuoteType_Counter)
        | _ -> None
    )
;;

let string_to_registrejreasoncode_opt (d)  =
    (match d with
        | "InvalidAccountType" -> (Some FIX_RegistRejReasonCode_InvalidAccountType)
        | "InvalidTaxExemptType" -> (Some FIX_RegistRejReasonCode_InvalidTaxExemptType)
        | "InvalidOwnershipType" -> (Some FIX_RegistRejReasonCode_InvalidOwnershipType)
        | "NoRegDetails" -> (Some FIX_RegistRejReasonCode_NoRegDetails)
        | "InvalidRegSeqNo" -> (Some FIX_RegistRejReasonCode_InvalidRegSeqNo)
        | "InvalidRegDetails" -> (Some FIX_RegistRejReasonCode_InvalidRegDetails)
        | "InvalidMailingDetails" -> (Some FIX_RegistRejReasonCode_InvalidMailingDetails)
        | "InvalidMailingInstructions" -> (Some FIX_RegistRejReasonCode_InvalidMailingInstructions)
        | "InvalidInvestorID" -> (Some FIX_RegistRejReasonCode_InvalidInvestorID)
        | "InvalidInvestorIDSource" -> (Some FIX_RegistRejReasonCode_InvalidInvestorIDSource)
        | "InvalidDateOfBirth" -> (Some FIX_RegistRejReasonCode_InvalidDateOfBirth)
        | "InvalidCountry" -> (Some FIX_RegistRejReasonCode_InvalidCountry)
        | "InvalidDistribInstns" -> (Some FIX_RegistRejReasonCode_InvalidDistribInstns)
        | "InvalidPercentage" -> (Some FIX_RegistRejReasonCode_InvalidPercentage)
        | "InvalidPaymentMethod" -> (Some FIX_RegistRejReasonCode_InvalidPaymentMethod)
        | "InvalidAccountName" -> (Some FIX_RegistRejReasonCode_InvalidAccountName)
        | "InvalidAgentCode" -> (Some FIX_RegistRejReasonCode_InvalidAgentCode)
        | "InvalidAccountNum" -> (Some FIX_RegistRejReasonCode_InvalidAccountNum)
        | "Other" -> (Some FIX_RegistRejReasonCode_Other)
        | _ -> None
    )
;;

let string_to_registstatus_opt (d)  =
    (match d with
        | "Accepted" -> (Some FIX_RegistStatus_Accepted)
        | "Rejected" -> (Some FIX_RegistStatus_Rejected)
        | "Held" -> (Some FIX_RegistStatus_Held)
        | "Reminder" -> (Some FIX_RegistStatus_Reminder)
        | _ -> None
    )
;;

let string_to_registtranstype_opt (d)  =
    (match d with
        | "New" -> (Some FIX_RegistTransType_New)
        | "Replace" -> (Some FIX_RegistTransType_Replace)
        | "Cancel" -> (Some FIX_RegistTransType_Cancel)
        | _ -> None
    )
;;

let string_to_reporttoexch_opt (d)  =
    (match d with
        | "ReceiverReports" -> (Some FIX_ReportToExch_ReceiverReports)
        | "SenderReports" -> (Some FIX_ReportToExch_SenderReports)
        | _ -> None
    )
;;

let string_to_resetseqnumflag_opt (d)  =
    (match d with
        | "Yes" -> (Some FIX_ResetSeqNumFlag_Yes)
        | "No" -> (Some FIX_ResetSeqNumFlag_No)
        | _ -> None
    )
;;

let string_to_responsetransporttype_opt (d)  =
    (match d with
        | "Inband" -> (Some FIX_ResponseTransportType_Inband)
        | "OutOfBand" -> (Some FIX_ResponseTransportType_OutOfBand)
        | _ -> None
    )
;;

let string_to_roundingdirection_opt (d)  =
    (match d with
        | "RoundToNearest" -> (Some FIX_RoundingDirection_RoundToNearest)
        | "RoundDown" -> (Some FIX_RoundingDirection_RoundDown)
        | "RoundUp" -> (Some FIX_RoundingDirection_RoundUp)
        | _ -> None
    )
;;

let string_to_routingtype_opt (d)  =
    (match d with
        | "TargetFirm" -> (Some FIX_RoutingType_TargetFirm)
        | "TargetList" -> (Some FIX_RoutingType_TargetList)
        | "BlockFirm" -> (Some FIX_RoutingType_BlockFirm)
        | "BlockList" -> (Some FIX_RoutingType_BlockList)
        | _ -> None
    )
;;

let string_to_scope_opt (d)  =
    (match d with
        | "LocalMarket" -> (Some FIX_Scope_LocalMarket)
        | "National" -> (Some FIX_Scope_National)
        | "Global" -> (Some FIX_Scope_Global)
        | _ -> None
    )
;;

let string_to_securityidsource_opt (d)  =
    (match d with
        | "CUSIP" -> (Some FIX_SecurityIDSource_CUSIP)
        | "SEDOL" -> (Some FIX_SecurityIDSource_SEDOL)
        | "QUIK" -> (Some FIX_SecurityIDSource_QUIK)
        | "ISINNumber" -> (Some FIX_SecurityIDSource_ISINNumber)
        | "RICCode" -> (Some FIX_SecurityIDSource_RICCode)
        | "ISOCurrencyCode" -> (Some FIX_SecurityIDSource_ISOCurrencyCode)
        | "ISOCountryCode" -> (Some FIX_SecurityIDSource_ISOCountryCode)
        | "ExchangeSymbol" -> (Some FIX_SecurityIDSource_ExchangeSymbol)
        | "ConsolidatedTapeAssociation" -> (Some FIX_SecurityIDSource_ConsolidatedTapeAssociation)
        | "BloombergSymbol" -> (Some FIX_SecurityIDSource_BloombergSymbol)
        | "Wertpapier" -> (Some FIX_SecurityIDSource_Wertpapier)
        | "Dutch" -> (Some FIX_SecurityIDSource_Dutch)
        | "Valoren" -> (Some FIX_SecurityIDSource_Valoren)
        | "Sicovam" -> (Some FIX_SecurityIDSource_Sicovam)
        | "Belgian" -> (Some FIX_SecurityIDSource_Belgian)
        | "Common" -> (Some FIX_SecurityIDSource_Common)
        | "ClearingHouse" -> (Some FIX_SecurityIDSource_ClearingHouse)
        | "ISDAFpMLSpecification" -> (Some FIX_SecurityIDSource_ISDAFpMLSpecification)
        | "OptionPriceReportingAuthority" -> (Some FIX_SecurityIDSource_OptionPriceReportingAuthority)
        | _ -> None
    )
;;

let string_to_securitylistrequesttype_opt (d)  =
    (match d with
        | "Symbol" -> (Some FIX_SecurityListRequestType_Symbol)
        | "SecurityTypeAnd" -> (Some FIX_SecurityListRequestType_SecurityTypeAnd)
        | "Product" -> (Some FIX_SecurityListRequestType_Product)
        | "TradingSessionID" -> (Some FIX_SecurityListRequestType_TradingSessionID)
        | "AllSecurities" -> (Some FIX_SecurityListRequestType_AllSecurities)
        | _ -> None
    )
;;

let string_to_securityrequestresult_opt (d)  =
    (match d with
        | "ValidRequest" -> (Some FIX_SecurityRequestResult_ValidRequest)
        | "InvalidOrUnsupportedRequest" -> (Some FIX_SecurityRequestResult_InvalidOrUnsupportedRequest)
        | "NoInstrumentsFound" -> (Some FIX_SecurityRequestResult_NoInstrumentsFound)
        | "NotAuthorizedToRetrieveInstrumentData" -> (Some FIX_SecurityRequestResult_NotAuthorizedToRetrieveInstrumentData)
        | "InstrumentDataTemporarilyUnavailable" -> (Some FIX_SecurityRequestResult_InstrumentDataTemporarilyUnavailable)
        | "RequestForInstrumentDataNotSupported" -> (Some FIX_SecurityRequestResult_RequestForInstrumentDataNotSupported)
        | _ -> None
    )
;;

let string_to_securityrequesttype_opt (d)  =
    (match d with
        | "RequestSecurityIdentityAndSpecifications" -> (Some FIX_SecurityRequestType_RequestSecurityIdentityAndSpecifications)
        | "RequestSecurityIdentityForSpecifications" -> (Some FIX_SecurityRequestType_RequestSecurityIdentityForSpecifications)
        | "RequestListSecurityTypes" -> (Some FIX_SecurityRequestType_RequestListSecurityTypes)
        | "RequestListSecurities" -> (Some FIX_SecurityRequestType_RequestListSecurities)
        | _ -> None
    )
;;

let string_to_securityresponsetype_opt (d)  =
    (match d with
        | "AcceptAsIs" -> (Some FIX_SecurityResponseType_AcceptAsIs)
        | "AcceptWithRevisions" -> (Some FIX_SecurityResponseType_AcceptWithRevisions)
        | "RejectSecurityProposal" -> (Some FIX_SecurityResponseType_RejectSecurityProposal)
        | "CannotMatchSelectionCriteria" -> (Some FIX_SecurityResponseType_CannotMatchSelectionCriteria)
        | _ -> None
    )
;;

let string_to_securitytradingstatus_opt (d)  =
    (match d with
        | "OpeningDelay" -> (Some FIX_SecurityTradingStatus_OpeningDelay)
        | "TradingHalt" -> (Some FIX_SecurityTradingStatus_TradingHalt)
        | "Resume" -> (Some FIX_SecurityTradingStatus_Resume)
        | "NoOpen" -> (Some FIX_SecurityTradingStatus_NoOpen)
        | "PriceIndication" -> (Some FIX_SecurityTradingStatus_PriceIndication)
        | "TradingRangeIndication" -> (Some FIX_SecurityTradingStatus_TradingRangeIndication)
        | "MarketImbalanceBuy" -> (Some FIX_SecurityTradingStatus_MarketImbalanceBuy)
        | "MarketImbalanceSell" -> (Some FIX_SecurityTradingStatus_MarketImbalanceSell)
        | "MarketOnCloseImbalanceBuy" -> (Some FIX_SecurityTradingStatus_MarketOnCloseImbalanceBuy)
        | "MarketOnCloseImbalanceSell" -> (Some FIX_SecurityTradingStatus_MarketOnCloseImbalanceSell)
        | "NoMarketImbalance" -> (Some FIX_SecurityTradingStatus_NoMarketImbalance)
        | "NoMarketOnCloseImbalance" -> (Some FIX_SecurityTradingStatus_NoMarketOnCloseImbalance)
        | "ITSPreOpening" -> (Some FIX_SecurityTradingStatus_ITSPreOpening)
        | "NewPriceIndication" -> (Some FIX_SecurityTradingStatus_NewPriceIndication)
        | "TradeDisseminationTime" -> (Some FIX_SecurityTradingStatus_TradeDisseminationTime)
        | "ReadyToTrade" -> (Some FIX_SecurityTradingStatus_ReadyToTrade)
        | "NotAvailableForTrading" -> (Some FIX_SecurityTradingStatus_NotAvailableForTrading)
        | "NotTradedOnThisMarket" -> (Some FIX_SecurityTradingStatus_NotTradedOnThisMarket)
        | "UnknownOrInvalid" -> (Some FIX_SecurityTradingStatus_UnknownOrInvalid)
        | "PreOpen" -> (Some FIX_SecurityTradingStatus_PreOpen)
        | "OpeningRotation" -> (Some FIX_SecurityTradingStatus_OpeningRotation)
        | "FastMarket" -> (Some FIX_SecurityTradingStatus_FastMarket)
        | _ -> None
    )
;;

let string_to_securitytype_opt (d)  =
    (match d with
        | "Future" -> (Some FIX_SecurityType_Future)
        | "Option" -> (Some FIX_SecurityType_Option)
        | "EuroSupranationalCoupons" -> (Some FIX_SecurityType_EuroSupranationalCoupons)
        | "FederalAgencyCoupon" -> (Some FIX_SecurityType_FederalAgencyCoupon)
        | "FederalAgencyDiscountNote" -> (Some FIX_SecurityType_FederalAgencyDiscountNote)
        | "PrivateExportFunding" -> (Some FIX_SecurityType_PrivateExportFunding)
        | "USDSupranationalCoupons" -> (Some FIX_SecurityType_USDSupranationalCoupons)
        | "CorporateBond" -> (Some FIX_SecurityType_CorporateBond)
        | "CorporatePrivatePlacement" -> (Some FIX_SecurityType_CorporatePrivatePlacement)
        | "ConvertibleBond" -> (Some FIX_SecurityType_ConvertibleBond)
        | "DualCurrency" -> (Some FIX_SecurityType_DualCurrency)
        | "EuroCorporateBond" -> (Some FIX_SecurityType_EuroCorporateBond)
        | "IndexedLinked" -> (Some FIX_SecurityType_IndexedLinked)
        | "StructuredNotes" -> (Some FIX_SecurityType_StructuredNotes)
        | "YankeeCorporateBond" -> (Some FIX_SecurityType_YankeeCorporateBond)
        | "ForeignExchangeContract" -> (Some FIX_SecurityType_ForeignExchangeContract)
        | "CommonStock" -> (Some FIX_SecurityType_CommonStock)
        | "PreferredStock" -> (Some FIX_SecurityType_PreferredStock)
        | "BradyBond" -> (Some FIX_SecurityType_BradyBond)
        | "EuroSovereigns" -> (Some FIX_SecurityType_EuroSovereigns)
        | "USTreasuryBond" -> (Some FIX_SecurityType_USTreasuryBond)
        | "InterestStripFromAnyBondOrNote" -> (Some FIX_SecurityType_InterestStripFromAnyBondOrNote)
        | "TreasuryInflationProtectedSecurities" -> (Some FIX_SecurityType_TreasuryInflationProtectedSecurities)
        | "PrincipalStripOfACallableBondOrNote" -> (Some FIX_SecurityType_PrincipalStripOfACallableBondOrNote)
        | "PrincipalStripFromANonCallableBondOrNote" -> (Some FIX_SecurityType_PrincipalStripFromANonCallableBondOrNote)
        | "USTreasuryNoteOld" -> (Some FIX_SecurityType_USTreasuryNoteOld)
        | "USTreasuryBillOld" -> (Some FIX_SecurityType_USTreasuryBillOld)
        | "USTreasuryNote" -> (Some FIX_SecurityType_USTreasuryNote)
        | "USTreasuryBill" -> (Some FIX_SecurityType_USTreasuryBill)
        | "Repurchase" -> (Some FIX_SecurityType_Repurchase)
        | "Forward" -> (Some FIX_SecurityType_Forward)
        | "BuySellback" -> (Some FIX_SecurityType_BuySellback)
        | "SecuritiesLoan" -> (Some FIX_SecurityType_SecuritiesLoan)
        | "SecuritiesPledge" -> (Some FIX_SecurityType_SecuritiesPledge)
        | "TermLoan" -> (Some FIX_SecurityType_TermLoan)
        | "RevolverLoan" -> (Some FIX_SecurityType_RevolverLoan)
        | "Revolver" -> (Some FIX_SecurityType_Revolver)
        | "BridgeLoan" -> (Some FIX_SecurityType_BridgeLoan)
        | "LetterOfCredit" -> (Some FIX_SecurityType_LetterOfCredit)
        | "SwingLineFacility" -> (Some FIX_SecurityType_SwingLineFacility)
        | "DebtorInPossession" -> (Some FIX_SecurityType_DebtorInPossession)
        | "Defaulted" -> (Some FIX_SecurityType_Defaulted)
        | "Withdrawn" -> (Some FIX_SecurityType_Withdrawn)
        | "Replaced" -> (Some FIX_SecurityType_Replaced)
        | "Matured" -> (Some FIX_SecurityType_Matured)
        | "Amended" -> (Some FIX_SecurityType_Amended)
        | "Retired" -> (Some FIX_SecurityType_Retired)
        | "BankersAcceptance" -> (Some FIX_SecurityType_BankersAcceptance)
        | "BankNotes" -> (Some FIX_SecurityType_BankNotes)
        | "BillOfExchanges" -> (Some FIX_SecurityType_BillOfExchanges)
        | "CertificateOfDeposit" -> (Some FIX_SecurityType_CertificateOfDeposit)
        | "CallLoans" -> (Some FIX_SecurityType_CallLoans)
        | "CommercialPaper" -> (Some FIX_SecurityType_CommercialPaper)
        | "DepositNotes" -> (Some FIX_SecurityType_DepositNotes)
        | "EuroCertificateOfDeposit" -> (Some FIX_SecurityType_EuroCertificateOfDeposit)
        | "EuroCommercialPaper" -> (Some FIX_SecurityType_EuroCommercialPaper)
        | "LiquidityNote" -> (Some FIX_SecurityType_LiquidityNote)
        | "MediumTermNotes" -> (Some FIX_SecurityType_MediumTermNotes)
        | "Overnight" -> (Some FIX_SecurityType_Overnight)
        | "PromissoryNote" -> (Some FIX_SecurityType_PromissoryNote)
        | "PlazosFijos" -> (Some FIX_SecurityType_PlazosFijos)
        | "ShortTermLoanNote" -> (Some FIX_SecurityType_ShortTermLoanNote)
        | "TimeDeposit" -> (Some FIX_SecurityType_TimeDeposit)
        | "ExtendedCommNote" -> (Some FIX_SecurityType_ExtendedCommNote)
        | "YankeeCertificateOfDeposit" -> (Some FIX_SecurityType_YankeeCertificateOfDeposit)
        | "AssetBackedSecurities" -> (Some FIX_SecurityType_AssetBackedSecurities)
        | "Corp" -> (Some FIX_SecurityType_Corp)
        | "CollateralizedMortgageObligation" -> (Some FIX_SecurityType_CollateralizedMortgageObligation)
        | "IOETTEMortgage" -> (Some FIX_SecurityType_IOETTEMortgage)
        | "MortgageBackedSecurities" -> (Some FIX_SecurityType_MortgageBackedSecurities)
        | "MortgageInterestOnly" -> (Some FIX_SecurityType_MortgageInterestOnly)
        | "MortgagePrincipalOnly" -> (Some FIX_SecurityType_MortgagePrincipalOnly)
        | "MortgagePrivatePlacement" -> (Some FIX_SecurityType_MortgagePrivatePlacement)
        | "MiscellaneousPassThrough" -> (Some FIX_SecurityType_MiscellaneousPassThrough)
        | "Pfandbriefe" -> (Some FIX_SecurityType_Pfandbriefe)
        | "ToBeAnnounced" -> (Some FIX_SecurityType_ToBeAnnounced)
        | "OtherAnticipationNotes" -> (Some FIX_SecurityType_OtherAnticipationNotes)
        | "CertificateOfObligation" -> (Some FIX_SecurityType_CertificateOfObligation)
        | "CertificateOfParticipation" -> (Some FIX_SecurityType_CertificateOfParticipation)
        | "GeneralObligationBonds" -> (Some FIX_SecurityType_GeneralObligationBonds)
        | "MandatoryTender" -> (Some FIX_SecurityType_MandatoryTender)
        | "RevenueAnticipationNote" -> (Some FIX_SecurityType_RevenueAnticipationNote)
        | "RevenueBonds" -> (Some FIX_SecurityType_RevenueBonds)
        | "SpecialAssessment" -> (Some FIX_SecurityType_SpecialAssessment)
        | "SpecialObligation" -> (Some FIX_SecurityType_SpecialObligation)
        | "SpecialTax" -> (Some FIX_SecurityType_SpecialTax)
        | "TaxAnticipationNote" -> (Some FIX_SecurityType_TaxAnticipationNote)
        | "TaxAllocation" -> (Some FIX_SecurityType_TaxAllocation)
        | "TaxExemptCommercialPaper" -> (Some FIX_SecurityType_TaxExemptCommercialPaper)
        | "TaxRevenueAnticipationNote" -> (Some FIX_SecurityType_TaxRevenueAnticipationNote)
        | "VariableRateDemandNote" -> (Some FIX_SecurityType_VariableRateDemandNote)
        | "Warrant" -> (Some FIX_SecurityType_Warrant)
        | "MutualFund" -> (Some FIX_SecurityType_MutualFund)
        | "MultilegInstrument" -> (Some FIX_SecurityType_MultilegInstrument)
        | "NoSecurityType" -> (Some FIX_SecurityType_NoSecurityType)
        | _ -> None
    )
;;

let string_to_settlcurrfxratecalc_opt (d)  =
    (match d with
        | "Multiply" -> (Some FIX_SettlCurrFxRateCalc_Multiply)
        | "Divide" -> (Some FIX_SettlCurrFxRateCalc_Divide)
        | _ -> None
    )
;;

let string_to_settldeliverytype_opt (d)  =
    (match d with
        | "Versus" -> (Some FIX_SettlDeliveryType_Versus)
        | "Free" -> (Some FIX_SettlDeliveryType_Free)
        | "TriParty" -> (Some FIX_SettlDeliveryType_TriParty)
        | "HoldInCustody" -> (Some FIX_SettlDeliveryType_HoldInCustody)
        | _ -> None
    )
;;

let string_to_settlinstmode_opt (d)  =
    (match d with
        | "StandingInstructionsProvided" -> (Some FIX_SettlInstMode_StandingInstructionsProvided)
        | "SpecificOrderForASingleAccount" -> (Some FIX_SettlInstMode_SpecificOrderForASingleAccount)
        | "RequestReject" -> (Some FIX_SettlInstMode_RequestReject)
        | _ -> None
    )
;;

let string_to_settlinstreqrejcode_opt (d)  =
    (match d with
        | "UnableToProcessRequest" -> (Some FIX_SettlInstReqRejCode_UnableToProcessRequest)
        | "UnknownAccount" -> (Some FIX_SettlInstReqRejCode_UnknownAccount)
        | "NoMatchingSettlementInstructionsFound" -> (Some FIX_SettlInstReqRejCode_NoMatchingSettlementInstructionsFound)
        | "Other" -> (Some FIX_SettlInstReqRejCode_Other)
        | _ -> None
    )
;;

let string_to_settlinstsource_opt (d)  =
    (match d with
        | "BrokerCredit" -> (Some FIX_SettlInstSource_BrokerCredit)
        | "Institution" -> (Some FIX_SettlInstSource_Institution)
        | "Investor" -> (Some FIX_SettlInstSource_Investor)
        | _ -> None
    )
;;

let string_to_settlinsttranstype_opt (d)  =
    (match d with
        | "New" -> (Some FIX_SettlInstTransType_New)
        | "Cancel" -> (Some FIX_SettlInstTransType_Cancel)
        | "Replace" -> (Some FIX_SettlInstTransType_Replace)
        | "Restate" -> (Some FIX_SettlInstTransType_Restate)
        | _ -> None
    )
;;

let string_to_settlpricetype_opt (d)  =
    (match d with
        | "Final" -> (Some FIX_SettlPriceType_Final)
        | "Theoretical" -> (Some FIX_SettlPriceType_Theoretical)
        | _ -> None
    )
;;

let string_to_settlsessid_opt (d)  =
    (match d with
        | "Intraday" -> (Some FIX_SettlSessID_Intraday)
        | "RegularTradingHours" -> (Some FIX_SettlSessID_RegularTradingHours)
        | "ElectronicTradingHours" -> (Some FIX_SettlSessID_ElectronicTradingHours)
        | _ -> None
    )
;;

let string_to_settltype_opt (d)  =
    (match d with
        | "Regular" -> (Some FIX_SettlType_Regular)
        | "Cash" -> (Some FIX_SettlType_Cash)
        | "NextDay" -> (Some FIX_SettlType_NextDay)
        | "TPlus2" -> (Some FIX_SettlType_TPlus2)
        | "TPlus3" -> (Some FIX_SettlType_TPlus3)
        | "TPlus4" -> (Some FIX_SettlType_TPlus4)
        | "Future" -> (Some FIX_SettlType_Future)
        | "WhenAndIfIssued" -> (Some FIX_SettlType_WhenAndIfIssued)
        | "SellersOption" -> (Some FIX_SettlType_SellersOption)
        | "TPlus5" -> (Some FIX_SettlType_TPlus5)
        | _ -> None
    )
;;

let string_to_shortsalereason_opt (d)  =
    (match d with
        | "DealerSoldShort" -> (Some FIX_ShortSaleReason_DealerSoldShort)
        | "DealerSoldShortExempt" -> (Some FIX_ShortSaleReason_DealerSoldShortExempt)
        | "SellingCustomerSoldShort" -> (Some FIX_ShortSaleReason_SellingCustomerSoldShort)
        | "SellingCustomerSoldShortExempt" -> (Some FIX_ShortSaleReason_SellingCustomerSoldShortExempt)
        | "QualifiedServiceRepresentative" -> (Some FIX_ShortSaleReason_QualifiedServiceRepresentative)
        | "QSROrAGUContraSideSoldShortExempt" -> (Some FIX_ShortSaleReason_QSROrAGUContraSideSoldShortExempt)
        | _ -> None
    )
;;

let string_to_side_opt (d)  =
    (match d with
        | "Buy" -> (Some FIX_Side_Buy)
        | "Sell" -> (Some FIX_Side_Sell)
        | "BuyMinus" -> (Some FIX_Side_BuyMinus)
        | "SellPlus" -> (Some FIX_Side_SellPlus)
        | "SellShort" -> (Some FIX_Side_SellShort)
        | "SellShortExempt" -> (Some FIX_Side_SellShortExempt)
        | "Undisclosed" -> (Some FIX_Side_Undisclosed)
        | "Cross" -> (Some FIX_Side_Cross)
        | "CrossShort" -> (Some FIX_Side_CrossShort)
        | "CrossShortExempt" -> (Some FIX_Side_CrossShortExempt)
        | "AsDefined" -> (Some FIX_Side_AsDefined)
        | "Opposite" -> (Some FIX_Side_Opposite)
        | "Subscribe" -> (Some FIX_Side_Subscribe)
        | "Redeem" -> (Some FIX_Side_Redeem)
        | "Lend" -> (Some FIX_Side_Lend)
        | "Borrow" -> (Some FIX_Side_Borrow)
        | _ -> None
    )
;;

let string_to_sidemultilegreportingtype_opt (d)  =
    (match d with
        | "SingleSecurity" -> (Some FIX_SideMultiLegReportingType_SingleSecurity)
        | "IndividualLegOfAMultilegSecurity" -> (Some FIX_SideMultiLegReportingType_IndividualLegOfAMultilegSecurity)
        | "MultilegSecurity" -> (Some FIX_SideMultiLegReportingType_MultilegSecurity)
        | _ -> None
    )
;;

let string_to_sidevalueind_opt (d)  =
    (match d with
        | "SideValue1" -> (Some FIX_SideValueInd_SideValue1)
        | "SideValue2" -> (Some FIX_SideValueInd_SideValue2)
        | _ -> None
    )
;;

let string_to_solicitedflag_opt (d)  =
    (match d with
        | "WasSolicited" -> (Some FIX_SolicitedFlag_WasSolicited)
        | "WasNotSolicited" -> (Some FIX_SolicitedFlag_WasNotSolicited)
        | _ -> None
    )
;;

let string_to_standinstdbtype_opt (d)  =
    (match d with
        | "Other" -> (Some FIX_StandInstDbType_Other)
        | "DTCSID" -> (Some FIX_StandInstDbType_DTCSID)
        | "ThomsonALERT" -> (Some FIX_StandInstDbType_ThomsonALERT)
        | "AGlobalCustodian" -> (Some FIX_StandInstDbType_AGlobalCustodian)
        | "AccountNet" -> (Some FIX_StandInstDbType_AccountNet)
        | _ -> None
    )
;;

let string_to_statusvalue_opt (d)  =
    (match d with
        | "Connected" -> (Some FIX_StatusValue_Connected)
        | "NotConnectedUnexpected" -> (Some FIX_StatusValue_NotConnectedUnexpected)
        | "NotConnectedExpected" -> (Some FIX_StatusValue_NotConnectedExpected)
        | "InProcess" -> (Some FIX_StatusValue_InProcess)
        | _ -> None
    )
;;

let string_to_stipulationtype_opt (d)  =
    (match d with
        | "AlternativeMinimumTax" -> (Some FIX_StipulationType_AlternativeMinimumTax)
        | "AutoReinvestment" -> (Some FIX_StipulationType_AutoReinvestment)
        | "BankQualified" -> (Some FIX_StipulationType_BankQualified)
        | "BargainConditions" -> (Some FIX_StipulationType_BargainConditions)
        | "CouponRange" -> (Some FIX_StipulationType_CouponRange)
        | "ISOCurrencyCode" -> (Some FIX_StipulationType_ISOCurrencyCode)
        | "CustomStart" -> (Some FIX_StipulationType_CustomStart)
        | "Geographics" -> (Some FIX_StipulationType_Geographics)
        | "ValuationDiscount" -> (Some FIX_StipulationType_ValuationDiscount)
        | "Insured" -> (Some FIX_StipulationType_Insured)
        | "IssueDate" -> (Some FIX_StipulationType_IssueDate)
        | "Issuer" -> (Some FIX_StipulationType_Issuer)
        | "IssueSizeRange" -> (Some FIX_StipulationType_IssueSizeRange)
        | "LookbackDays" -> (Some FIX_StipulationType_LookbackDays)
        | "ExplicitLotIdentifier" -> (Some FIX_StipulationType_ExplicitLotIdentifier)
        | "LotVariance" -> (Some FIX_StipulationType_LotVariance)
        | "MaturityYearAndMonth" -> (Some FIX_StipulationType_MaturityYearAndMonth)
        | "MaturityRange" -> (Some FIX_StipulationType_MaturityRange)
        | "MaximumSubstitutions" -> (Some FIX_StipulationType_MaximumSubstitutions)
        | "MinimumQuantity" -> (Some FIX_StipulationType_MinimumQuantity)
        | "MinimumIncrement" -> (Some FIX_StipulationType_MinimumIncrement)
        | "MinimumDenomination" -> (Some FIX_StipulationType_MinimumDenomination)
        | "PaymentFrequency" -> (Some FIX_StipulationType_PaymentFrequency)
        | "NumberOfPieces" -> (Some FIX_StipulationType_NumberOfPieces)
        | "PoolsMaximum" -> (Some FIX_StipulationType_PoolsMaximum)
        | "PoolsPerMillion" -> (Some FIX_StipulationType_PoolsPerMillion)
        | "PoolsPerLot" -> (Some FIX_StipulationType_PoolsPerLot)
        | "PoolsPerTrade" -> (Some FIX_StipulationType_PoolsPerTrade)
        | "PriceRange" -> (Some FIX_StipulationType_PriceRange)
        | "PricingFrequency" -> (Some FIX_StipulationType_PricingFrequency)
        | "ProductionYear" -> (Some FIX_StipulationType_ProductionYear)
        | "CallProtection" -> (Some FIX_StipulationType_CallProtection)
        | "Purpose" -> (Some FIX_StipulationType_Purpose)
        | "BenchmarkPriceSource" -> (Some FIX_StipulationType_BenchmarkPriceSource)
        | "RatingSourceAndRange" -> (Some FIX_StipulationType_RatingSourceAndRange)
        | "TypeOfRedemption" -> (Some FIX_StipulationType_TypeOfRedemption)
        | "Restricted" -> (Some FIX_StipulationType_Restricted)
        | "MarketSector" -> (Some FIX_StipulationType_MarketSector)
        | "SecurityTypeIncludedOrExcluded" -> (Some FIX_StipulationType_SecurityTypeIncludedOrExcluded)
        | "Structure" -> (Some FIX_StipulationType_Structure)
        | "SubstitutionsFrequency" -> (Some FIX_StipulationType_SubstitutionsFrequency)
        | "SubstitutionsLeft" -> (Some FIX_StipulationType_SubstitutionsLeft)
        | "FreeformText" -> (Some FIX_StipulationType_FreeformText)
        | "TradeVariance" -> (Some FIX_StipulationType_TradeVariance)
        | "WeightedAverageCoupon" -> (Some FIX_StipulationType_WeightedAverageCoupon)
        | "WeightedAverageLifeCoupon" -> (Some FIX_StipulationType_WeightedAverageLifeCoupon)
        | "WeightedAverageLoanAge" -> (Some FIX_StipulationType_WeightedAverageLoanAge)
        | "WeightedAverageMaturity" -> (Some FIX_StipulationType_WeightedAverageMaturity)
        | "WholePool" -> (Some FIX_StipulationType_WholePool)
        | "YieldRange" -> (Some FIX_StipulationType_YieldRange)
        | _ -> None
    )
;;

let string_to_subscriptionrequesttype_opt (d)  =
    (match d with
        | "Snapshot" -> (Some FIX_SubscriptionRequestType_Snapshot)
        | "SnapshotAndUpdates" -> (Some FIX_SubscriptionRequestType_SnapshotAndUpdates)
        | "DisablePreviousSnapshot" -> (Some FIX_SubscriptionRequestType_DisablePreviousSnapshot)
        | _ -> None
    )
;;

let string_to_targetstrategy_opt (d)  =
    (match d with
        | "VWAP" -> (Some FIX_TargetStrategy_VWAP)
        | "Participate" -> (Some FIX_TargetStrategy_Participate)
        | "MininizeMarketImpact" -> (Some FIX_TargetStrategy_MininizeMarketImpact)
        | _ -> None
    )
;;

let string_to_taxadvantagetype_opt (d)  =
    (match d with
        | "FIXNone" -> (Some FIX_TaxAdvantageType_FIXNone)
        | "MaxiISA" -> (Some FIX_TaxAdvantageType_MaxiISA)
        | "TESSA" -> (Some FIX_TaxAdvantageType_TESSA)
        | "MiniCashISA" -> (Some FIX_TaxAdvantageType_MiniCashISA)
        | "MiniStocksAndSharesISA" -> (Some FIX_TaxAdvantageType_MiniStocksAndSharesISA)
        | "MiniInsuranceISA" -> (Some FIX_TaxAdvantageType_MiniInsuranceISA)
        | "CurrentYearPayment" -> (Some FIX_TaxAdvantageType_CurrentYearPayment)
        | "PriorYearPayment" -> (Some FIX_TaxAdvantageType_PriorYearPayment)
        | "AssetTransfer" -> (Some FIX_TaxAdvantageType_AssetTransfer)
        | "EmployeePriorYear" -> (Some FIX_TaxAdvantageType_EmployeePriorYear)
        | "EmployeeCurrentYear" -> (Some FIX_TaxAdvantageType_EmployeeCurrentYear)
        | "EmployerPriorYear" -> (Some FIX_TaxAdvantageType_EmployerPriorYear)
        | "EmployerCurrentYear" -> (Some FIX_TaxAdvantageType_EmployerCurrentYear)
        | "NonFundPrototypeIRA" -> (Some FIX_TaxAdvantageType_NonFundPrototypeIRA)
        | "NonFundQualifiedPlan" -> (Some FIX_TaxAdvantageType_NonFundQualifiedPlan)
        | "DefinedContributionPlan" -> (Some FIX_TaxAdvantageType_DefinedContributionPlan)
        | "IRA" -> (Some FIX_TaxAdvantageType_IRA)
        | "IRARollover" -> (Some FIX_TaxAdvantageType_IRARollover)
        | "KEOGH" -> (Some FIX_TaxAdvantageType_KEOGH)
        | "ProfitSharingPlan" -> (Some FIX_TaxAdvantageType_ProfitSharingPlan)
        | "US401K" -> (Some FIX_TaxAdvantageType_US401K)
        | "SelfDirectedIRA" -> (Some FIX_TaxAdvantageType_SelfDirectedIRA)
        | "US403b" -> (Some FIX_TaxAdvantageType_US403b)
        | "US457" -> (Some FIX_TaxAdvantageType_US457)
        | "RothIRAPrototype" -> (Some FIX_TaxAdvantageType_RothIRAPrototype)
        | "RothIRANonPrototype" -> (Some FIX_TaxAdvantageType_RothIRANonPrototype)
        | "RothConversionIRAPrototype" -> (Some FIX_TaxAdvantageType_RothConversionIRAPrototype)
        | "RothConversionIRANonPrototype" -> (Some FIX_TaxAdvantageType_RothConversionIRANonPrototype)
        | "EducationIRAPrototype" -> (Some FIX_TaxAdvantageType_EducationIRAPrototype)
        | "EducationIRANonPrototype" -> (Some FIX_TaxAdvantageType_EducationIRANonPrototype)
        | _ -> None
    )
;;

let string_to_terminationtype_opt (d)  =
    (match d with
        | "Overnight" -> (Some FIX_TerminationType_Overnight)
        | "Term" -> (Some FIX_TerminationType_Term)
        | "Flexible" -> (Some FIX_TerminationType_Flexible)
        | "Open" -> (Some FIX_TerminationType_Open)
        | _ -> None
    )
;;

let string_to_testmessageindicator_opt (d)  =
    (match d with
        | "True" -> (Some FIX_TestMessageIndicator_True)
        | "Fales" -> (Some FIX_TestMessageIndicator_Fales)
        | _ -> None
    )
;;

let string_to_tickdirection_opt (d)  =
    (match d with
        | "PlusTick" -> (Some FIX_TickDirection_PlusTick)
        | "ZeroPlusTick" -> (Some FIX_TickDirection_ZeroPlusTick)
        | "MinusTick" -> (Some FIX_TickDirection_MinusTick)
        | "ZeroMinusTick" -> (Some FIX_TickDirection_ZeroMinusTick)
        | _ -> None
    )
;;

let string_to_timeinforce_opt (d)  =
    (match d with
        | "Day" -> (Some FIX_TimeInForce_Day)
        | "GoodTillCancel" -> (Some FIX_TimeInForce_GoodTillCancel)
        | "AtTheOpening" -> (Some FIX_TimeInForce_AtTheOpening)
        | "ImmediateOrCancel" -> (Some FIX_TimeInForce_ImmediateOrCancel)
        | "FillOrKill" -> (Some FIX_TimeInForce_FillOrKill)
        | "GoodTillCrossing" -> (Some FIX_TimeInForce_GoodTillCrossing)
        | "GoodTillDate" -> (Some FIX_TimeInForce_GoodTillDate)
        | "AtTheClose" -> (Some FIX_TimeInForce_AtTheClose)
        | _ -> None
    )
;;

let string_to_tradsesmethod_opt (d)  =
    (match d with
        | "Electronic" -> (Some FIX_TradSesMethod_Electronic)
        | "OpenOutcry" -> (Some FIX_TradSesMethod_OpenOutcry)
        | "TwoParty" -> (Some FIX_TradSesMethod_TwoParty)
        | _ -> None
    )
;;

let string_to_tradsesmode_opt (d)  =
    (match d with
        | "Testing" -> (Some FIX_TradSesMode_Testing)
        | "Simulated" -> (Some FIX_TradSesMode_Simulated)
        | "Production" -> (Some FIX_TradSesMode_Production)
        | _ -> None
    )
;;

let string_to_tradsesstatus_opt (d)  =
    (match d with
        | "Unknown" -> (Some FIX_TradSesStatus_Unknown)
        | "Halted" -> (Some FIX_TradSesStatus_Halted)
        | "Open" -> (Some FIX_TradSesStatus_Open)
        | "Closed" -> (Some FIX_TradSesStatus_Closed)
        | "PreOpen" -> (Some FIX_TradSesStatus_PreOpen)
        | "PreClose" -> (Some FIX_TradSesStatus_PreClose)
        | "RequestRejected" -> (Some FIX_TradSesStatus_RequestRejected)
        | _ -> None
    )
;;

let string_to_tradsesstatusrejreason_opt (d)  =
    (match d with
        | "UnknownOrInvalidTradingSessionID" -> (Some FIX_TradSesStatusRejReason_UnknownOrInvalidTradingSessionID)
        | "Other" -> (Some FIX_TradSesStatusRejReason_Other)
        | _ -> None
    )
;;

let string_to_tradeallocindicator_opt (d)  =
    (match d with
        | "AllocationNotRequired" -> (Some FIX_TradeAllocIndicator_AllocationNotRequired)
        | "AllocationRequired" -> (Some FIX_TradeAllocIndicator_AllocationRequired)
        | "UseAllocationProvidedWithTheTrade" -> (Some FIX_TradeAllocIndicator_UseAllocationProvidedWithTheTrade)
        | _ -> None
    )
;;

let string_to_tradecondition_opt (d)  =
    (match d with
        | "Cash" -> (Some FIX_TradeCondition_Cash)
        | "AveragePriceTrade" -> (Some FIX_TradeCondition_AveragePriceTrade)
        | "CashTrade" -> (Some FIX_TradeCondition_CashTrade)
        | "NextDay" -> (Some FIX_TradeCondition_NextDay)
        | "Opening" -> (Some FIX_TradeCondition_Opening)
        | "IntradayTradeDetail" -> (Some FIX_TradeCondition_IntradayTradeDetail)
        | "Rule127Trade" -> (Some FIX_TradeCondition_Rule127Trade)
        | "Rule155Trade" -> (Some FIX_TradeCondition_Rule155Trade)
        | "SoldLast" -> (Some FIX_TradeCondition_SoldLast)
        | "NextDayTrade" -> (Some FIX_TradeCondition_NextDayTrade)
        | "Opened" -> (Some FIX_TradeCondition_Opened)
        | "Seller" -> (Some FIX_TradeCondition_Seller)
        | "Sold" -> (Some FIX_TradeCondition_Sold)
        | "StoppedStock" -> (Some FIX_TradeCondition_StoppedStock)
        | "ImbalanceMoreBuyers" -> (Some FIX_TradeCondition_ImbalanceMoreBuyers)
        | "ImbalanceMoreSellers" -> (Some FIX_TradeCondition_ImbalanceMoreSellers)
        | "OpeningPrice" -> (Some FIX_TradeCondition_OpeningPrice)
        | _ -> None
    )
;;

let string_to_tradereportrejectreason_opt (d)  =
    (match d with
        | "Successful" -> (Some FIX_TradeReportRejectReason_Successful)
        | "InvalidPartyOnformation" -> (Some FIX_TradeReportRejectReason_InvalidPartyOnformation)
        | "UnknownInstrument" -> (Some FIX_TradeReportRejectReason_UnknownInstrument)
        | "UnauthorizedToReportTrades" -> (Some FIX_TradeReportRejectReason_UnauthorizedToReportTrades)
        | "InvalidTradeType" -> (Some FIX_TradeReportRejectReason_InvalidTradeType)
        | "Other" -> (Some FIX_TradeReportRejectReason_Other)
        | _ -> None
    )
;;

let string_to_tradereporttype_opt (d)  =
    (match d with
        | "Submit" -> (Some FIX_TradeReportType_Submit)
        | "Alleged" -> (Some FIX_TradeReportType_Alleged)
        | "Accept" -> (Some FIX_TradeReportType_Accept)
        | "Decline" -> (Some FIX_TradeReportType_Decline)
        | "Addendum" -> (Some FIX_TradeReportType_Addendum)
        | "No" -> (Some FIX_TradeReportType_No)
        | "TradeReportCancel" -> (Some FIX_TradeReportType_TradeReportCancel)
        | "LockedIn" -> (Some FIX_TradeReportType_LockedIn)
        | _ -> None
    )
;;

let string_to_traderequestresult_opt (d)  =
    (match d with
        | "Successful" -> (Some FIX_TradeRequestResult_Successful)
        | "InvalidOrUnknownInstrument" -> (Some FIX_TradeRequestResult_InvalidOrUnknownInstrument)
        | "InvalidTypeOfTradeRequested" -> (Some FIX_TradeRequestResult_InvalidTypeOfTradeRequested)
        | "InvalidParties" -> (Some FIX_TradeRequestResult_InvalidParties)
        | "InvalidTransportTypeRequested" -> (Some FIX_TradeRequestResult_InvalidTransportTypeRequested)
        | "InvalidDestinationRequested" -> (Some FIX_TradeRequestResult_InvalidDestinationRequested)
        | "TradeRequestTypeNotSupported" -> (Some FIX_TradeRequestResult_TradeRequestTypeNotSupported)
        | "NotAuthorized" -> (Some FIX_TradeRequestResult_NotAuthorized)
        | "Other" -> (Some FIX_TradeRequestResult_Other)
        | _ -> None
    )
;;

let string_to_traderequeststatus_opt (d)  =
    (match d with
        | "Accepted" -> (Some FIX_TradeRequestStatus_Accepted)
        | "Completed" -> (Some FIX_TradeRequestStatus_Completed)
        | "Rejected" -> (Some FIX_TradeRequestStatus_Rejected)
        | _ -> None
    )
;;

let string_to_traderequesttype_opt (d)  =
    (match d with
        | "AllTrades" -> (Some FIX_TradeRequestType_AllTrades)
        | "MatchedTradesMatchingCriteria" -> (Some FIX_TradeRequestType_MatchedTradesMatchingCriteria)
        | "UnmatchedTradesThatMatchCriteria" -> (Some FIX_TradeRequestType_UnmatchedTradesThatMatchCriteria)
        | "UnreportedTradesThatMatchCriteria" -> (Some FIX_TradeRequestType_UnreportedTradesThatMatchCriteria)
        | "AdvisoriesThatMatchCriteria" -> (Some FIX_TradeRequestType_AdvisoriesThatMatchCriteria)
        | _ -> None
    )
;;

let string_to_tradedflatswitch_opt (d)  =
    (match d with
        | "TradedFlat" -> (Some FIX_TradedFlatSwitch_TradedFlat)
        | "NotTradedFlat" -> (Some FIX_TradedFlatSwitch_NotTradedFlat)
        | _ -> None
    )
;;

let string_to_trdregtimestamptype_opt (d)  =
    (match d with
        | "ExecutionTime" -> (Some FIX_TrdRegTimestampType_ExecutionTime)
        | "TimeIn" -> (Some FIX_TrdRegTimestampType_TimeIn)
        | "TimeOut" -> (Some FIX_TrdRegTimestampType_TimeOut)
        | "BrokerReceipt" -> (Some FIX_TrdRegTimestampType_BrokerReceipt)
        | "BrokerExecution" -> (Some FIX_TrdRegTimestampType_BrokerExecution)
        | _ -> None
    )
;;

let string_to_trdrptstatus_opt (d)  =
    (match d with
        | "Accepted" -> (Some FIX_TrdRptStatus_Accepted)
        | "Rejected" -> (Some FIX_TrdRptStatus_Rejected)
        | _ -> None
    )
;;

let string_to_trdtype_opt (d)  =
    (match d with
        | "RegularTrade" -> (Some FIX_TrdType_RegularTrade)
        | "BlockTrade" -> (Some FIX_TrdType_BlockTrade)
        | "EFP" -> (Some FIX_TrdType_EFP)
        | "Transfer" -> (Some FIX_TrdType_Transfer)
        | "LateTrade" -> (Some FIX_TrdType_LateTrade)
        | "TTrade" -> (Some FIX_TrdType_TTrade)
        | "WeightedAveragePriceTrade" -> (Some FIX_TrdType_WeightedAveragePriceTrade)
        | "BunchedTrade" -> (Some FIX_TrdType_BunchedTrade)
        | "LateBunchedTrade" -> (Some FIX_TrdType_LateBunchedTrade)
        | "PriorReferencePriceTrade" -> (Some FIX_TrdType_PriorReferencePriceTrade)
        | "AfterHoursTrade" -> (Some FIX_TrdType_AfterHoursTrade)
        | _ -> None
    )
;;

let string_to_unsolicitedindicator_opt (d)  =
    (match d with
        | "MessageIsBeingSentUnsolicited" -> (Some FIX_UnsolicitedIndicator_MessageIsBeingSentUnsolicited)
        | "MessageIsBeingSentAsAResultOfAPriorRequest" -> (Some FIX_UnsolicitedIndicator_MessageIsBeingSentAsAResultOfAPriorRequest)
        | _ -> None
    )
;;

let string_to_urgency_opt (d)  =
    (match d with
        | "Normal" -> (Some FIX_Urgency_Normal)
        | "Flash" -> (Some FIX_Urgency_Flash)
        | "Background" -> (Some FIX_Urgency_Background)
        | _ -> None
    )
;;

let string_to_userrequesttype_opt (d)  =
    (match d with
        | "LogOnUser" -> (Some FIX_UserRequestType_LogOnUser)
        | "LogOffUser" -> (Some FIX_UserRequestType_LogOffUser)
        | "ChangePasswordForUser" -> (Some FIX_UserRequestType_ChangePasswordForUser)
        | "RequestIndividualUserStatus" -> (Some FIX_UserRequestType_RequestIndividualUserStatus)
        | _ -> None
    )
;;

let string_to_userstatus_opt (d)  =
    (match d with
        | "LoggedIn" -> (Some FIX_UserStatus_LoggedIn)
        | "NotLoggedIn" -> (Some FIX_UserStatus_NotLoggedIn)
        | "UserNotRecognised" -> (Some FIX_UserStatus_UserNotRecognised)
        | "PasswordIncorrect" -> (Some FIX_UserStatus_PasswordIncorrect)
        | "PasswordChanged" -> (Some FIX_UserStatus_PasswordChanged)
        | "Other" -> (Some FIX_UserStatus_Other)
        | _ -> None
    )
;;

let string_to_workingindicator_opt (d)  =
    (match d with
        | "Working" -> (Some FIX_WorkingIndicator_Working)
        | "NotWorking" -> (Some FIX_WorkingIndicator_NotWorking)
        | _ -> None
    )
;;

let string_to_yieldtype_opt (d)  =
    (match d with
        | "AfterTaxYield" -> (Some FIX_YieldType_AfterTaxYield)
        | "AnnualYield" -> (Some FIX_YieldType_AnnualYield)
        | "YieldAtIssue" -> (Some FIX_YieldType_YieldAtIssue)
        | "YieldToAverageMaturity" -> (Some FIX_YieldType_YieldToAverageMaturity)
        | "BookYield" -> (Some FIX_YieldType_BookYield)
        | "YieldToNextCall" -> (Some FIX_YieldType_YieldToNextCall)
        | "YieldChangeSinceClose" -> (Some FIX_YieldType_YieldChangeSinceClose)
        | "ClosingYield" -> (Some FIX_YieldType_ClosingYield)
        | "CompoundYield" -> (Some FIX_YieldType_CompoundYield)
        | "CurrentYield" -> (Some FIX_YieldType_CurrentYield)
        | "TrueGrossYield" -> (Some FIX_YieldType_TrueGrossYield)
        | "GvntEquivalentYield" -> (Some FIX_YieldType_GvntEquivalentYield)
        | "YieldWithInflationAssumption" -> (Some FIX_YieldType_YieldWithInflationAssumption)
        | "InverseFloaterBondYield" -> (Some FIX_YieldType_InverseFloaterBondYield)
        | "MostRecentClosingYield" -> (Some FIX_YieldType_MostRecentClosingYield)
        | "ClosingYieldMostRecentMonth" -> (Some FIX_YieldType_ClosingYieldMostRecentMonth)
        | "ClosingYieldMostRecentQuarter" -> (Some FIX_YieldType_ClosingYieldMostRecentQuarter)
        | "ClosingYieldMostRecentYear" -> (Some FIX_YieldType_ClosingYieldMostRecentYear)
        | "YieldToLongestAverageLife" -> (Some FIX_YieldType_YieldToLongestAverageLife)
        | "MarkToMarketYield" -> (Some FIX_YieldType_MarkToMarketYield)
        | "YieldToMaturity" -> (Some FIX_YieldType_YieldToMaturity)
        | "YieldToNextRefund" -> (Some FIX_YieldType_YieldToNextRefund)
        | "OpenAverageYield" -> (Some FIX_YieldType_OpenAverageYield)
        | "YieldToNextPut" -> (Some FIX_YieldType_YieldToNextPut)
        | "PreviousCloseYield" -> (Some FIX_YieldType_PreviousCloseYield)
        | "ProceedsYield" -> (Some FIX_YieldType_ProceedsYield)
        | "SemiAnnualYield" -> (Some FIX_YieldType_SemiAnnualYield)
        | "YieldToShortestAverageLife" -> (Some FIX_YieldType_YieldToShortestAverageLife)
        | "SimpleYield" -> (Some FIX_YieldType_SimpleYield)
        | "TaxEquivalentYield" -> (Some FIX_YieldType_TaxEquivalentYield)
        | "YieldToTenderDate" -> (Some FIX_YieldType_YieldToTenderDate)
        | "TrueYield" -> (Some FIX_YieldType_TrueYield)
        | "YieldValueOf132" -> (Some FIX_YieldType_YieldValueOf132)
        | "YieldToWorst" -> (Some FIX_YieldType_YieldToWorst)
        | _ -> None
    )
;;

let string_to_currency_opt (d)  =
    (match d with
        | "EUR" -> (Some FIX_Currency_EUR)
        | "GBP" -> (Some FIX_Currency_GBP)
        | "USD" -> (Some FIX_Currency_USD)
        | "CHF" -> (Some FIX_Currency_CHF)
        | _ -> None
    )
;;

let string_to_country_opt (d)  =
    (match d with
        | "DE" -> (Some FIX_Country_DE)
        | "GB" -> (Some FIX_Country_GB)
        | "US" -> (Some FIX_Country_US)
        | _ -> None
    )
;;

let string_to_exchange_opt (d)  =
    (match d with
        | "XLON" -> (Some FIX_Exchange_XLON)
        | "XNYS" -> (Some FIX_Exchange_XNYS)
        | "XNAS" -> (Some FIX_Exchange_XNAS)
        | "XJAS" -> (Some FIX_Exchange_XJAS)
        | "XSHG" -> (Some FIX_Exchange_XSHG)
        | "SHSC" -> (Some FIX_Exchange_SHSC)
        | _ -> None
    )
;;

let full_enum_week_decoder  : fix_week decoder =
    string >>= (fun x -> (match string_to_week_opt x with
        | None -> (fail "Unknown enum (week) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_nosides_decoder  : fix_nosides decoder =
    string >>= (fun x -> (match string_to_nosides_opt x with
        | None -> (fail "Unknown enum (NoSides) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_accounttype_decoder  : fix_accounttype decoder =
    string >>= (fun x -> (match string_to_accounttype_opt x with
        | None -> (fail "Unknown enum (AccountType) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_acctidsource_decoder  : fix_acctidsource decoder =
    string >>= (fun x -> (match string_to_acctidsource_opt x with
        | None -> (fail "Unknown enum (AcctIDSource) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_adjustment_decoder  : fix_adjustment decoder =
    string >>= (fun x -> (match string_to_adjustment_opt x with
        | None -> (fail "Unknown enum (Adjustment) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_adjustmenttype_decoder  : fix_adjustmenttype decoder =
    string >>= (fun x -> (match string_to_adjustmenttype_opt x with
        | None -> (fail "Unknown enum (AdjustmentType) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_advside_decoder  : fix_advside decoder =
    string >>= (fun x -> (match string_to_advside_opt x with
        | None -> (fail "Unknown enum (AdvSide) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_advtranstype_decoder  : fix_advtranstype decoder =
    string >>= (fun x -> (match string_to_advtranstype_opt x with
        | None -> (fail "Unknown enum (AdvTransType) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_affirmstatus_decoder  : fix_affirmstatus decoder =
    string >>= (fun x -> (match string_to_affirmstatus_opt x with
        | None -> (fail "Unknown enum (AffirmStatus) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_aggregatedbook_decoder  : fix_aggregatedbook decoder =
    string >>= (fun x -> (match string_to_aggregatedbook_opt x with
        | None -> (fail "Unknown enum (AggregatedBook) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_allocaccounttype_decoder  : fix_allocaccounttype decoder =
    string >>= (fun x -> (match string_to_allocaccounttype_opt x with
        | None -> (fail "Unknown enum (AllocAccountType) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_alloccancreplacereason_decoder  : fix_alloccancreplacereason decoder =
    string >>= (fun x -> (match string_to_alloccancreplacereason_opt x with
        | None -> (fail "Unknown enum (AllocCancReplaceReason) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_allochandlinst_decoder  : fix_allochandlinst decoder =
    string >>= (fun x -> (match string_to_allochandlinst_opt x with
        | None -> (fail "Unknown enum (AllocHandlInst) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_allocintermedreqtype_decoder  : fix_allocintermedreqtype decoder =
    string >>= (fun x -> (match string_to_allocintermedreqtype_opt x with
        | None -> (fail "Unknown enum (AllocIntermedReqType) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_alloclinktype_decoder  : fix_alloclinktype decoder =
    string >>= (fun x -> (match string_to_alloclinktype_opt x with
        | None -> (fail "Unknown enum (AllocLinkType) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_allocnoorderstype_decoder  : fix_allocnoorderstype decoder =
    string >>= (fun x -> (match string_to_allocnoorderstype_opt x with
        | None -> (fail "Unknown enum (AllocNoOrdersType) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_allocrejcode_decoder  : fix_allocrejcode decoder =
    string >>= (fun x -> (match string_to_allocrejcode_opt x with
        | None -> (fail "Unknown enum (AllocRejCode) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_allocreporttype_decoder  : fix_allocreporttype decoder =
    string >>= (fun x -> (match string_to_allocreporttype_opt x with
        | None -> (fail "Unknown enum (AllocReportType) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_allocsettlinsttype_decoder  : fix_allocsettlinsttype decoder =
    string >>= (fun x -> (match string_to_allocsettlinsttype_opt x with
        | None -> (fail "Unknown enum (AllocSettlInstType) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_allocstatus_decoder  : fix_allocstatus decoder =
    string >>= (fun x -> (match string_to_allocstatus_opt x with
        | None -> (fail "Unknown enum (AllocStatus) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_alloctranstype_decoder  : fix_alloctranstype decoder =
    string >>= (fun x -> (match string_to_alloctranstype_opt x with
        | None -> (fail "Unknown enum (AllocTransType) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_alloctype_decoder  : fix_alloctype decoder =
    string >>= (fun x -> (match string_to_alloctype_opt x with
        | None -> (fail "Unknown enum (AllocType) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_applqueueaction_decoder  : fix_applqueueaction decoder =
    string >>= (fun x -> (match string_to_applqueueaction_opt x with
        | None -> (fail "Unknown enum (ApplQueueAction) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_applqueueresolution_decoder  : fix_applqueueresolution decoder =
    string >>= (fun x -> (match string_to_applqueueresolution_opt x with
        | None -> (fail "Unknown enum (ApplQueueResolution) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_assignmentmethod_decoder  : fix_assignmentmethod decoder =
    string >>= (fun x -> (match string_to_assignmentmethod_opt x with
        | None -> (fail "Unknown enum (AssignmentMethod) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_avgpxindicator_decoder  : fix_avgpxindicator decoder =
    string >>= (fun x -> (match string_to_avgpxindicator_opt x with
        | None -> (fail "Unknown enum (AvgPxIndicator) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_basispxtype_decoder  : fix_basispxtype decoder =
    string >>= (fun x -> (match string_to_basispxtype_opt x with
        | None -> (fail "Unknown enum (BasisPxType) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_biddescriptortype_decoder  : fix_biddescriptortype decoder =
    string >>= (fun x -> (match string_to_biddescriptortype_opt x with
        | None -> (fail "Unknown enum (BidDescriptorType) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_bidrequesttranstype_decoder  : fix_bidrequesttranstype decoder =
    string >>= (fun x -> (match string_to_bidrequesttranstype_opt x with
        | None -> (fail "Unknown enum (BidRequestTransType) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_bidtradetype_decoder  : fix_bidtradetype decoder =
    string >>= (fun x -> (match string_to_bidtradetype_opt x with
        | None -> (fail "Unknown enum (BidTradeType) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_bidtype_decoder  : fix_bidtype decoder =
    string >>= (fun x -> (match string_to_bidtype_opt x with
        | None -> (fail "Unknown enum (BidType) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_bookingtype_decoder  : fix_bookingtype decoder =
    string >>= (fun x -> (match string_to_bookingtype_opt x with
        | None -> (fail "Unknown enum (BookingType) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_bookingunit_decoder  : fix_bookingunit decoder =
    string >>= (fun x -> (match string_to_bookingunit_opt x with
        | None -> (fail "Unknown enum (BookingUnit) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_cpprogram_decoder  : fix_cpprogram decoder =
    string >>= (fun x -> (match string_to_cpprogram_opt x with
        | None -> (fail "Unknown enum (CPProgram) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_cancellationrights_decoder  : fix_cancellationrights decoder =
    string >>= (fun x -> (match string_to_cancellationrights_opt x with
        | None -> (fail "Unknown enum (CancellationRights) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_cashmargin_decoder  : fix_cashmargin decoder =
    string >>= (fun x -> (match string_to_cashmargin_opt x with
        | None -> (fail "Unknown enum (CashMargin) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_clearingfeeindicator_decoder  : fix_clearingfeeindicator decoder =
    string >>= (fun x -> (match string_to_clearingfeeindicator_opt x with
        | None -> (fail "Unknown enum (ClearingFeeIndicator) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_clearinginstruction_decoder  : fix_clearinginstruction decoder =
    string >>= (fun x -> (match string_to_clearinginstruction_opt x with
        | None -> (fail "Unknown enum (ClearingInstruction) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_collaction_decoder  : fix_collaction decoder =
    string >>= (fun x -> (match string_to_collaction_opt x with
        | None -> (fail "Unknown enum (CollAction) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_collasgnreason_decoder  : fix_collasgnreason decoder =
    string >>= (fun x -> (match string_to_collasgnreason_opt x with
        | None -> (fail "Unknown enum (CollAsgnReason) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_collasgnrejectreason_decoder  : fix_collasgnrejectreason decoder =
    string >>= (fun x -> (match string_to_collasgnrejectreason_opt x with
        | None -> (fail "Unknown enum (CollAsgnRejectReason) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_collasgnresptype_decoder  : fix_collasgnresptype decoder =
    string >>= (fun x -> (match string_to_collasgnresptype_opt x with
        | None -> (fail "Unknown enum (CollAsgnRespType) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_collasgntranstype_decoder  : fix_collasgntranstype decoder =
    string >>= (fun x -> (match string_to_collasgntranstype_opt x with
        | None -> (fail "Unknown enum (CollAsgnTransType) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_collinquiryqualifier_decoder  : fix_collinquiryqualifier decoder =
    string >>= (fun x -> (match string_to_collinquiryqualifier_opt x with
        | None -> (fail "Unknown enum (CollInquiryQualifier) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_collinquiryresult_decoder  : fix_collinquiryresult decoder =
    string >>= (fun x -> (match string_to_collinquiryresult_opt x with
        | None -> (fail "Unknown enum (CollInquiryResult) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_collinquirystatus_decoder  : fix_collinquirystatus decoder =
    string >>= (fun x -> (match string_to_collinquirystatus_opt x with
        | None -> (fail "Unknown enum (CollInquiryStatus) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_collstatus_decoder  : fix_collstatus decoder =
    string >>= (fun x -> (match string_to_collstatus_opt x with
        | None -> (fail "Unknown enum (CollStatus) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_commtype_decoder  : fix_commtype decoder =
    string >>= (fun x -> (match string_to_commtype_opt x with
        | None -> (fail "Unknown enum (CommType) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_confirmrejreason_decoder  : fix_confirmrejreason decoder =
    string >>= (fun x -> (match string_to_confirmrejreason_opt x with
        | None -> (fail "Unknown enum (ConfirmRejReason) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_confirmstatus_decoder  : fix_confirmstatus decoder =
    string >>= (fun x -> (match string_to_confirmstatus_opt x with
        | None -> (fail "Unknown enum (ConfirmStatus) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_confirmtranstype_decoder  : fix_confirmtranstype decoder =
    string >>= (fun x -> (match string_to_confirmtranstype_opt x with
        | None -> (fail "Unknown enum (ConfirmTransType) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_confirmtype_decoder  : fix_confirmtype decoder =
    string >>= (fun x -> (match string_to_confirmtype_opt x with
        | None -> (fail "Unknown enum (ConfirmType) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_contamttype_decoder  : fix_contamttype decoder =
    string >>= (fun x -> (match string_to_contamttype_opt x with
        | None -> (fail "Unknown enum (ContAmtType) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_corporateaction_decoder  : fix_corporateaction list decoder =
    list (string >>= (fun x -> (match string_to_corporateaction_opt x with
        | None -> (fail "Unknown enum (CorporateAction) encoding.")
        | Some y -> (succeed y)
    )
    ))
;;

let full_enum_coveredoruncovered_decoder  : fix_coveredoruncovered decoder =
    string >>= (fun x -> (match string_to_coveredoruncovered_opt x with
        | None -> (fail "Unknown enum (CoveredOrUncovered) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_crossprioritization_decoder  : fix_crossprioritization decoder =
    string >>= (fun x -> (match string_to_crossprioritization_opt x with
        | None -> (fail "Unknown enum (CrossPrioritization) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_crosstype_decoder  : fix_crosstype decoder =
    string >>= (fun x -> (match string_to_crosstype_opt x with
        | None -> (fail "Unknown enum (CrossType) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_custordercapacity_decoder  : fix_custordercapacity decoder =
    string >>= (fun x -> (match string_to_custordercapacity_opt x with
        | None -> (fail "Unknown enum (CustOrderCapacity) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_cxlrejreason_decoder  : fix_cxlrejreason decoder =
    string >>= (fun x -> (match string_to_cxlrejreason_opt x with
        | None -> (fail "Unknown enum (CxlRejReason) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_cxlrejresponseto_decoder  : fix_cxlrejresponseto decoder =
    string >>= (fun x -> (match string_to_cxlrejresponseto_opt x with
        | None -> (fail "Unknown enum (CxlRejResponseTo) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_dkreason_decoder  : fix_dkreason decoder =
    string >>= (fun x -> (match string_to_dkreason_opt x with
        | None -> (fail "Unknown enum (DKReason) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_daybookinginst_decoder  : fix_daybookinginst decoder =
    string >>= (fun x -> (match string_to_daybookinginst_opt x with
        | None -> (fail "Unknown enum (DayBookingInst) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_deletereason_decoder  : fix_deletereason decoder =
    string >>= (fun x -> (match string_to_deletereason_opt x with
        | None -> (fail "Unknown enum (DeleteReason) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_deliveryform_decoder  : fix_deliveryform decoder =
    string >>= (fun x -> (match string_to_deliveryform_opt x with
        | None -> (fail "Unknown enum (DeliveryForm) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_deliverytype_decoder  : fix_deliverytype decoder =
    string >>= (fun x -> (match string_to_deliverytype_opt x with
        | None -> (fail "Unknown enum (DeliveryType) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_discretioninst_decoder  : fix_discretioninst decoder =
    string >>= (fun x -> (match string_to_discretioninst_opt x with
        | None -> (fail "Unknown enum (DiscretionInst) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_discretionlimittype_decoder  : fix_discretionlimittype decoder =
    string >>= (fun x -> (match string_to_discretionlimittype_opt x with
        | None -> (fail "Unknown enum (DiscretionLimitType) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_discretionmovetype_decoder  : fix_discretionmovetype decoder =
    string >>= (fun x -> (match string_to_discretionmovetype_opt x with
        | None -> (fail "Unknown enum (DiscretionMoveType) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_discretionoffsettype_decoder  : fix_discretionoffsettype decoder =
    string >>= (fun x -> (match string_to_discretionoffsettype_opt x with
        | None -> (fail "Unknown enum (DiscretionOffsetType) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_discretionrounddirection_decoder  : fix_discretionrounddirection decoder =
    string >>= (fun x -> (match string_to_discretionrounddirection_opt x with
        | None -> (fail "Unknown enum (DiscretionRoundDirection) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_discretionscope_decoder  : fix_discretionscope decoder =
    string >>= (fun x -> (match string_to_discretionscope_opt x with
        | None -> (fail "Unknown enum (DiscretionScope) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_distribpaymentmethod_decoder  : fix_distribpaymentmethod decoder =
    string >>= (fun x -> (match string_to_distribpaymentmethod_opt x with
        | None -> (fail "Unknown enum (DistribPaymentMethod) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_dlvyinsttype_decoder  : fix_dlvyinsttype decoder =
    string >>= (fun x -> (match string_to_dlvyinsttype_opt x with
        | None -> (fail "Unknown enum (DlvyInstType) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_duetorelated_decoder  : fix_duetorelated decoder =
    string >>= (fun x -> (match string_to_duetorelated_opt x with
        | None -> (fail "Unknown enum (DueToRelated) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_emailtype_decoder  : fix_emailtype decoder =
    string >>= (fun x -> (match string_to_emailtype_opt x with
        | None -> (fail "Unknown enum (EmailType) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_eventtype_decoder  : fix_eventtype decoder =
    string >>= (fun x -> (match string_to_eventtype_opt x with
        | None -> (fail "Unknown enum (EventType) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_exchangeforphysical_decoder  : fix_exchangeforphysical decoder =
    string >>= (fun x -> (match string_to_exchangeforphysical_opt x with
        | None -> (fail "Unknown enum (ExchangeForPhysical) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_execinst_decoder  : fix_execinst list decoder =
    list (string >>= (fun x -> (match string_to_execinst_opt x with
        | None -> (fail "Unknown enum (ExecInst) encoding.")
        | Some y -> (succeed y)
    )
    ))
;;

let full_enum_execpricetype_decoder  : fix_execpricetype decoder =
    string >>= (fun x -> (match string_to_execpricetype_opt x with
        | None -> (fail "Unknown enum (ExecPriceType) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_execrestatementreason_decoder  : fix_execrestatementreason decoder =
    string >>= (fun x -> (match string_to_execrestatementreason_opt x with
        | None -> (fail "Unknown enum (ExecRestatementReason) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_exectype_decoder  : fix_exectype decoder =
    string >>= (fun x -> (match string_to_exectype_opt x with
        | None -> (fail "Unknown enum (ExecType) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_exercisemethod_decoder  : fix_exercisemethod decoder =
    string >>= (fun x -> (match string_to_exercisemethod_opt x with
        | None -> (fail "Unknown enum (ExerciseMethod) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_expirationcycle_decoder  : fix_expirationcycle decoder =
    string >>= (fun x -> (match string_to_expirationcycle_opt x with
        | None -> (fail "Unknown enum (ExpirationCycle) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_financialstatus_decoder  : fix_financialstatus list decoder =
    list (string >>= (fun x -> (match string_to_financialstatus_opt x with
        | None -> (fail "Unknown enum (FinancialStatus) encoding.")
        | Some y -> (succeed y)
    )
    ))
;;

let full_enum_forexreq_decoder  : fix_forexreq decoder =
    string >>= (fun x -> (match string_to_forexreq_opt x with
        | None -> (fail "Unknown enum (ForexReq) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_fundrenewwaiv_decoder  : fix_fundrenewwaiv decoder =
    string >>= (fun x -> (match string_to_fundrenewwaiv_opt x with
        | None -> (fail "Unknown enum (FundRenewWaiv) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_gtbookinginst_decoder  : fix_gtbookinginst decoder =
    string >>= (fun x -> (match string_to_gtbookinginst_opt x with
        | None -> (fail "Unknown enum (GTBookingInst) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_haltreason_decoder  : fix_haltreason decoder =
    string >>= (fun x -> (match string_to_haltreason_opt x with
        | None -> (fail "Unknown enum (HaltReason) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_handlinst_decoder  : fix_handlinst decoder =
    string >>= (fun x -> (match string_to_handlinst_opt x with
        | None -> (fail "Unknown enum (HandlInst) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_ioinaturalflag_decoder  : fix_ioinaturalflag decoder =
    string >>= (fun x -> (match string_to_ioinaturalflag_opt x with
        | None -> (fail "Unknown enum (IOINaturalFlag) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_ioiqltyind_decoder  : fix_ioiqltyind decoder =
    string >>= (fun x -> (match string_to_ioiqltyind_opt x with
        | None -> (fail "Unknown enum (IOIQltyInd) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_ioiqty_decoder  : fix_ioiqty decoder =
    string >>= (fun x -> (match string_to_ioiqty_opt x with
        | None -> (fail "Unknown enum (IOIQty) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_ioiqualifier_decoder  : fix_ioiqualifier decoder =
    string >>= (fun x -> (match string_to_ioiqualifier_opt x with
        | None -> (fail "Unknown enum (IOIQualifier) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_ioitranstype_decoder  : fix_ioitranstype decoder =
    string >>= (fun x -> (match string_to_ioitranstype_opt x with
        | None -> (fail "Unknown enum (IOITransType) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_inviewofcommon_decoder  : fix_inviewofcommon decoder =
    string >>= (fun x -> (match string_to_inviewofcommon_opt x with
        | None -> (fail "Unknown enum (InViewOfCommon) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_inctaxind_decoder  : fix_inctaxind decoder =
    string >>= (fun x -> (match string_to_inctaxind_opt x with
        | None -> (fail "Unknown enum (IncTaxInd) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_instrattribtype_decoder  : fix_instrattribtype decoder =
    string >>= (fun x -> (match string_to_instrattribtype_opt x with
        | None -> (fail "Unknown enum (InstrAttribType) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_lastcapacity_decoder  : fix_lastcapacity decoder =
    string >>= (fun x -> (match string_to_lastcapacity_opt x with
        | None -> (fail "Unknown enum (LastCapacity) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_lastfragment_decoder  : fix_lastfragment decoder =
    string >>= (fun x -> (match string_to_lastfragment_opt x with
        | None -> (fail "Unknown enum (LastFragment) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_lastliquidityind_decoder  : fix_lastliquidityind decoder =
    string >>= (fun x -> (match string_to_lastliquidityind_opt x with
        | None -> (fail "Unknown enum (LastLiquidityInd) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_legswaptype_decoder  : fix_legswaptype decoder =
    string >>= (fun x -> (match string_to_legswaptype_opt x with
        | None -> (fail "Unknown enum (LegSwapType) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_legalconfirm_decoder  : fix_legalconfirm decoder =
    string >>= (fun x -> (match string_to_legalconfirm_opt x with
        | None -> (fail "Unknown enum (LegalConfirm) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_liquidityindtype_decoder  : fix_liquidityindtype decoder =
    string >>= (fun x -> (match string_to_liquidityindtype_opt x with
        | None -> (fail "Unknown enum (LiquidityIndType) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_listexecinsttype_decoder  : fix_listexecinsttype decoder =
    string >>= (fun x -> (match string_to_listexecinsttype_opt x with
        | None -> (fail "Unknown enum (ListExecInstType) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_listorderstatus_decoder  : fix_listorderstatus decoder =
    string >>= (fun x -> (match string_to_listorderstatus_opt x with
        | None -> (fail "Unknown enum (ListOrderStatus) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_liststatustype_decoder  : fix_liststatustype decoder =
    string >>= (fun x -> (match string_to_liststatustype_opt x with
        | None -> (fail "Unknown enum (ListStatusType) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_locatereqd_decoder  : fix_locatereqd decoder =
    string >>= (fun x -> (match string_to_locatereqd_opt x with
        | None -> (fail "Unknown enum (LocateReqd) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_mdentrytype_decoder  : fix_mdentrytype decoder =
    string >>= (fun x -> (match string_to_mdentrytype_opt x with
        | None -> (fail "Unknown enum (MDEntryType) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_mdimplicitdelete_decoder  : fix_mdimplicitdelete decoder =
    string >>= (fun x -> (match string_to_mdimplicitdelete_opt x with
        | None -> (fail "Unknown enum (MDImplicitDelete) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_mdreqrejreason_decoder  : fix_mdreqrejreason decoder =
    string >>= (fun x -> (match string_to_mdreqrejreason_opt x with
        | None -> (fail "Unknown enum (MDReqRejReason) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_mdupdateaction_decoder  : fix_mdupdateaction decoder =
    string >>= (fun x -> (match string_to_mdupdateaction_opt x with
        | None -> (fail "Unknown enum (MDUpdateAction) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_mdupdatetype_decoder  : fix_mdupdatetype decoder =
    string >>= (fun x -> (match string_to_mdupdatetype_opt x with
        | None -> (fail "Unknown enum (MDUpdateType) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_masscancelrejectreason_decoder  : fix_masscancelrejectreason decoder =
    string >>= (fun x -> (match string_to_masscancelrejectreason_opt x with
        | None -> (fail "Unknown enum (MassCancelRejectReason) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_masscancelrequesttype_decoder  : fix_masscancelrequesttype decoder =
    string >>= (fun x -> (match string_to_masscancelrequesttype_opt x with
        | None -> (fail "Unknown enum (MassCancelRequestType) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_masscancelresponse_decoder  : fix_masscancelresponse decoder =
    string >>= (fun x -> (match string_to_masscancelresponse_opt x with
        | None -> (fail "Unknown enum (MassCancelResponse) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_massstatusreqtype_decoder  : fix_massstatusreqtype decoder =
    string >>= (fun x -> (match string_to_massstatusreqtype_opt x with
        | None -> (fail "Unknown enum (MassStatusReqType) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_matchstatus_decoder  : fix_matchstatus decoder =
    string >>= (fun x -> (match string_to_matchstatus_opt x with
        | None -> (fail "Unknown enum (MatchStatus) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_matchtype_decoder  : fix_matchtype decoder =
    string >>= (fun x -> (match string_to_matchtype_opt x with
        | None -> (fail "Unknown enum (MatchType) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_messageencoding_decoder  : fix_messageencoding decoder =
    string >>= (fun x -> (match string_to_messageencoding_opt x with
        | None -> (fail "Unknown enum (MessageEncoding) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_miscfeebasis_decoder  : fix_miscfeebasis decoder =
    string >>= (fun x -> (match string_to_miscfeebasis_opt x with
        | None -> (fail "Unknown enum (MiscFeeBasis) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_miscfeetype_decoder  : fix_miscfeetype decoder =
    string >>= (fun x -> (match string_to_miscfeetype_opt x with
        | None -> (fail "Unknown enum (MiscFeeType) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_moneylaunderingstatus_decoder  : fix_moneylaunderingstatus decoder =
    string >>= (fun x -> (match string_to_moneylaunderingstatus_opt x with
        | None -> (fail "Unknown enum (MoneyLaunderingStatus) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_msgdirection_decoder  : fix_msgdirection decoder =
    string >>= (fun x -> (match string_to_msgdirection_opt x with
        | None -> (fail "Unknown enum (MsgDirection) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_multilegreportingtype_decoder  : fix_multilegreportingtype decoder =
    string >>= (fun x -> (match string_to_multilegreportingtype_opt x with
        | None -> (fail "Unknown enum (MultiLegReportingType) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_multilegrpttypereq_decoder  : fix_multilegrpttypereq decoder =
    string >>= (fun x -> (match string_to_multilegrpttypereq_opt x with
        | None -> (fail "Unknown enum (MultiLegRptTypeReq) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_netgrossind_decoder  : fix_netgrossind decoder =
    string >>= (fun x -> (match string_to_netgrossind_opt x with
        | None -> (fail "Unknown enum (NetGrossInd) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_networkrequesttype_decoder  : fix_networkrequesttype decoder =
    string >>= (fun x -> (match string_to_networkrequesttype_opt x with
        | None -> (fail "Unknown enum (NetworkRequestType) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_networkstatusresponsetype_decoder  : fix_networkstatusresponsetype decoder =
    string >>= (fun x -> (match string_to_networkstatusresponsetype_opt x with
        | None -> (fail "Unknown enum (NetworkStatusResponseType) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_notifybrokerofcredit_decoder  : fix_notifybrokerofcredit decoder =
    string >>= (fun x -> (match string_to_notifybrokerofcredit_opt x with
        | None -> (fail "Unknown enum (NotifyBrokerOfCredit) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_oddlot_decoder  : fix_oddlot decoder =
    string >>= (fun x -> (match string_to_oddlot_opt x with
        | None -> (fail "Unknown enum (OddLot) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_openclosesettlflag_decoder  : fix_openclosesettlflag list decoder =
    list (string >>= (fun x -> (match string_to_openclosesettlflag_opt x with
        | None -> (fail "Unknown enum (OpenCloseSettlFlag) encoding.")
        | Some y -> (succeed y)
    )
    ))
;;

let full_enum_ordrejreason_decoder  : fix_ordrejreason decoder =
    string >>= (fun x -> (match string_to_ordrejreason_opt x with
        | None -> (fail "Unknown enum (OrdRejReason) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_ordstatus_decoder  : fix_ordstatus decoder =
    string >>= (fun x -> (match string_to_ordstatus_opt x with
        | None -> (fail "Unknown enum (OrdStatus) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_ordtype_decoder  : fix_ordtype decoder =
    string >>= (fun x -> (match string_to_ordtype_opt x with
        | None -> (fail "Unknown enum (OrdType) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_ordercapacity_decoder  : fix_ordercapacity decoder =
    string >>= (fun x -> (match string_to_ordercapacity_opt x with
        | None -> (fail "Unknown enum (OrderCapacity) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_orderrestrictions_decoder  : fix_orderrestrictions list decoder =
    list (string >>= (fun x -> (match string_to_orderrestrictions_opt x with
        | None -> (fail "Unknown enum (OrderRestrictions) encoding.")
        | Some y -> (succeed y)
    )
    ))
;;

let full_enum_ownertype_decoder  : fix_ownertype decoder =
    string >>= (fun x -> (match string_to_ownertype_opt x with
        | None -> (fail "Unknown enum (OwnerType) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_ownershiptype_decoder  : fix_ownershiptype decoder =
    string >>= (fun x -> (match string_to_ownershiptype_opt x with
        | None -> (fail "Unknown enum (OwnershipType) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_partyidsource_decoder  : fix_partyidsource decoder =
    string >>= (fun x -> (match string_to_partyidsource_opt x with
        | None -> (fail "Unknown enum (PartyIDSource) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_partyrole_decoder  : fix_partyrole decoder =
    string >>= (fun x -> (match string_to_partyrole_opt x with
        | None -> (fail "Unknown enum (PartyRole) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_partysubidtype_decoder  : fix_partysubidtype decoder =
    string >>= (fun x -> (match string_to_partysubidtype_opt x with
        | None -> (fail "Unknown enum (PartySubIDType) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_paymentmethod_decoder  : fix_paymentmethod decoder =
    string >>= (fun x -> (match string_to_paymentmethod_opt x with
        | None -> (fail "Unknown enum (PaymentMethod) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_peglimittype_decoder  : fix_peglimittype decoder =
    string >>= (fun x -> (match string_to_peglimittype_opt x with
        | None -> (fail "Unknown enum (PegLimitType) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_pegmovetype_decoder  : fix_pegmovetype decoder =
    string >>= (fun x -> (match string_to_pegmovetype_opt x with
        | None -> (fail "Unknown enum (PegMoveType) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_pegoffsettype_decoder  : fix_pegoffsettype decoder =
    string >>= (fun x -> (match string_to_pegoffsettype_opt x with
        | None -> (fail "Unknown enum (PegOffsetType) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_pegrounddirection_decoder  : fix_pegrounddirection decoder =
    string >>= (fun x -> (match string_to_pegrounddirection_opt x with
        | None -> (fail "Unknown enum (PegRoundDirection) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_pegscope_decoder  : fix_pegscope decoder =
    string >>= (fun x -> (match string_to_pegscope_opt x with
        | None -> (fail "Unknown enum (PegScope) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_posamttype_decoder  : fix_posamttype decoder =
    string >>= (fun x -> (match string_to_posamttype_opt x with
        | None -> (fail "Unknown enum (PosAmtType) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_posmaintaction_decoder  : fix_posmaintaction decoder =
    string >>= (fun x -> (match string_to_posmaintaction_opt x with
        | None -> (fail "Unknown enum (PosMaintAction) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_posmaintresult_decoder  : fix_posmaintresult decoder =
    string >>= (fun x -> (match string_to_posmaintresult_opt x with
        | None -> (fail "Unknown enum (PosMaintResult) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_posmaintstatus_decoder  : fix_posmaintstatus decoder =
    string >>= (fun x -> (match string_to_posmaintstatus_opt x with
        | None -> (fail "Unknown enum (PosMaintStatus) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_posqtystatus_decoder  : fix_posqtystatus decoder =
    string >>= (fun x -> (match string_to_posqtystatus_opt x with
        | None -> (fail "Unknown enum (PosQtyStatus) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_posreqresult_decoder  : fix_posreqresult decoder =
    string >>= (fun x -> (match string_to_posreqresult_opt x with
        | None -> (fail "Unknown enum (PosReqResult) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_posreqstatus_decoder  : fix_posreqstatus decoder =
    string >>= (fun x -> (match string_to_posreqstatus_opt x with
        | None -> (fail "Unknown enum (PosReqStatus) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_posreqtype_decoder  : fix_posreqtype decoder =
    string >>= (fun x -> (match string_to_posreqtype_opt x with
        | None -> (fail "Unknown enum (PosReqType) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_postranstype_decoder  : fix_postranstype decoder =
    string >>= (fun x -> (match string_to_postranstype_opt x with
        | None -> (fail "Unknown enum (PosTransType) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_postype_decoder  : fix_postype decoder =
    string >>= (fun x -> (match string_to_postype_opt x with
        | None -> (fail "Unknown enum (PosType) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_positioneffect_decoder  : fix_positioneffect decoder =
    string >>= (fun x -> (match string_to_positioneffect_opt x with
        | None -> (fail "Unknown enum (PositionEffect) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_possdupflag_decoder  : fix_possdupflag decoder =
    string >>= (fun x -> (match string_to_possdupflag_opt x with
        | None -> (fail "Unknown enum (PossDupFlag) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_possresend_decoder  : fix_possresend decoder =
    string >>= (fun x -> (match string_to_possresend_opt x with
        | None -> (fail "Unknown enum (PossResend) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_preallocmethod_decoder  : fix_preallocmethod decoder =
    string >>= (fun x -> (match string_to_preallocmethod_opt x with
        | None -> (fail "Unknown enum (PreallocMethod) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_previouslyreported_decoder  : fix_previouslyreported decoder =
    string >>= (fun x -> (match string_to_previouslyreported_opt x with
        | None -> (fail "Unknown enum (PreviouslyReported) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_pricetype_decoder  : fix_pricetype decoder =
    string >>= (fun x -> (match string_to_pricetype_opt x with
        | None -> (fail "Unknown enum (PriceType) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_priorityindicator_decoder  : fix_priorityindicator decoder =
    string >>= (fun x -> (match string_to_priorityindicator_opt x with
        | None -> (fail "Unknown enum (PriorityIndicator) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_processcode_decoder  : fix_processcode decoder =
    string >>= (fun x -> (match string_to_processcode_opt x with
        | None -> (fail "Unknown enum (ProcessCode) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_product_decoder  : fix_product decoder =
    string >>= (fun x -> (match string_to_product_opt x with
        | None -> (fail "Unknown enum (Product) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_progrptreqs_decoder  : fix_progrptreqs decoder =
    string >>= (fun x -> (match string_to_progrptreqs_opt x with
        | None -> (fail "Unknown enum (ProgRptReqs) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_publishtrdindicator_decoder  : fix_publishtrdindicator decoder =
    string >>= (fun x -> (match string_to_publishtrdindicator_opt x with
        | None -> (fail "Unknown enum (PublishTrdIndicator) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_putorcall_decoder  : fix_putorcall decoder =
    string >>= (fun x -> (match string_to_putorcall_opt x with
        | None -> (fail "Unknown enum (PutOrCall) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_qtytype_decoder  : fix_qtytype decoder =
    string >>= (fun x -> (match string_to_qtytype_opt x with
        | None -> (fail "Unknown enum (QtyType) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_quotecanceltype_decoder  : fix_quotecanceltype decoder =
    string >>= (fun x -> (match string_to_quotecanceltype_opt x with
        | None -> (fail "Unknown enum (QuoteCancelType) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_quotecondition_decoder  : fix_quotecondition list decoder =
    list (string >>= (fun x -> (match string_to_quotecondition_opt x with
        | None -> (fail "Unknown enum (QuoteCondition) encoding.")
        | Some y -> (succeed y)
    )
    ))
;;

let full_enum_quotepricetype_decoder  : fix_quotepricetype decoder =
    string >>= (fun x -> (match string_to_quotepricetype_opt x with
        | None -> (fail "Unknown enum (QuotePriceType) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_quoterejectreason_decoder  : fix_quoterejectreason decoder =
    string >>= (fun x -> (match string_to_quoterejectreason_opt x with
        | None -> (fail "Unknown enum (QuoteRejectReason) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_quoterequestrejectreason_decoder  : fix_quoterequestrejectreason decoder =
    string >>= (fun x -> (match string_to_quoterequestrejectreason_opt x with
        | None -> (fail "Unknown enum (QuoteRequestRejectReason) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_quoterequesttype_decoder  : fix_quoterequesttype decoder =
    string >>= (fun x -> (match string_to_quoterequesttype_opt x with
        | None -> (fail "Unknown enum (QuoteRequestType) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_quoteresptype_decoder  : fix_quoteresptype decoder =
    string >>= (fun x -> (match string_to_quoteresptype_opt x with
        | None -> (fail "Unknown enum (QuoteRespType) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_quoteresponselevel_decoder  : fix_quoteresponselevel decoder =
    string >>= (fun x -> (match string_to_quoteresponselevel_opt x with
        | None -> (fail "Unknown enum (QuoteResponseLevel) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_quotestatus_decoder  : fix_quotestatus decoder =
    string >>= (fun x -> (match string_to_quotestatus_opt x with
        | None -> (fail "Unknown enum (QuoteStatus) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_quotetype_decoder  : fix_quotetype decoder =
    string >>= (fun x -> (match string_to_quotetype_opt x with
        | None -> (fail "Unknown enum (QuoteType) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_registrejreasoncode_decoder  : fix_registrejreasoncode decoder =
    string >>= (fun x -> (match string_to_registrejreasoncode_opt x with
        | None -> (fail "Unknown enum (RegistRejReasonCode) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_registstatus_decoder  : fix_registstatus decoder =
    string >>= (fun x -> (match string_to_registstatus_opt x with
        | None -> (fail "Unknown enum (RegistStatus) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_registtranstype_decoder  : fix_registtranstype decoder =
    string >>= (fun x -> (match string_to_registtranstype_opt x with
        | None -> (fail "Unknown enum (RegistTransType) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_reporttoexch_decoder  : fix_reporttoexch decoder =
    string >>= (fun x -> (match string_to_reporttoexch_opt x with
        | None -> (fail "Unknown enum (ReportToExch) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_resetseqnumflag_decoder  : fix_resetseqnumflag decoder =
    string >>= (fun x -> (match string_to_resetseqnumflag_opt x with
        | None -> (fail "Unknown enum (ResetSeqNumFlag) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_responsetransporttype_decoder  : fix_responsetransporttype decoder =
    string >>= (fun x -> (match string_to_responsetransporttype_opt x with
        | None -> (fail "Unknown enum (ResponseTransportType) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_roundingdirection_decoder  : fix_roundingdirection decoder =
    string >>= (fun x -> (match string_to_roundingdirection_opt x with
        | None -> (fail "Unknown enum (RoundingDirection) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_routingtype_decoder  : fix_routingtype decoder =
    string >>= (fun x -> (match string_to_routingtype_opt x with
        | None -> (fail "Unknown enum (RoutingType) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_scope_decoder  : fix_scope list decoder =
    list (string >>= (fun x -> (match string_to_scope_opt x with
        | None -> (fail "Unknown enum (Scope) encoding.")
        | Some y -> (succeed y)
    )
    ))
;;

let full_enum_securityidsource_decoder  : fix_securityidsource decoder =
    string >>= (fun x -> (match string_to_securityidsource_opt x with
        | None -> (fail "Unknown enum (SecurityIDSource) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_securitylistrequesttype_decoder  : fix_securitylistrequesttype decoder =
    string >>= (fun x -> (match string_to_securitylistrequesttype_opt x with
        | None -> (fail "Unknown enum (SecurityListRequestType) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_securityrequestresult_decoder  : fix_securityrequestresult decoder =
    string >>= (fun x -> (match string_to_securityrequestresult_opt x with
        | None -> (fail "Unknown enum (SecurityRequestResult) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_securityrequesttype_decoder  : fix_securityrequesttype decoder =
    string >>= (fun x -> (match string_to_securityrequesttype_opt x with
        | None -> (fail "Unknown enum (SecurityRequestType) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_securityresponsetype_decoder  : fix_securityresponsetype decoder =
    string >>= (fun x -> (match string_to_securityresponsetype_opt x with
        | None -> (fail "Unknown enum (SecurityResponseType) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_securitytradingstatus_decoder  : fix_securitytradingstatus decoder =
    string >>= (fun x -> (match string_to_securitytradingstatus_opt x with
        | None -> (fail "Unknown enum (SecurityTradingStatus) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_securitytype_decoder  : fix_securitytype decoder =
    string >>= (fun x -> (match string_to_securitytype_opt x with
        | None -> (fail "Unknown enum (SecurityType) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_settlcurrfxratecalc_decoder  : fix_settlcurrfxratecalc decoder =
    string >>= (fun x -> (match string_to_settlcurrfxratecalc_opt x with
        | None -> (fail "Unknown enum (SettlCurrFxRateCalc) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_settldeliverytype_decoder  : fix_settldeliverytype decoder =
    string >>= (fun x -> (match string_to_settldeliverytype_opt x with
        | None -> (fail "Unknown enum (SettlDeliveryType) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_settlinstmode_decoder  : fix_settlinstmode decoder =
    string >>= (fun x -> (match string_to_settlinstmode_opt x with
        | None -> (fail "Unknown enum (SettlInstMode) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_settlinstreqrejcode_decoder  : fix_settlinstreqrejcode decoder =
    string >>= (fun x -> (match string_to_settlinstreqrejcode_opt x with
        | None -> (fail "Unknown enum (SettlInstReqRejCode) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_settlinstsource_decoder  : fix_settlinstsource decoder =
    string >>= (fun x -> (match string_to_settlinstsource_opt x with
        | None -> (fail "Unknown enum (SettlInstSource) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_settlinsttranstype_decoder  : fix_settlinsttranstype decoder =
    string >>= (fun x -> (match string_to_settlinsttranstype_opt x with
        | None -> (fail "Unknown enum (SettlInstTransType) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_settlpricetype_decoder  : fix_settlpricetype decoder =
    string >>= (fun x -> (match string_to_settlpricetype_opt x with
        | None -> (fail "Unknown enum (SettlPriceType) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_settlsessid_decoder  : fix_settlsessid decoder =
    string >>= (fun x -> (match string_to_settlsessid_opt x with
        | None -> (fail "Unknown enum (SettlSessID) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_settltype_decoder  : fix_settltype decoder =
    string >>= (fun x -> (match string_to_settltype_opt x with
        | None -> (fail "Unknown enum (SettlType) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_shortsalereason_decoder  : fix_shortsalereason decoder =
    string >>= (fun x -> (match string_to_shortsalereason_opt x with
        | None -> (fail "Unknown enum (ShortSaleReason) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_side_decoder  : fix_side decoder =
    string >>= (fun x -> (match string_to_side_opt x with
        | None -> (fail "Unknown enum (Side) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_sidemultilegreportingtype_decoder  : fix_sidemultilegreportingtype decoder =
    string >>= (fun x -> (match string_to_sidemultilegreportingtype_opt x with
        | None -> (fail "Unknown enum (SideMultiLegReportingType) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_sidevalueind_decoder  : fix_sidevalueind decoder =
    string >>= (fun x -> (match string_to_sidevalueind_opt x with
        | None -> (fail "Unknown enum (SideValueInd) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_solicitedflag_decoder  : fix_solicitedflag decoder =
    string >>= (fun x -> (match string_to_solicitedflag_opt x with
        | None -> (fail "Unknown enum (SolicitedFlag) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_standinstdbtype_decoder  : fix_standinstdbtype decoder =
    string >>= (fun x -> (match string_to_standinstdbtype_opt x with
        | None -> (fail "Unknown enum (StandInstDbType) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_statusvalue_decoder  : fix_statusvalue decoder =
    string >>= (fun x -> (match string_to_statusvalue_opt x with
        | None -> (fail "Unknown enum (StatusValue) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_stipulationtype_decoder  : fix_stipulationtype decoder =
    string >>= (fun x -> (match string_to_stipulationtype_opt x with
        | None -> (fail "Unknown enum (StipulationType) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_subscriptionrequesttype_decoder  : fix_subscriptionrequesttype decoder =
    string >>= (fun x -> (match string_to_subscriptionrequesttype_opt x with
        | None -> (fail "Unknown enum (SubscriptionRequestType) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_targetstrategy_decoder  : fix_targetstrategy decoder =
    string >>= (fun x -> (match string_to_targetstrategy_opt x with
        | None -> (fail "Unknown enum (TargetStrategy) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_taxadvantagetype_decoder  : fix_taxadvantagetype decoder =
    string >>= (fun x -> (match string_to_taxadvantagetype_opt x with
        | None -> (fail "Unknown enum (TaxAdvantageType) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_terminationtype_decoder  : fix_terminationtype decoder =
    string >>= (fun x -> (match string_to_terminationtype_opt x with
        | None -> (fail "Unknown enum (TerminationType) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_testmessageindicator_decoder  : fix_testmessageindicator decoder =
    string >>= (fun x -> (match string_to_testmessageindicator_opt x with
        | None -> (fail "Unknown enum (TestMessageIndicator) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_tickdirection_decoder  : fix_tickdirection decoder =
    string >>= (fun x -> (match string_to_tickdirection_opt x with
        | None -> (fail "Unknown enum (TickDirection) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_timeinforce_decoder  : fix_timeinforce decoder =
    string >>= (fun x -> (match string_to_timeinforce_opt x with
        | None -> (fail "Unknown enum (TimeInForce) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_tradsesmethod_decoder  : fix_tradsesmethod decoder =
    string >>= (fun x -> (match string_to_tradsesmethod_opt x with
        | None -> (fail "Unknown enum (TradSesMethod) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_tradsesmode_decoder  : fix_tradsesmode decoder =
    string >>= (fun x -> (match string_to_tradsesmode_opt x with
        | None -> (fail "Unknown enum (TradSesMode) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_tradsesstatus_decoder  : fix_tradsesstatus decoder =
    string >>= (fun x -> (match string_to_tradsesstatus_opt x with
        | None -> (fail "Unknown enum (TradSesStatus) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_tradsesstatusrejreason_decoder  : fix_tradsesstatusrejreason decoder =
    string >>= (fun x -> (match string_to_tradsesstatusrejreason_opt x with
        | None -> (fail "Unknown enum (TradSesStatusRejReason) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_tradeallocindicator_decoder  : fix_tradeallocindicator decoder =
    string >>= (fun x -> (match string_to_tradeallocindicator_opt x with
        | None -> (fail "Unknown enum (TradeAllocIndicator) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_tradecondition_decoder  : fix_tradecondition list decoder =
    list (string >>= (fun x -> (match string_to_tradecondition_opt x with
        | None -> (fail "Unknown enum (TradeCondition) encoding.")
        | Some y -> (succeed y)
    )
    ))
;;

let full_enum_tradereportrejectreason_decoder  : fix_tradereportrejectreason decoder =
    string >>= (fun x -> (match string_to_tradereportrejectreason_opt x with
        | None -> (fail "Unknown enum (TradeReportRejectReason) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_tradereporttype_decoder  : fix_tradereporttype decoder =
    string >>= (fun x -> (match string_to_tradereporttype_opt x with
        | None -> (fail "Unknown enum (TradeReportType) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_traderequestresult_decoder  : fix_traderequestresult decoder =
    string >>= (fun x -> (match string_to_traderequestresult_opt x with
        | None -> (fail "Unknown enum (TradeRequestResult) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_traderequeststatus_decoder  : fix_traderequeststatus decoder =
    string >>= (fun x -> (match string_to_traderequeststatus_opt x with
        | None -> (fail "Unknown enum (TradeRequestStatus) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_traderequesttype_decoder  : fix_traderequesttype decoder =
    string >>= (fun x -> (match string_to_traderequesttype_opt x with
        | None -> (fail "Unknown enum (TradeRequestType) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_tradedflatswitch_decoder  : fix_tradedflatswitch decoder =
    string >>= (fun x -> (match string_to_tradedflatswitch_opt x with
        | None -> (fail "Unknown enum (TradedFlatSwitch) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_trdregtimestamptype_decoder  : fix_trdregtimestamptype decoder =
    string >>= (fun x -> (match string_to_trdregtimestamptype_opt x with
        | None -> (fail "Unknown enum (TrdRegTimestampType) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_trdrptstatus_decoder  : fix_trdrptstatus decoder =
    string >>= (fun x -> (match string_to_trdrptstatus_opt x with
        | None -> (fail "Unknown enum (TrdRptStatus) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_trdtype_decoder  : fix_trdtype decoder =
    string >>= (fun x -> (match string_to_trdtype_opt x with
        | None -> (fail "Unknown enum (TrdType) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_unsolicitedindicator_decoder  : fix_unsolicitedindicator decoder =
    string >>= (fun x -> (match string_to_unsolicitedindicator_opt x with
        | None -> (fail "Unknown enum (UnsolicitedIndicator) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_urgency_decoder  : fix_urgency decoder =
    string >>= (fun x -> (match string_to_urgency_opt x with
        | None -> (fail "Unknown enum (Urgency) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_userrequesttype_decoder  : fix_userrequesttype decoder =
    string >>= (fun x -> (match string_to_userrequesttype_opt x with
        | None -> (fail "Unknown enum (UserRequestType) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_userstatus_decoder  : fix_userstatus decoder =
    string >>= (fun x -> (match string_to_userstatus_opt x with
        | None -> (fail "Unknown enum (UserStatus) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_workingindicator_decoder  : fix_workingindicator decoder =
    string >>= (fun x -> (match string_to_workingindicator_opt x with
        | None -> (fail "Unknown enum (WorkingIndicator) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_yieldtype_decoder  : fix_yieldtype decoder =
    string >>= (fun x -> (match string_to_yieldtype_opt x with
        | None -> (fail "Unknown enum (YieldType) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_currency_decoder  : fix_currency decoder =
    string >>= (fun x -> (match string_to_currency_opt x with
        | None -> (fail "Unknown enum (Currency) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_country_decoder  : fix_country decoder =
    string >>= (fun x -> (match string_to_country_opt x with
        | None -> (fail "Unknown enum (Country) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

let full_enum_exchange_decoder  : fix_exchange decoder =
    string >>= (fun x -> (match string_to_exchange_opt x with
        | None -> (fail "Unknown enum (Exchange) encoding.")
        | Some y -> (succeed y)
    )
    )
;;

[@@@logic]
