(* Imandra Inc. copyright 2020 *)
[@@@import "../../src-model/src/act_checks.iml"]
open Act_checks;;
[@@@import "../../src-model/src-types/model_messages.iml"]
open Model_messages;;
[@@@import "../../src-model/src/msg_process.iml"]
open Msg_process;;
[@@@import "scenario_type.iml"]
open Scenario_type;;
[@@@import "../../src-model/src-types/state.iml"]
open State;;
[@@@import "template.iml"]
open Template;;


let is_event_valid (e : event) (s : model_state)  : bool =
    (match e with
        | Message m -> (is_message_valid m s)
        | Action a -> (is_action_valid a s)
    )
;;

type region_expander = {
    field_projections : string list;
    field_printers : (event -> string option)
     list;
    valid_fn : string option;
    expand_when : string option
}[@@program]
;;

type scenario = {
    id : string;
    name : string option;
    description : string option;
    template : t list;
    region_expander : region_expander list;
    template_attributes : (string*string option) list;
    events_attributes : (string*string option) list list
}[@@program]
;;

let scenarios = [] [@@program];;

let mod_state_with_event (e) (s)  =
    (match e with
        | Action a -> { s with
            incoming_action = Some a
        }
        | Message m -> { s with
            incoming_msg = FIX_TL_Normal m
        }
    )
;;

let field_projection_to_type (x)  =
    (match x with
        | _ -> ""
    )
    [@@macro]
;;
