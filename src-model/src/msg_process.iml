(* Aesthetic Integration copyright 2018 *)
open Model_messages;;
open Msg_check_fields;;
open Msg_check_types;;
open Msg_check_validate;;
open Msg_defaults;;
open Msg_receive;;
open Msg_reject;;
open State;;

let process_NewOrderSingle (m_state : model_state) (msg_data : mod_newordersingle_data)  =
    let msg_data = assign_defaults_NewOrderSingle msg_data in
    let field_check = check_fields_NewOrderSingle msg_data m_state in
    if field_check.is_invalid then
        (reject_NewOrderSingle_invalidfield m_state msg_data field_check.field_text)
    else
        let custom_reject = check_validate_NewOrderSingle msg_data m_state in
        if custom_reject.validate_invalid then
            (reject_NewOrderSingle_invalid m_state msg_data custom_reject.validate_text)
        else
            (receive_message_NewOrderSingle m_state msg_data)
;;

let process_OrderCancel (m_state : model_state) (msg_data : mod_ordercancel_data)  =
    let msg_data = assign_defaults_OrderCancel msg_data in
    let field_check = check_fields_OrderCancel msg_data m_state in
    if field_check.is_invalid then
        (reject_OrderCancel_invalidfield m_state msg_data field_check.field_text)
    else
        let custom_reject = check_validate_OrderCancel msg_data m_state in
        if custom_reject.validate_invalid then
            (reject_OrderCancel_invalid m_state msg_data custom_reject.validate_text)
        else
            (receive_message_OrderCancel m_state msg_data)
;;

let process_NewOrder_Multi_Leg (m_state : model_state) (msg_data : mod_neworder_multi_leg_data)  =
    let msg_data = assign_defaults_NewOrder_Multi_Leg msg_data in
    let field_check = check_fields_NewOrder_Multi_Leg msg_data m_state in
    if field_check.is_invalid then
        (reject_NewOrder_Multi_Leg_invalidfield m_state msg_data field_check.field_text)
    else
        let custom_reject = check_validate_NewOrder_Multi_Leg msg_data m_state in
        if custom_reject.validate_invalid then
            (reject_NewOrder_Multi_Leg_invalid m_state msg_data custom_reject.validate_text)
        else
            (receive_message_NewOrder_Multi_Leg m_state msg_data)
;;

let process_NewOrder_List (m_state : model_state) (msg_data : mod_neworder_list_data)  =
    let msg_data = assign_defaults_NewOrder_List msg_data in
    let field_check = check_fields_NewOrder_List msg_data m_state in
    if field_check.is_invalid then
        (reject_NewOrder_List_invalidfield m_state msg_data field_check.field_text)
    else
        let custom_reject = check_validate_NewOrder_List msg_data m_state in
        if custom_reject.validate_invalid then
            (reject_NewOrder_List_invalid m_state msg_data custom_reject.validate_text)
        else
            (receive_message_NewOrder_List m_state msg_data)
;;

let process_ListOrderCancel (m_state : model_state) (msg_data : mod_listordercancel_data)  =
    let msg_data = assign_defaults_ListOrderCancel msg_data in
    let field_check = check_fields_ListOrderCancel msg_data m_state in
    if field_check.is_invalid then
        (reject_ListOrderCancel_invalidfield m_state msg_data field_check.field_text)
    else
        let custom_reject = check_validate_ListOrderCancel msg_data m_state in
        if custom_reject.validate_invalid then
            (reject_ListOrderCancel_invalid m_state msg_data custom_reject.validate_text)
        else
            (receive_message_ListOrderCancel m_state msg_data)
;;

let process_BusinessMessageReject (m_state : model_state) (msg_data : mod_businessmessagereject_data)  =
    let msg_data = assign_defaults_BusinessMessageReject msg_data in
    let field_check = check_fields_BusinessMessageReject msg_data m_state in
    if field_check.is_invalid then
        (reject_BusinessMessageReject_invalidfield m_state msg_data field_check.field_text)
    else
        let custom_reject = check_validate_BusinessMessageReject msg_data m_state in
        if custom_reject.validate_invalid then
            (reject_BusinessMessageReject_invalid m_state msg_data custom_reject.validate_text)
        else
            (receive_message_BusinessMessageReject m_state msg_data)
;;

let process_AllocationReport (m_state : model_state) (msg_data : mod_allocationreport_data)  =
    let msg_data = assign_defaults_AllocationReport msg_data in
    let field_check = check_fields_AllocationReport msg_data m_state in
    if field_check.is_invalid then
        (reject_AllocationReport_invalidfield m_state msg_data field_check.field_text)
    else
        let custom_reject = check_validate_AllocationReport msg_data m_state in
        if custom_reject.validate_invalid then
            (reject_AllocationReport_invalid m_state msg_data custom_reject.validate_text)
        else
            (receive_message_AllocationReport m_state msg_data)
;;

let process_AllocationReportACK (m_state : model_state) (msg_data : mod_allocationreportack_data)  =
    let msg_data = assign_defaults_AllocationReportACK msg_data in
    let field_check = check_fields_AllocationReportACK msg_data m_state in
    if field_check.is_invalid then
        (reject_AllocationReportACK_invalidfield m_state msg_data field_check.field_text)
    else
        let custom_reject = check_validate_AllocationReportACK msg_data m_state in
        if custom_reject.validate_invalid then
            (reject_AllocationReportACK_invalid m_state msg_data custom_reject.validate_text)
        else
            (receive_message_AllocationReportACK m_state msg_data)
;;

let process_AllocationInstruction (m_state : model_state) (msg_data : mod_allocationinstruction_data)  =
    let msg_data = assign_defaults_AllocationInstruction msg_data in
    let field_check = check_fields_AllocationInstruction msg_data m_state in
    if field_check.is_invalid then
        (reject_AllocationInstruction_invalidfield m_state msg_data field_check.field_text)
    else
        let custom_reject = check_validate_AllocationInstruction msg_data m_state in
        if custom_reject.validate_invalid then
            (reject_AllocationInstruction_invalid m_state msg_data custom_reject.validate_text)
        else
            (receive_message_AllocationInstruction m_state msg_data)
;;

let process_Heartbeat (m_state : model_state) (msg_data : mod_heartbeat_data)  =
    let msg_data = assign_defaults_Heartbeat msg_data in
    let field_check = check_fields_Heartbeat msg_data m_state in
    if field_check.is_invalid then
        (reject_Heartbeat_invalidfield m_state msg_data field_check.field_text)
    else
        let custom_reject = check_validate_Heartbeat msg_data m_state in
        if custom_reject.validate_invalid then
            (reject_Heartbeat_invalid m_state msg_data custom_reject.validate_text)
        else
            (receive_message_Heartbeat m_state msg_data)
;;

let process_TestRequest (m_state : model_state) (msg_data : mod_testrequest_data)  =
    let msg_data = assign_defaults_TestRequest msg_data in
    let field_check = check_fields_TestRequest msg_data m_state in
    if field_check.is_invalid then
        (reject_TestRequest_invalidfield m_state msg_data field_check.field_text)
    else
        let custom_reject = check_validate_TestRequest msg_data m_state in
        if custom_reject.validate_invalid then
            (reject_TestRequest_invalid m_state msg_data custom_reject.validate_text)
        else
            (receive_message_TestRequest m_state msg_data)
;;

let process_ResendRequest (m_state : model_state) (msg_data : mod_resendrequest_data)  =
    let msg_data = assign_defaults_ResendRequest msg_data in
    let field_check = check_fields_ResendRequest msg_data m_state in
    if field_check.is_invalid then
        (reject_ResendRequest_invalidfield m_state msg_data field_check.field_text)
    else
        let custom_reject = check_validate_ResendRequest msg_data m_state in
        if custom_reject.validate_invalid then
            (reject_ResendRequest_invalid m_state msg_data custom_reject.validate_text)
        else
            (receive_message_ResendRequest m_state msg_data)
;;

let process_SessionLevelReject (m_state : model_state) (msg_data : mod_sessionlevelreject_data)  =
    let msg_data = assign_defaults_SessionLevelReject msg_data in
    let field_check = check_fields_SessionLevelReject msg_data m_state in
    if field_check.is_invalid then
        (reject_SessionLevelReject_invalidfield m_state msg_data field_check.field_text)
    else
        let custom_reject = check_validate_SessionLevelReject msg_data m_state in
        if custom_reject.validate_invalid then
            (reject_SessionLevelReject_invalid m_state msg_data custom_reject.validate_text)
        else
            (receive_message_SessionLevelReject m_state msg_data)
;;

let process_SequenceResetRequest (m_state : model_state) (msg_data : mod_sequenceresetrequest_data)  =
    let msg_data = assign_defaults_SequenceResetRequest msg_data in
    let field_check = check_fields_SequenceResetRequest msg_data m_state in
    if field_check.is_invalid then
        (reject_SequenceResetRequest_invalidfield m_state msg_data field_check.field_text)
    else
        let custom_reject = check_validate_SequenceResetRequest msg_data m_state in
        if custom_reject.validate_invalid then
            (reject_SequenceResetRequest_invalid m_state msg_data custom_reject.validate_text)
        else
            (receive_message_SequenceResetRequest m_state msg_data)
;;

let process_Logout (m_state : model_state) (msg_data : mod_logout_data)  =
    let msg_data = assign_defaults_Logout msg_data in
    let field_check = check_fields_Logout msg_data m_state in
    if field_check.is_invalid then
        (reject_Logout_invalidfield m_state msg_data field_check.field_text)
    else
        let custom_reject = check_validate_Logout msg_data m_state in
        if custom_reject.validate_invalid then
            (reject_Logout_invalid m_state msg_data custom_reject.validate_text)
        else
            (receive_message_Logout m_state msg_data)
;;

let process_FIXLogon (m_state : model_state) (msg_data : mod_fixlogon_data)  =
    let msg_data = assign_defaults_FIXLogon msg_data in
    let field_check = check_fields_FIXLogon msg_data m_state in
    if field_check.is_invalid then
        (reject_FIXLogon_invalidfield m_state msg_data field_check.field_text)
    else
        let custom_reject = check_validate_FIXLogon msg_data m_state in
        if custom_reject.validate_invalid then
            (reject_FIXLogon_invalid m_state msg_data custom_reject.validate_text)
        else
            (receive_message_FIXLogon m_state msg_data)
;;

let process_DontKnowTrade (m_state : model_state) (msg_data : mod_dontknowtrade_data)  =
    let msg_data = assign_defaults_DontKnowTrade msg_data in
    let field_check = check_fields_DontKnowTrade msg_data m_state in
    if field_check.is_invalid then
        (reject_DontKnowTrade_invalidfield m_state msg_data field_check.field_text)
    else
        let custom_reject = check_validate_DontKnowTrade msg_data m_state in
        if custom_reject.validate_invalid then
            (reject_DontKnowTrade_invalid m_state msg_data custom_reject.validate_text)
        else
            (receive_message_DontKnowTrade m_state msg_data)
;;

let process_msg (m_state : model_state) (msg : model_top_level_msg)  =
    (match msg with
        | FIX_TL_Req_Field_Missing d -> (reject_field_missing m_state d)
        | FIX_TL_Normal d -> ((match d with
            | FIX_Msg_NewOrderSingle m_data -> (process_NewOrderSingle m_state m_data)
            | FIX_Msg_OrderCancel m_data -> (process_OrderCancel m_state m_data)
            | FIX_Msg_NewOrder_Multi_Leg m_data -> (process_NewOrder_Multi_Leg m_state m_data)
            | FIX_Msg_NewOrder_List m_data -> (process_NewOrder_List m_state m_data)
            | FIX_Msg_ListOrderCancel m_data -> (process_ListOrderCancel m_state m_data)
            | FIX_Msg_BusinessMessageReject m_data -> (process_BusinessMessageReject m_state m_data)
            | FIX_Msg_AllocationReport m_data -> (process_AllocationReport m_state m_data)
            | FIX_Msg_AllocationReportACK m_data -> (process_AllocationReportACK m_state m_data)
            | FIX_Msg_AllocationInstruction m_data -> (process_AllocationInstruction m_state m_data)
            | FIX_Msg_Heartbeat m_data -> (process_Heartbeat m_state m_data)
            | FIX_Msg_TestRequest m_data -> (process_TestRequest m_state m_data)
            | FIX_Msg_ResendRequest m_data -> (process_ResendRequest m_state m_data)
            | FIX_Msg_SessionLevelReject m_data -> (process_SessionLevelReject m_state m_data)
            | FIX_Msg_SequenceResetRequest m_data -> (process_SequenceResetRequest m_state m_data)
            | FIX_Msg_Logout m_data -> (process_Logout m_state m_data)
            | FIX_Msg_FIXLogon m_data -> (process_FIXLogon m_state m_data)
            | FIX_Msg_DontKnowTrade m_data -> (process_DontKnowTrade m_state m_data)
            | _ -> m_state
        )
        )
        | FIX_TL_PossibleResend d -> m_state
        | FIX_TL_None -> m_state
    )
;;

let msg_NewOrderSingle_valid (msg_data : mod_newordersingle_data) (m_state : model_state)  =
    let fields_result = check_fields_NewOrderSingle msg_data m_state in
    let validate_result = check_validate_NewOrderSingle msg_data m_state in
    (&&) (not fields_result.is_invalid) (not validate_result.validate_invalid)
;;

let msg_OrderCancel_valid (msg_data : mod_ordercancel_data) (m_state : model_state)  =
    let fields_result = check_fields_OrderCancel msg_data m_state in
    let validate_result = check_validate_OrderCancel msg_data m_state in
    (&&) (not fields_result.is_invalid) (not validate_result.validate_invalid)
;;

let msg_NewOrder_Multi_Leg_valid (msg_data : mod_neworder_multi_leg_data) (m_state : model_state)  =
    let fields_result = check_fields_NewOrder_Multi_Leg msg_data m_state in
    let validate_result = check_validate_NewOrder_Multi_Leg msg_data m_state in
    (&&) (not fields_result.is_invalid) (not validate_result.validate_invalid)
;;

let msg_NewOrder_List_valid (msg_data : mod_neworder_list_data) (m_state : model_state)  =
    let fields_result = check_fields_NewOrder_List msg_data m_state in
    let validate_result = check_validate_NewOrder_List msg_data m_state in
    (&&) (not fields_result.is_invalid) (not validate_result.validate_invalid)
;;

let msg_ListOrderCancel_valid (msg_data : mod_listordercancel_data) (m_state : model_state)  =
    let fields_result = check_fields_ListOrderCancel msg_data m_state in
    let validate_result = check_validate_ListOrderCancel msg_data m_state in
    (&&) (not fields_result.is_invalid) (not validate_result.validate_invalid)
;;

let msg_BusinessMessageReject_valid (msg_data : mod_businessmessagereject_data) (m_state : model_state)  =
    let fields_result = check_fields_BusinessMessageReject msg_data m_state in
    let validate_result = check_validate_BusinessMessageReject msg_data m_state in
    (&&) (not fields_result.is_invalid) (not validate_result.validate_invalid)
;;

let msg_AllocationReport_valid (msg_data : mod_allocationreport_data) (m_state : model_state)  =
    let fields_result = check_fields_AllocationReport msg_data m_state in
    let validate_result = check_validate_AllocationReport msg_data m_state in
    (&&) (not fields_result.is_invalid) (not validate_result.validate_invalid)
;;

let msg_AllocationReportACK_valid (msg_data : mod_allocationreportack_data) (m_state : model_state)  =
    let fields_result = check_fields_AllocationReportACK msg_data m_state in
    let validate_result = check_validate_AllocationReportACK msg_data m_state in
    (&&) (not fields_result.is_invalid) (not validate_result.validate_invalid)
;;

let msg_AllocationInstruction_valid (msg_data : mod_allocationinstruction_data) (m_state : model_state)  =
    let fields_result = check_fields_AllocationInstruction msg_data m_state in
    let validate_result = check_validate_AllocationInstruction msg_data m_state in
    (&&) (not fields_result.is_invalid) (not validate_result.validate_invalid)
;;

let msg_Heartbeat_valid (msg_data : mod_heartbeat_data) (m_state : model_state)  =
    let fields_result = check_fields_Heartbeat msg_data m_state in
    let validate_result = check_validate_Heartbeat msg_data m_state in
    (&&) (not fields_result.is_invalid) (not validate_result.validate_invalid)
;;

let msg_TestRequest_valid (msg_data : mod_testrequest_data) (m_state : model_state)  =
    let fields_result = check_fields_TestRequest msg_data m_state in
    let validate_result = check_validate_TestRequest msg_data m_state in
    (&&) (not fields_result.is_invalid) (not validate_result.validate_invalid)
;;

let msg_ResendRequest_valid (msg_data : mod_resendrequest_data) (m_state : model_state)  =
    let fields_result = check_fields_ResendRequest msg_data m_state in
    let validate_result = check_validate_ResendRequest msg_data m_state in
    (&&) (not fields_result.is_invalid) (not validate_result.validate_invalid)
;;

let msg_SessionLevelReject_valid (msg_data : mod_sessionlevelreject_data) (m_state : model_state)  =
    let fields_result = check_fields_SessionLevelReject msg_data m_state in
    let validate_result = check_validate_SessionLevelReject msg_data m_state in
    (&&) (not fields_result.is_invalid) (not validate_result.validate_invalid)
;;

let msg_SequenceResetRequest_valid (msg_data : mod_sequenceresetrequest_data) (m_state : model_state)  =
    let fields_result = check_fields_SequenceResetRequest msg_data m_state in
    let validate_result = check_validate_SequenceResetRequest msg_data m_state in
    (&&) (not fields_result.is_invalid) (not validate_result.validate_invalid)
;;

let msg_Logout_valid (msg_data : mod_logout_data) (m_state : model_state)  =
    let fields_result = check_fields_Logout msg_data m_state in
    let validate_result = check_validate_Logout msg_data m_state in
    (&&) (not fields_result.is_invalid) (not validate_result.validate_invalid)
;;

let msg_FIXLogon_valid (msg_data : mod_fixlogon_data) (m_state : model_state)  =
    let fields_result = check_fields_FIXLogon msg_data m_state in
    let validate_result = check_validate_FIXLogon msg_data m_state in
    (&&) (not fields_result.is_invalid) (not validate_result.validate_invalid)
;;

let msg_DontKnowTrade_valid (msg_data : mod_dontknowtrade_data) (m_state : model_state)  =
    let fields_result = check_fields_DontKnowTrade msg_data m_state in
    let validate_result = check_validate_DontKnowTrade msg_data m_state in
    (&&) (not fields_result.is_invalid) (not validate_result.validate_invalid)
;;

let is_message_valid (msg : model_msg) (m_state : model_state)  =
    (match msg with
        | FIX_Msg_NewOrderSingle d -> (msg_NewOrderSingle_valid d m_state)
        | FIX_Msg_OrderCancel d -> (msg_OrderCancel_valid d m_state)
        | FIX_Msg_NewOrder_Multi_Leg d -> (msg_NewOrder_Multi_Leg_valid d m_state)
        | FIX_Msg_NewOrder_List d -> (msg_NewOrder_List_valid d m_state)
        | FIX_Msg_ListOrderCancel d -> (msg_ListOrderCancel_valid d m_state)
        | FIX_Msg_BusinessMessageReject d -> (msg_BusinessMessageReject_valid d m_state)
        | FIX_Msg_AllocationReport d -> (msg_AllocationReport_valid d m_state)
        | FIX_Msg_AllocationReportACK d -> (msg_AllocationReportACK_valid d m_state)
        | FIX_Msg_AllocationInstruction d -> (msg_AllocationInstruction_valid d m_state)
        | FIX_Msg_Heartbeat d -> (msg_Heartbeat_valid d m_state)
        | FIX_Msg_TestRequest d -> (msg_TestRequest_valid d m_state)
        | FIX_Msg_ResendRequest d -> (msg_ResendRequest_valid d m_state)
        | FIX_Msg_SessionLevelReject d -> (msg_SessionLevelReject_valid d m_state)
        | FIX_Msg_SequenceResetRequest d -> (msg_SequenceResetRequest_valid d m_state)
        | FIX_Msg_Logout d -> (msg_Logout_valid d m_state)
        | FIX_Msg_FIXLogon d -> (msg_FIXLogon_valid d m_state)
        | FIX_Msg_DontKnowTrade d -> (msg_DontKnowTrade_valid d m_state)
        | _ -> true
    )
;;
